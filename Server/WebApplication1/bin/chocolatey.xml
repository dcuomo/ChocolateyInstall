<?xml version="1.0"?>
<doc>
  <assembly>
    <name>chocolatey</name>
  </assembly>
  <members>
    <member name="T:SimpleInjector.ActivationException">
      <summary>
            The standard exception thrown when a container has an error in resolving an object.
            </summary>
    </member>
    <member name="M:SimpleInjector.ActivationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:SimpleInjector.ActivationException" /> class.
            </summary>
    </member>
    <member name="M:SimpleInjector.ActivationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:SimpleInjector.ActivationException" /> class with a specified error 
            message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:SimpleInjector.ActivationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:SimpleInjector.ActivationException" /> class with a specified error 
            message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">
            The error message that explains the reason for the exception. 
            </param>
      <param name="innerException">
            The exception that is the cause of the current exception, or a null reference (Nothing in Visual 
            Basic) if no inner exception is specified. 
            </param>
    </member>
    <member name="M:SimpleInjector.ActivationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:SimpleInjector.ActivationException" /> class with serialized data.
            </summary>
      <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception 
            being thrown. 
            </param>
      <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or 
            destination. 
            </param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null. 
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or hresult is zero (0). 
            </exception>
    </member>
    <member name="T:SimpleInjector.Advanced.AdvancedExtensions">
      <summary>
            Extension methods for enable advanced scenarios.
            </summary>
    </member>
    <member name="M:SimpleInjector.Advanced.AdvancedExtensions.IsLocked(SimpleInjector.Container)">
      <summary>
            Determines whether the specified container is locked making any new registrations. The container
            is automatically locked when <see cref="M:SimpleInjector.Container.GetInstance(System.Type)">GetInstance</see> is called for the
            first time.
            </summary>
      <param name="container">The container.</param>
      <returns>
        <c>true</c> if the specified container is locked; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container" /> is null.</exception>
    </member>
    <member name="M:SimpleInjector.Advanced.AdvancedExtensions.IsVerifying(SimpleInjector.Container)">
      <summary>Determines whether the specified container is currently verifying its configuration.</summary>
      <param name="container">The container.</param>
      <returns>
        <c>true</c> if the specified container is verifying; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container" /> is null.</exception>
    </member>
    <member name="M:SimpleInjector.Advanced.AdvancedExtensions.GetInitializer``1(SimpleInjector.Container)">
      <summary>
            Builds up an <see cref="T:System.Action`1" /> delegate wrapping all <see cref="T:System.Action`1" /> delegates that
            are registered using <see cref="M:SimpleInjector.Container.RegisterInitializer``1(System.Action{``0})">RegisterInitializer</see> and
            that apply to the given <typeparamref name="TService" /> (including delegates that are registered
            for interfaces <typeparamref name="TService" /> implements and base types that 
            <typeparamref name="TService" /> inherits from). <b>Null</b> will be returned when no delegates are
            registered that apply to this type.
            </summary>
      <param name="container">The container.</param>
      <remarks>
            This method has a performance caracteristic of O(n). Prevent from calling this in a performance
            critical path of the application.
            </remarks>
      <typeparam name="TService">The type for with an initializer must be built.</typeparam>
      <returns>An <see cref="T:System.Action`1" /> delegate or <b>null</b>.</returns>
    </member>
    <member name="M:SimpleInjector.Advanced.AdvancedExtensions.GetItem(SimpleInjector.Container,System.Object)">
      <summary>
            Retrieves an item from the container stored by the given <paramref name="key" /> or null when no
            item is stored by that key.
            </summary>
      <remarks>
        <b>Thread-safety:</b> Calls to this method are thread-safe, but users should take proper
            percausions when they call both <b>GetItem</b> and <see cref="M:SimpleInjector.Advanced.AdvancedExtensions.SetItem(SimpleInjector.Container,System.Object,System.Object)" />.
            </remarks>
      <param name="container">The container.</param>
      <param name="key">The key of the item to retrieve.</param>
      <returns>The stored item or null (Nothing in VB).</returns>
      <exception cref="T:System.ArgumentNullException">Thrown when one of the supplied arguments is a null
            reference (Nothing in VB).</exception>
    </member>
    <member name="M:SimpleInjector.Advanced.AdvancedExtensions.SetItem(SimpleInjector.Container,System.Object,System.Object)">
      <summary>
            Stores an item by the given <paramref name="key" /> in the container. 
            </summary>
      <remarks>
        <b>Thread-safety:</b> Calls to this method are thread-safe, but users should take proper
            percausions when they call both <see cref="M:SimpleInjector.Advanced.AdvancedExtensions.GetItem(SimpleInjector.Container,System.Object)" /> and <b>SetItem</b>.
            </remarks>
      <param name="container">The container.</param>
      <param name="key">The key of the item to insert or override.</param>
      <param name="item">The actual item. May be null.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when either <paramref name="container" /> or
            <paramref name="key" /> is a null reference (Nothing in VB).</exception>
    </member>
    <member name="M:SimpleInjector.Advanced.AdvancedExtensions.AppendToCollection(SimpleInjector.Container,System.Type,SimpleInjector.Registration)">
      <summary>
            Allows appending new registrations to existing registrations made using one of the
            <b>RegisterAll</b> overloads.
            </summary>
      <param name="container">The container.</param>
      <param name="serviceType">The service type of the collection.</param>
      <param name="registration">The registration to append.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when one of the supplied arguments is a null
            reference (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when the <paramref name="serviceType" /> is not a
            reference type, is open generic, or ambiguous.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when the container is locked.</exception>
      <exception cref="T:System.NotSupportedException">Thrown when the method is called for a registration
            that is made with one of the <b>RegisterAll</b> overloads that accepts a dynamic collection
            (an <b>IEnumerable</b> or <b>IEnumerable&lt;TService&gt;</b>).</exception>
    </member>
    <member name="T:SimpleInjector.Advanced.IConstructorInjectionBehavior">
      <summary>
            Defines the container's behavior for building an expression tree based on the supplied constructor of
            a given type.
            Set the <see cref="P:SimpleInjector.ContainerOptions.ConstructorInjectionBehavior">ConstructorInjectionBehavior</see> 
            property of the container's <see cref="P:SimpleInjector.Container.Options" /> property to change the default behavior 
            of the container.
            </summary>
    </member>
    <member name="M:SimpleInjector.Advanced.IConstructorInjectionBehavior.BuildParameterExpression(System.Reflection.ParameterInfo)">
      <summary>
            Builds an <see cref="T:System.Linq.Expressions.Expression" /> for the supplied <paramref name="parameter" />, based on the
            container's configuration.
            </summary>
      <param name="parameter">The parameter.</param>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that describes the intend of creating that 
            <paramref name="parameter" />.</returns>
    </member>
    <member name="T:SimpleInjector.Advanced.IConstructorResolutionBehavior">
      <summary>
            Defines the container's behavior for finding a suitable constructor for the creation of a type.
            Set the <see cref="P:SimpleInjector.ContainerOptions.ConstructorResolutionBehavior">ConstructorResolutionBehavior</see> 
            property of the container's <see cref="P:SimpleInjector.Container.Options" /> property to change the default behavior 
            of the container.
            </summary>
    </member>
    <member name="M:SimpleInjector.Advanced.IConstructorResolutionBehavior.GetConstructor(System.Type,System.Type)">
      <summary>
            Gets the given <paramref name="implementationType" />'s constructor that can be used by the 
            container to create that instance.
            </summary>
      <param name="serviceType">Type of the abstraction that is requested.</param>
      <param name="implementationType">Type of the implementation to find a suitable constructor for.</param>
      <returns>
            The <see cref="T:System.Reflection.ConstructorInfo" />.
            </returns>
      <exception cref="T:SimpleInjector.ActivationException">Thrown when no suitable constructor could be found.</exception>
    </member>
    <member name="T:SimpleInjector.Advanced.IConstructorVerificationBehavior">
      <summary>
            Defines the container's behavior for verifying the constructor that will be picked by the
            <see cref="T:SimpleInjector.Advanced.IConstructorResolutionBehavior" />.
            Set the <see cref="P:SimpleInjector.ContainerOptions.ConstructorVerificationBehavior">ConstructorVerificationBehavior</see> 
            property of the container's <see cref="P:SimpleInjector.Container.Options" /> property to change the default behavior 
            of the container.
            </summary>
    </member>
    <member name="M:SimpleInjector.Advanced.IConstructorVerificationBehavior.Verify(System.Reflection.ParameterInfo)">
      <summary>Verifies the specified <paramref name="parameter" />.</summary>
      <param name="parameter">The parameter.</param>
      <exception cref="T:SimpleInjector.ActivationException">Thrown when the <paramref name="parameter" /> cannot be 
            used for auto wiring.
            </exception>
      <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="parameter" /> is a
            null reference.</exception>
    </member>
    <member name="T:SimpleInjector.Advanced.IPropertySelectionBehavior">
      <summary>
            Defines the container's behavior for selecting properties to inject during the creation of a type.
            Set the <see cref="P:SimpleInjector.ContainerOptions.PropertySelectionBehavior">PropertySelectionBehavior</see> 
            property of the container's <see cref="P:SimpleInjector.Container.Options" /> property to change the default behavior 
            of the container. By default, no properties will be injected by the container.
            </summary>
    </member>
    <member name="M:SimpleInjector.Advanced.IPropertySelectionBehavior.SelectProperty(System.Type,System.Reflection.PropertyInfo)">
      <summary>
            Determines whether a property should be injected by the container upon creation of its type.
            </summary>
      <param name="serviceType">Type of the abstraction that is requested.</param>
      <param name="propertyInfo">The property to check.</param>
      <returns>True when the property should be injected.</returns>
    </member>
    <member name="T:SimpleInjector.Advanced.InitializationContext">
      <summary>
            An instance of this type will be supplied to the <see cref="T:System.Predicate`1" />
            delegate that is that is supplied to the 
            <see cref="M:SimpleInjector.Container.RegisterInitializer(System.Action{SimpleInjector.Advanced.InstanceInitializationData},System.Predicate{SimpleInjector.Advanced.InitializationContext})">RegisterInitializer</see>
            overload that takes this delegate. This type contains contextual information about the creation and it 
            allows the user to examine the given instance to decide whether the instance should be initialized or 
            not.
            </summary>
    </member>
    <member name="P:SimpleInjector.Advanced.InitializationContext.Producer">
      <summary>
            Gets the <see cref="T:SimpleInjector.InstanceProducer" /> that is responsible for the initialization of the created
            instance.
            </summary>
      <value>The <see cref="T:SimpleInjector.InstanceProducer" /> or null (Nothing in VB) when the instance producer is
            unknown.</value>
    </member>
    <member name="P:SimpleInjector.Advanced.InitializationContext.Registration">
      <summary>
            Gets the <see cref="P:SimpleInjector.Advanced.InitializationContext.Registration" /> that is responsible for the initialization of the created
            instance.
            </summary>
            /// <value>The <see cref="P:SimpleInjector.Advanced.InitializationContext.Registration" />.</value></member>
    <member name="T:SimpleInjector.Advanced.InstanceInitializationData">
      <summary>
            Contains data that can be used to initialize a created instance. This data includes the actual
            created <see cref="P:SimpleInjector.Advanced.InstanceInitializationData.Instance" /> and the <see cref="P:SimpleInjector.Advanced.InstanceInitializationData.Context" /> information about the created instance.
            </summary>
    </member>
    <member name="M:SimpleInjector.Advanced.InstanceInitializationData.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
    </member>
    <member name="M:SimpleInjector.Advanced.InstanceInitializationData.Equals(System.Object)">
      <summary>Indicates whether this instance and a specified object are equal.</summary>
      <param name="obj">Another object to compare to.</param>
      <returns>True if the current object is equal to the other parameter; otherwise, false.</returns>
    </member>
    <member name="M:SimpleInjector.Advanced.InstanceInitializationData.Equals(SimpleInjector.Advanced.InstanceInitializationData)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>True if the current object is equal to the other parameter; otherwise, false.</returns>
    </member>
    <member name="M:SimpleInjector.Advanced.InstanceInitializationData.op_Equality(SimpleInjector.Advanced.InstanceInitializationData,SimpleInjector.Advanced.InstanceInitializationData)">
      <summary>
            Indicates whether the values of two specified <see cref="T:SimpleInjector.Advanced.InstanceInitializationData" /> objects are equal.
            </summary>
      <param name="first">The first object to compare.</param>
      <param name="second">The second object to compare.</param>
      <returns>True if a and b are equal; otherwise, false.</returns>
    </member>
    <member name="M:SimpleInjector.Advanced.InstanceInitializationData.op_Inequality(SimpleInjector.Advanced.InstanceInitializationData,SimpleInjector.Advanced.InstanceInitializationData)">
      <summary>
            Indicates whether the values of two specified  <see cref="T:SimpleInjector.Advanced.InstanceInitializationData" />  objects are 
            not equal.
            </summary>
      <param name="first">The first object to compare.</param>
      <param name="second">The second object to compare.</param>
      <returns>True if a and b are not equal; otherwise, false.</returns>
    </member>
    <member name="P:SimpleInjector.Advanced.InstanceInitializationData.Context">
      <summary>Gets the <see cref="T:SimpleInjector.Advanced.InitializationContext" /> with contextual information about the 
            created instance.</summary>
      <value>The <see cref="T:SimpleInjector.Advanced.InitializationContext" />.</value>
    </member>
    <member name="P:SimpleInjector.Advanced.InstanceInitializationData.Instance">
      <summary>Gets the created instance.</summary>
      <value>The created instance.</value>
    </member>
    <member name="T:SimpleInjector.Advanced.Internal.LazyScope">
      <summary>
            This is an internal type. Only depend on this type when you want to be absolutely sure a future 
            version of the framework will break your code.
            </summary>
    </member>
    <member name="M:SimpleInjector.Advanced.Internal.LazyScope.#ctor(System.Func{SimpleInjector.Scope},SimpleInjector.Container)">
      <summary>Initializes a new instance of the <see cref="T:SimpleInjector.Advanced.Internal.LazyScope" /> struct.</summary>
      <param name="scopeFactory">The scope factory.</param>
      <param name="container">The container.</param>
    </member>
    <member name="P:SimpleInjector.Advanced.Internal.LazyScope.Value">
      <summary>Gets the lazily initialized Scope of the current LazyScope instance.</summary>
      <value>The current Scope or null.</value>
    </member>
    <member name="T:SimpleInjector.Advanced.Internal.LazyScopedRegistration`2">
      <summary>
            This is an internal type. Only depend on this type when you want to be absolutely sure a future 
            version of the framework will break your code.
            </summary>
      <typeparam name="TService">Service type.</typeparam>
      <typeparam name="TImplementation">Implementation type.</typeparam>
    </member>
    <member name="M:SimpleInjector.Advanced.Internal.LazyScopedRegistration`2.#ctor(SimpleInjector.Registration)">
      <summary>
            Initializes a new instance of the <see cref="T:SimpleInjector.Advanced.Internal.LazyScopedRegistration`2" /> 
            struct.</summary>
      <param name="registration">The registration.</param>
    </member>
    <member name="M:SimpleInjector.Advanced.Internal.LazyScopedRegistration`2.GetInstance(SimpleInjector.Scope)">
      <summary>Gets the lazily initialized instance for the of the current LazyScopedRegistration.</summary>
      <param name="scope">The scope that is used to retrieve the instance.</param>
      <returns>The cached instance.</returns>
    </member>
    <member name="T:SimpleInjector.Container">
      <summary>
            The container. Create an instance of this type for registration of dependencies.
            </summary>
      <remarks>
        <para>
          <b>Thread-safety:</b>
            Resolving instances can be done safely from multiple threads concurrently, but registration needs to
            be done from one single thread.
            </para>
        <para> 
            It is therefore safe to call <see cref="M:SimpleInjector.Container.GetInstance(System.Type)" />, <see cref="M:SimpleInjector.Container.GetAllInstances(System.Type)" />, 
            <see cref="M:System.IServiceProvider.GetService(System.Type)">GetService</see>, <see cref="M:SimpleInjector.Container.GetRegistration(System.Type)" /> and
            <see cref="M:SimpleInjector.Container.GetCurrentRegistrations" /> and anything related to resolving instances from multiple thread 
            concurrently. It is however <b>unsafe</b> to call
            <see cref="M:SimpleInjector.Container.Register``2(SimpleInjector.Lifestyle)">RegisterXXX</see>,
            <see cref="E:SimpleInjector.Container.ExpressionBuilding" />, <see cref="E:SimpleInjector.Container.ExpressionBuilt" />, <see cref="E:SimpleInjector.Container.ResolveUnregisteredType" />,
            <see cref="M:SimpleInjector.Container.AddRegistration(System.Type,SimpleInjector.Registration)" /> or anything related to registering from multiple threads concurrently.
            </para>
      </remarks>
    </member>
    <member name="M:SimpleInjector.Container.Register``1">
      <summary>
            Registers that a new instance of <typeparamref name="TConcrete" /> will be returned every time it 
            is requested (transient). Note that calling this method is redundant in most scenarios, because
            the container will return a new instance for unregistered concrete types. Registration is needed
            when the security restrictions of the application's sandbox don't allow the container to create
            such type.
            </summary>
      <typeparam name="TConcrete">The concrete type that will be registered.</typeparam>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when an 
            the <typeparamref name="TConcrete" /> has already been registered.
            </exception>
      <exception cref="T:System.ArgumentException">Thrown when the <typeparamref name="TConcrete" /> is a type
            that can not be created by the container.</exception>
    </member>
    <member name="M:SimpleInjector.Container.Register``1(SimpleInjector.Lifestyle)">
      <summary>
            Registers that an  instance of <typeparamref name="TConcrete" /> will be returned when it 
            is requested. The instance is cached according to the supplied <paramref name="lifestyle" />.
            </summary>
      <typeparam name="TConcrete">The concrete type that will be registered.</typeparam>
      <param name="lifestyle">The lifestyle that specifies how the returned instance will be cached.</param>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when an 
            the <typeparamref name="TConcrete" /> has already been registered.
            </exception>
      <exception cref="T:System.ArgumentException">Thrown when the <typeparamref name="TConcrete" /> is a type
            that can not be created by the container.</exception>
    </member>
    <member name="M:SimpleInjector.Container.Register``2">
      <summary>
            Registers that a new instance of <typeparamref name="TImplementation" /> will be returned every time a
            <typeparamref name="TService" /> is requested.
            </summary>
      <typeparam name="TService">The interface or base type that can be used to retrieve the instances.</typeparam>
      <typeparam name="TImplementation">The concrete type that will be registered.</typeparam>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when an 
            the <typeparamref name="TService" /> has already been registered.</exception>
      <exception cref="T:System.ArgumentException">Thrown when the given <typeparamref name="TImplementation" /> 
            type is not a type that can be created by the container.
            </exception>
    </member>
    <member name="M:SimpleInjector.Container.Register``1(System.Func{``0})">
      <summary>
            Registers the specified delegate that allows returning transient instances of 
            <typeparamref name="TService" />. The delegate is expected to always return a new instance on
            each call.
            </summary>
      <typeparam name="TService">The interface or base type that can be used to retrieve instances.</typeparam>
      <param name="instanceCreator">The delegate that allows building or creating new instances.</param>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when the 
            <typeparamref name="TService" /> has already been registered.</exception>
      <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="instanceCreator" /> is a null reference.</exception>
    </member>
    <member name="M:SimpleInjector.Container.Register(System.Type)">
      <summary>
            Registers that a new instance of <paramref name="concreteType" /> will be returned every time it 
            is requested (transient).
            </summary>
      <param name="concreteType">The concrete type that will be registered.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="concreteType" /> is a null 
            references (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="concreteType" /> represents an 
            open generic type or is a type that can not be created by the container.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when an 
            the <paramref name="concreteType" /> has already been registered.
            </exception>
    </member>
    <member name="M:SimpleInjector.Container.Register(System.Type,System.Type)">
      <summary>
            Registers that a new instance of <paramref name="implementation" /> will be returned every time a
            <paramref name="serviceType" /> is requested. If <paramref name="serviceType" /> and 
            <paramref name="implementation" /> represent the same type, the type is registered by itself.
            </summary>
      <param name="serviceType">The base type or interface to register.</param>
      <param name="implementation">The actual type that will be returned when requested.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="serviceType" /> or 
            <paramref name="implementation" /> are null references (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="implementation" /> is
            no sub type from <paramref name="serviceType" /> (or the same type), or one of them represents an 
            open generic type.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when an 
            the <paramref name="serviceType" /> has already been registered.
            </exception>
    </member>
    <member name="M:SimpleInjector.Container.Register(System.Type,System.Func{System.Object})">
      <summary>
            Registers the specified delegate that allows returning instances of <paramref name="serviceType" />.
            </summary>
      <param name="serviceType">The base type or interface to register.</param>
      <param name="instanceCreator">The delegate that will be used for creating new instances.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when either <paramref name="serviceType" /> or 
            <paramref name="instanceCreator" /> are null references (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="serviceType" /> represents an
            open generic type.</exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when an 
            the <paramref name="serviceType" /> has already been registered.
            </exception>
    </member>
    <member name="M:SimpleInjector.Container.RegisterSingle``1">
      <summary>
            Registers a single concrete instance that will be constructed using constructor injection and will
            be returned when this instance is requested by type <typeparamref name="TConcrete" />. 
            This <typeparamref name="TConcrete" /> must be thread-safe when working in a multi-threaded 
            environment.
            </summary>
      <typeparam name="TConcrete">The concrete type that will be registered.</typeparam>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when 
            <typeparamref name="TConcrete" /> has already been registered.
            </exception>
      <exception cref="T:System.ArgumentException">Thrown when the <typeparamref name="TConcrete" /> is a type
            that can not be created by the container.</exception>
    </member>
    <member name="M:SimpleInjector.Container.RegisterSingle``2">
      <summary>
            Registers that the same a single instance of type <typeparamref name="TImplementation" /> will be 
            returned every time an <typeparamref name="TService" /> type is requested. If 
            <typeparamref name="TService" /> and <typeparamref name="TImplementation" />  represent the same 
            type, the type is registered by itself. <typeparamref name="TImplementation" /> must be thread-safe 
            when working in a multi-threaded environment.
            </summary>
      <typeparam name="TService">
            The interface or base type that can be used to retrieve the instances.
            </typeparam>
      <typeparam name="TImplementation">The concrete type that will be registered.</typeparam>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when the 
            <typeparamref name="TService" /> has already been registered.</exception>
      <exception cref="T:System.ArgumentException">Thrown when the given <typeparamref name="TImplementation" /> 
            type is not a type that can be created by the container.
            </exception>
    </member>
    <member name="M:SimpleInjector.Container.RegisterSingle``1(``0)">
      <summary>
            Registers a single instance that will be returned when an instance of type 
            <typeparamref name="TService" /> is requested. This <paramref name="instance" /> must be thread-safe
            when working in a multi-threaded environment.
            </summary>
      <typeparam name="TService">The interface or base type that can be used to retrieve the instance.</typeparam>
      <param name="instance">The instance to register.</param>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when the 
            <typeparamref name="TService" /> has already been registered.</exception>
      <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="instance" /> is a null reference.
            </exception>
    </member>
    <member name="M:SimpleInjector.Container.RegisterSingle``1(System.Func{``0})">
      <summary>
            Registers the specified delegate that allows constructing a single instance of 
            <typeparamref name="TService" />. This delegate will be called at most once during the lifetime of 
            the application. The returned instance must be thread-safe when working in a multi-threaded 
            environment.
            </summary>
      <typeparam name="TService">The interface or base type that can be used to retrieve instances.</typeparam>
      <param name="instanceCreator">The delegate that allows building or creating this single
            instance.</param>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when a 
            <paramref name="instanceCreator" /> for <typeparamref name="TService" /> has already been registered.
            </exception>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="instanceCreator" /> is a 
            null reference.</exception>
    </member>
    <member name="M:SimpleInjector.Container.RegisterSingle(System.Type,System.Type)">
      <summary>
            Registers that the same instance of type <paramref name="implementation" /> will be returned every 
            time an instance of type <paramref name="serviceType" /> type is requested. If 
            <paramref name="serviceType" /> and <paramref name="implementation" /> represent the same type, the 
            type is registered by itself. <paramref name="implementation" /> must be thread-safe when working 
            in a multi-threaded environment.
            </summary>
      <param name="serviceType">The base type or interface to register.</param>
      <param name="implementation">The actual type that will be returned when requested.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when either <paramref name="serviceType" /> or 
            <paramref name="implementation" /> are null references (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="implementation" /> is
            no sub type from <paramref name="serviceType" />, or when one of them represents an open generic
            type.</exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when an 
            the <paramref name="serviceType" /> has already been registered.
            </exception>
    </member>
    <member name="M:SimpleInjector.Container.RegisterSingle(System.Type,System.Func{System.Object})">
      <summary>
            Registers the specified delegate that allows constructing a single <paramref name="serviceType" /> 
            instance. The container will call this delegate at most once during the lifetime of the application.
            </summary>
      <param name="serviceType">The base type or interface to register.</param>
      <param name="instanceCreator">The delegate that will be used for creating that single instance.</param>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="serviceType" /> represents an open
            generic type.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown when either <paramref name="serviceType" /> or 
            <paramref name="instanceCreator" /> are null references (Nothing in
            VB).</exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when an 
            the <paramref name="serviceType" /> has already been registered.
            </exception>
    </member>
    <member name="M:SimpleInjector.Container.RegisterSingle(System.Type,System.Object)">
      <summary>
            Registers a single instance that will be returned when an instance of type 
            <paramref name="serviceType" /> is requested. This <paramref name="instance" /> must be thread-safe
            when working in a multi-threaded environment.
            </summary>
      <param name="serviceType">The base type or interface to register.</param>
      <param name="instance">The instance to register.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when either <paramref name="serviceType" /> or 
            <paramref name="instance" /> are null references (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="instance" /> is
            no sub type from <paramref name="serviceType" />.</exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when an 
            the <paramref name="serviceType" /> has already been registered.
            </exception>
    </member>
    <member name="M:SimpleInjector.Container.Register``2(SimpleInjector.Lifestyle)">
      <summary>
            Registers that an instance of <typeparamref name="TImplementation" /> will be returned when an
            instance of type <typeparamref name="TService" /> is requested. The instance is cached according to 
            the supplied <paramref name="lifestyle" />.
            </summary>
      <typeparam name="TService">The interface or base type that can be used to retrieve the instances.</typeparam>
      <typeparam name="TImplementation">The concrete type that will be registered.</typeparam>
      <param name="lifestyle">The lifestyle that specifies how the returned instance will be cached.</param>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when an 
            the <typeparamref name="TService" /> has already been registered.</exception>
      <exception cref="T:System.ArgumentException">Thrown when the given <typeparamref name="TImplementation" /> 
            type is not a type that can be created by the container.
            </exception>
    </member>
    <member name="M:SimpleInjector.Container.Register``1(System.Func{``0},SimpleInjector.Lifestyle)">
      <summary>
            Registers the specified delegate <paramref name="instanceCreator" /> that will produce instances of
            type <typeparamref name="TService" /> and will be returned when an instance of type 
            <typeparamref name="TService" /> is requested. The delegate is expected to produce new instances on
            each call. The instances are cached according to the supplied <paramref name="lifestyle" />.
            </summary>
      <typeparam name="TService">The interface or base type that can be used to retrieve instances.</typeparam>
      <param name="instanceCreator">The delegate that allows building or creating new instances.</param>
      <param name="lifestyle">The lifestyle that specifies how the returned instance will be cached.</param>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when the 
            <typeparamref name="TService" /> has already been registered.</exception>
      <exception cref="T:System.ArgumentNullException">
            Thrown when one of the supplied arguments is a null reference (Nothing in VB).</exception>
    </member>
    <member name="M:SimpleInjector.Container.Register(System.Type,System.Type,SimpleInjector.Lifestyle)">
      <summary>
            Registers that an instance of type <paramref name="implementationType" /> will be returned when an
            instance of type <paramref name="serviceType" /> is requested. The instance is cached according to 
            the supplied <paramref name="lifestyle" />.
            </summary>
      <param name="serviceType">The interface or base type that can be used to retrieve the instances.</param>
      <param name="implementationType">The concrete type that will be registered.</param>
      <param name="lifestyle">The lifestyle that specifies how the returned instance will be cached.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when one of the supplied arguments is a null
            reference (Nothing in VB).</exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when the 
            <paramref name="serviceType" /> has already been registered.</exception>
      <exception cref="T:System.ArgumentException">Thrown when the given <paramref name="implementationType" />
            type is not a type that can be created by the container, when either <paramref name="serviceType" />
            or <paramref name="implementationType" /> are open generic types, or when 
            <paramref name="serviceType" /> is not assignable from the <paramref name="implementationType" />.
            </exception>
      <exception cref="T:System.ArgumentNullException">Thrown when one of the supplied arguments is a null
            reference (Nothing in VB).</exception>
    </member>
    <member name="M:SimpleInjector.Container.Register(System.Type,System.Func{System.Object},SimpleInjector.Lifestyle)">
      <summary>
            Registers the specified delegate <paramref name="instanceCreator" /> that will produce instances of
            type <paramref name="serviceType" /> and will be returned when an instance of type 
            <paramref name="serviceType" /> is requested. The delegate is expected to produce new instances on 
            each call. The instances are cached according to the supplied <paramref name="lifestyle" />.
            </summary>
      <param name="serviceType">The interface or base type that can be used to retrieve instances.</param>
      <param name="instanceCreator">The delegate that allows building or creating new instances.</param>
      <param name="lifestyle">The lifestyle that specifies how the returned instance will be cached.</param>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when the 
            <paramref name="serviceType" /> has already been registered.</exception>
      <exception cref="T:System.ArgumentNullException">
            Thrown when one of the supplied arguments is a null reference (Nothing in VB).</exception>
    </member>
    <member name="M:SimpleInjector.Container.RegisterInitializer``1(System.Action{``0})">
      <summary>
            Registers an <see cref="T:System.Action`1" /> delegate that runs after the creation of instances that
            implement or derive from the given <typeparamref name="TService" />. Please note that only instances
            that are created by the container (using constructor injection) can be initialized this way.
            </summary>
      <typeparam name="TService">The type for which the initializer will be registered.</typeparam>
      <param name="instanceInitializer">The delegate that will be called after the instance has been
            constructed and before it is returned.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="instanceInitializer" /> is a null reference.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered.</exception>
      <remarks>
        <para>
            Multiple <paramref name="instanceInitializer" /> delegates can be registered per 
            <typeparamref name="TService" /> and multiple initializers can be applied on a created instance,
            before it is returned. For instance, when registering a <paramref name="instanceInitializer" />
            for type <see cref="T:System.Object" />, the delegate will be called for every instance created by
            the container, which can be nice for debugging purposes.
            </para>
        <para>
            Note: Initializers are guaranteed to be executed in the order they are registered.
            </para>
        <para>
            The following example shows the usage of the 
            <see cref="M:SimpleInjector.Container.RegisterInitializer``1(System.Action{``0})">RegisterInitializer</see> method:
            </para>
        <code lang="cs"><![CDATA[
            public interface ITimeProvider { DateTime Now { get; } }
            public interface ICommand { bool SendAsync { get; set; } }
            
            public abstract class CommandBase : ICommand
            {
                ITimeProvider Clock { get; set; }
                
                public bool SendAsync { get; set; }
            }
            
            public class ConcreteCommand : CommandBase { }
            
            [TestMethod]
            public static void TestRegisterInitializer()
            {
                // Arrange
                var container = new Container();
            
                container.Register<ICommand, ConcreteCommand>();
            
                // Configuring property injection for types that implement ICommand:
                container.RegisterInitializer<ICommand>(command =>
                {
                    command.SendAsync = true;
                });
            
                // Configuring property injection for types that implement CommandBase:
                container.RegisterInitializer<CommandBase>(command =>
                {
                    command.Clock = container.GetInstance<ITimeProvider>();
                });
                
                // Act
                var command = (ConcreteCommand)container.GetInstance<ICommand>();
            
                // Assert
                // Because ConcreteCommand implements both ICommand and CommandBase, 
                // both the initializers will have been executed.
                Assert.IsTrue(command.SendAsync);
                Assert.IsNotNull(command.Clock);
            }
            ]]></code>
        <para>
            The container does not use the type information of the requested service type, but it uses the 
            type information of the actual implementation to find all initialized that apply for that 
            type. This makes it possible to have multiple initializers to be applied on a single returned
            instance while keeping performance high.
            </para>
        <para>
            Registered initializers will only be applied to instances that are created by the container self
            (using constructor injection). Types that are newed up manually by supplying a 
            <see cref="T:System.Func`1" /> delegate to the container (using the 
            <see cref="M:SimpleInjector.Container.Register``1(System.Func{``0})" /> and 
            <see cref="M:SimpleInjector.Container.RegisterSingle``1(System.Func{``0})" /> methods) or registered as single instance
            (using <see cref="M:SimpleInjector.Container.RegisterSingle``1(``0)" />) will not trigger initialization.
            When initialization of these instances is needed, this must be done manually, as can be seen in 
            the following example:
            <code lang="cs"><![CDATA[
            [TestMethod]
            public static void TestRegisterInitializer()
            {
                // Arrange
                int initializerCallCount = 0;
                
                var container = new Container();
                
                // Define a initializer for ICommand
                Action<ICommand> commandInitializer = command =>
                {
                    initializerCallCount++;
                });
                
                // Configuring that initializer.
                container.RegisterInitializer<ICommand>(commandInitializer);
                
                container.Register<ICommand>(() =>
                {
                    // Create a ConcreteCommand manually: will not be initialized.
                    var command = new ConcreteCommand("Data Source=.;Initial Catalog=db;");
                
                    // Run the initializer manually.
                    commandInitializer(command);
                
                    return command;
                });
                
                // Act
                var command = container.GetInstance<ICommand>();
            
                // Assert
                // The initializer will only be called once.
                Assert.AreEqual(1, initializerCallCount);
            }
            ]]></code>
            The previous example shows how a manually created instance can still be initialized. Try to
            prevent creating types manually, by changing the design of those classes. If possible, create a
            single public constructor that only contains dependencies that can be resolved.
            </para>
      </remarks>
    </member>
    <member name="M:SimpleInjector.Container.RegisterInitializer(System.Action{SimpleInjector.Advanced.InstanceInitializationData},System.Predicate{SimpleInjector.Advanced.InitializationContext})">
      <summary>
            Registers an <see cref="T:System.Action`1" /> delegate that runs after the 
            creation of instances for which the supplied <paramref name="predicate" /> returns true. Please 
            note that only instances that are created by the container can be initialized this way.
            </summary>
      <param name="instanceInitializer">The delegate that will be called after the instance has been
            constructed and before it is returned.</param>
      <param name="predicate">The predicate that will be used to check whether the given delegate must
            be applied to a registration or not. The given predicate will be called once for each registration
            in the container.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when either the <paramref name="instanceInitializer" /> or <paramref name="predicate" /> are 
            null references.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered.</exception>
      <remarks>
        <para>
            Note: Initializers are guaranteed to be executed in the order they are registered.
            </para>
        <para>
            Note: The <paramref name="predicate" /> is <b>not</b> guaranteed to be called once per registration;
            when a registration's instance is requested for the first time simultaniously over multiple thread,
            the predicate might be called multiple times. The caller of this method is responsible of supplying
            a predicate that is thread-safe.
            </para>
      </remarks>
    </member>
    <member name="M:SimpleInjector.Container.RegisterAll``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Registers a dynamic (container uncontrolled) collection of elements of type 
            <typeparamref name="TService" />. A call to <see cref="M:SimpleInjector.Container.GetAllInstances``1" /> will return the 
            <paramref name="collection" /> itself, and updates to the collection will be reflected in the 
            result. If updates are allowed, make sure the collection can be iterated safely if you're running 
            a multi-threaded application.
            </summary>
      <typeparam name="TService">The interface or base type that can be used to retrieve instances.</typeparam>
      <param name="collection">The collection to register.</param>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when a <paramref name="collection" />
            for <typeparamref name="TService" /> has already been registered.
            </exception>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="collection" /> is a null
            reference.</exception>
    </member>
    <member name="M:SimpleInjector.Container.RegisterAll``1(``0[])">
      <summary>
            Registers a collection of singleton elements of type <typeparamref name="TService" />.
            </summary>
      <typeparam name="TService">The interface or base type that can be used to retrieve instances.</typeparam>
      <param name="singletons">The collection to register.</param>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when a <paramref name="singletons" />
            for <typeparamref name="TService" /> has already been registered.
            </exception>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="singletons" /> is a null
            reference.</exception>
      <exception cref="T:System.ArgumentException">Thrown when one of the elements of <paramref name="singletons" />
            is a null reference.</exception>
    </member>
    <member name="M:SimpleInjector.Container.RegisterAll``1(System.Type[])">
      <summary>
            Registers an collection of <paramref name="serviceTypes" />, which instances will be resolved when
            enumerating the set returned when a collection of <typeparamref name="TService" /> objects is 
            requested. On enumeration the container is called for each type in the list.
            </summary>
      <typeparam name="TService">The base type or interface for elements in the collection.</typeparam>
      <param name="serviceTypes">The collection of <see cref="T:System.Type" /> objects whose instances
            will be requested from the container.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when one of the supplied arguments is a null 
            reference (Nothing in VB).
            </exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="serviceTypes" /> contains a null
            (Nothing in VB) element, a generic type definition, or the <typeparamref name="TService" /> is
            not assignable from one of the given <paramref name="serviceTypes" /> elements.
            </exception>
    </member>
    <member name="M:SimpleInjector.Container.RegisterAll``1(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Registers a collection of instances of <paramref name="serviceTypes" /> to be returned when
            a collection of <typeparamref name="TService" /> objects is requested.
            </summary>
      <typeparam name="TService">The base type or interface for elements in the collection.</typeparam>
      <param name="serviceTypes">The collection of <see cref="T:System.Type" /> objects whose instances
            will be requested from the container.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="serviceTypes" /> is a null 
            reference (Nothing in VB).
            </exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="serviceTypes" /> contains a null
            (Nothing in VB) element, a generic type definition, or the <typeparamref name="TService" /> is
            not assignable from one of the given <paramref name="serviceTypes" /> elements.
            </exception>
    </member>
    <member name="M:SimpleInjector.Container.RegisterAll(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Registers an collection of <paramref name="serviceTypes" />, which instances will be resolved when
            enumerating the set returned when a collection of <paramref name="serviceType" /> objects is 
            requested. On enumeration the container is called for each type in the list.
            </summary>
      <param name="serviceType">The base type or interface for elements in the collection.</param>
      <param name="serviceTypes">The collection of <see cref="T:System.Type" /> objects whose instances
            will be requested from the container.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when one of the supplied arguments is a null 
            reference (Nothing in VB).
            </exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="serviceTypes" /> contains a null
            (Nothing in VB) element, a generic type definition, or the <paramref name="serviceType" /> is
            not assignable from one of the given <paramref name="serviceTypes" /> elements.
            </exception>
    </member>
    <member name="M:SimpleInjector.Container.RegisterAll(System.Type,SimpleInjector.Registration[])">
      <summary>
            Registers an collection of <paramref name="registrations" />, which instances will be resolved when
            enumerating the set returned when a collection of <paramref name="serviceType" /> objects is 
            requested. On enumeration the container is called for each type in the list.
            </summary>
      <param name="serviceType">The base type or interface for elements in the collection.</param>
      <param name="registrations">The collection of <see cref="T:SimpleInjector.Registration" /> objects whose instances
            will be requested from the container.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when one of the supplied arguments is a null 
            reference (Nothing in VB).
            </exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="registrations" /> contains a null
            (Nothing in VB) element, the <paramref name="serviceType" /> is a generic type definition, or when 
            <paramref name="serviceType" /> is
            not assignable from one of the given <paramref name="registrations" /> elements.
            </exception>
    </member>
    <member name="M:SimpleInjector.Container.RegisterAll(System.Type,System.Collections.Generic.IEnumerable{SimpleInjector.Registration})">
      <summary>
            Registers an collection of <paramref name="registrations" />, which instances will be resolved when
            enumerating the set returned when a collection of <paramref name="serviceType" /> objects is 
            requested. On enumeration the container is called for each type in the list.
            </summary>
      <param name="serviceType">The base type or interface for elements in the collection.</param>
      <param name="registrations">The collection of <see cref="T:SimpleInjector.Registration" /> objects whose instances
            will be requested from the container.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when one of the supplied arguments is a null 
            reference (Nothing in VB).
            </exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="registrations" /> contains a null
            (Nothing in VB) element, the <paramref name="serviceType" /> is a generic type definition, or when 
            <paramref name="serviceType" /> is
            not assignable from one of the given <paramref name="registrations" /> elements.
            </exception>
    </member>
    <member name="M:SimpleInjector.Container.RegisterAll(System.Type,System.Collections.IEnumerable)">
      <summary>
            Registers a dynamic (container uncontrolled) collection of elements of type 
            <paramref name="serviceType" />. A call to <see cref="M:SimpleInjector.Container.GetAllInstances``1" /> will return the 
            <paramref name="collection" /> itself, and updates to the collection will be reflected in the 
            result. If updates are allowed, make sure the collection can be iterated safely if you're running 
            a multi-threaded application.
            </summary>
      <param name="serviceType">The base type or interface for elements in the collection.</param>
      <param name="collection">The collection of items to register.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when one of the supplied arguments is a null 
            reference (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="serviceType" /> represents an
            open generic type.</exception>
    </member>
    <member name="M:SimpleInjector.Container.Verify">
      <summary>
            Verifies the <b>Container</b>. This method will call all registered delegates, 
            iterate registered collections and throws an exception if there was an error.
            </summary>
      <exception cref="T:System.InvalidOperationException">Thrown when the registration of instances was
            invalid.</exception>
    </member>
    <member name="M:SimpleInjector.Container.AddRegistration(System.Type,SimpleInjector.Registration)">
      <summary>
            Adds the <paramref name="registration" /> for the supplied <paramref name="serviceType" />. This
            method can be used to apply the same <see cref="T:SimpleInjector.Registration" /> to multiple different service
            types.
            </summary>
      <param name="serviceType">The base type or interface to register.</param>
      <param name="registration">The registration that should be stored for the given 
            <paramref name="serviceType" />.</param>
      <example>
        <code lang="cs"><![CDATA[
            public interface IFoo { }
            public interface IBar { }
            public class FooBar : IFoo, IBar { }
            
            public void AddRegistration_SuppliedWithSameSingletonRegistrationTwice_ReturnsSameInstance()
            {
                // Arrange
                Registration registration =
                    Lifestyle.Singleton.CreateRegistration<FooBar, FooBar>(container);
            
                container.AddRegistration(typeof(IFoo), registration);
                container.AddRegistration(typeof(IBar), registration);
            
                // Act
                IFoo foo = container.GetInstance<IFoo>();
                IBar bar  = container.GetInstance<IBar>();
            
                // Assert
                bool fooAndBareAreTheSameInstance = object.ReferenceEquals(foo, bar);
                Assert.IsTrue(fooAndBareAreTheSameInstance);
            }
            ]]></code>
        <para>
            In the example above a singleton registration is created for type <c>FooBar</c> and this 
            registration is added to the container for each interface (<c>IFoo</c> and <c>IBar</c>) that it
            implements. Since both services use the same singleton registration, requesting those services 
            will result in the return of the same (singleton) instance.
            </para>
        <para>
          <see cref="E:SimpleInjector.Container.ExpressionBuilding" /> events are applied to the <see cref="T:System.Linq.Expressions.Expression" /> of the
            <see cref="T:SimpleInjector.Registration" /> instance and are therefore applied once. <see cref="E:SimpleInjector.Container.ExpressionBuilt" /> 
            events on the other hand get applied to the <b>Expression</b> of the <see cref="T:SimpleInjector.InstanceProducer" />.
            Since each <b>AddRegistration</b> gets its own instance producer (that wraps the 
            <b>Registration</b> instance), this means that that <b>ExpressionBuilt</b> events will be 
            applied for each registered service type.
            </para>
        <para>
            The most practical example of this is the use of decorators using one of the 
            <see cref="T:SimpleInjector.Extensions.DecoratorExtensions">RegisterDecorator</see> overloads 
            (decorator registration use the
            <b>ExpressionBuilt</b> event under the covers). Take a look at the following example:
            </para>
        <code lang="cs"><![CDATA[
            public interface IFoo { }
            public interface IBar { }
            public class FooBar : IFoo, IBar { }
            
            public class BarDecorator : IBar
            {
                public BarDecorator(IBar decoratedBar)
                {
                    this.DecoratedBar = decoratedBar;
                }
                
                public IBar DecoratedBar { get; private set; }
            }
            
            public void AddRegistration_SameSingletonRegistrationTwiceAndOneDecoratorApplied_ReturnsSameInstance()
            {
                // Arrange
                Registration registration =
                    Lifestyle.Singleton.CreateRegistration<FooBar, FooBar>(container);
            
                container.AddRegistration(typeof(IFoo), registration);
                container.AddRegistration(typeof(IBar), registration);
                
                // Registere a decorator for IBar, but not for IFoo
                container.RegisterDecorator(typeof(IBar), typeof(BarDecorator));
            
                // Act
                var foo = container.GetInstance<IFoo>();
                var decorator = container.GetInstance<IBar>() as BarDecorator;
                var bar = decorator.DecoratedBar;
            
                // Assert
                bool fooAndBareAreTheSameInstance = object.ReferenceEquals(foo, bar);
                Assert.IsTrue(fooAndBareAreTheSameInstance);
            }
            ]]></code>
            The example shows that the decorator gets applied to <c>IBar</c> but not to <c>IFoo</c>, but that
            the decorated <c>IBar</c> is still the same instance as the resolved <c>IFoo</c> instance.
            </example>
      <exception cref="T:System.ArgumentNullException">Thrown when one of the supplied arguments is a null
            reference (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="serviceType" /> is not a reference
            type, is open generic, is ambiguous, when it is not assignable from the 
            <paramref name="registration" />'s <see cref="P:SimpleInjector.Registration.ImplementationType">ImplementationType</see>
            or when the supplied <paramref name="registration" /> is created for a different 
            <see cref="T:SimpleInjector.Container" /> instance.</exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when this container instance is locked and can not be altered, or when an 
            the <paramref name="serviceType" /> has already been registered.
            </exception>
    </member>
    <member name="M:SimpleInjector.Container.GetInstance``1">
      <summary>Gets an instance of the given <typeparamref name="TService" />.</summary>
      <typeparam name="TService">Type of object requested.</typeparam>
      <returns>The requested service instance.</returns>
      <exception cref="T:SimpleInjector.ActivationException">Thrown when there are errors resolving the service instance.</exception>
    </member>
    <member name="M:SimpleInjector.Container.GetInstance(System.Type)">
      <summary>Gets an instance of the given <paramref name="serviceType" />.</summary>
      <param name="serviceType">Type of object requested.</param>
      <returns>The requested service instance.</returns>
      <exception cref="T:SimpleInjector.ActivationException">Thrown when there are errors resolving the service instance.</exception>
    </member>
    <member name="M:SimpleInjector.Container.GetAllInstances``1">
      <summary>
            Gets all instances of the given <typeparamref name="TService" /> currently registered in the container.
            </summary>
      <typeparam name="TService">Type of object requested.</typeparam>
      <returns>A sequence of instances of the requested TService.</returns>
      <exception cref="T:SimpleInjector.ActivationException">Thrown when there are errors resolving the service instance.</exception>
    </member>
    <member name="M:SimpleInjector.Container.GetAllInstances(System.Type)">
      <summary>
            Gets all instances of the given <paramref name="serviceType" /> currently registered in the container.
            </summary>
      <param name="serviceType">Type of object requested.</param>
      <returns>A sequence of instances of the requested serviceType.</returns>
      <exception cref="T:SimpleInjector.ActivationException">Thrown when there are errors resolving the service instance.</exception>
    </member>
    <member name="M:SimpleInjector.Container.GetRegistration(System.Type)">
      <summary>
            Gets the <see cref="T:SimpleInjector.InstanceProducer" /> for the given <paramref name="serviceType" />. When no
            registration exists, the container will try creating a new producer. A producer can be created
            when the type is a concrete reference type, there is an <see cref="E:SimpleInjector.Container.ResolveUnregisteredType" />
            event registered that acts on that type, or when the service type is an <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            Otherwise <b>null</b> (Nothing in VB) is returned.
            </summary>
      <remarks>
        <para>
            A call to this method locks the container. No new registrations can't be made after a call to this 
            method.
            </para>
        <para>
          <b>Note:</b> This method is <i>not</i> guaranteed to always return the same 
            <see cref="T:SimpleInjector.InstanceProducer" /> instance for a given <see cref="T:System.Type" />. It will however either 
            always return <b>null</b> or always return a producer that is able to return the expected instance.
            </para>
      </remarks>
      <param name="serviceType">The <see cref="T:System.Type" /> that the returned instance producer should produce.</param>
      <returns>An <see cref="T:SimpleInjector.InstanceProducer" /> or <b>null</b> (Nothing in VB).</returns>
    </member>
    <member name="M:SimpleInjector.Container.GetRegistration(System.Type,System.Boolean)">
      <summary>
            Gets the <see cref="T:SimpleInjector.InstanceProducer" /> for the given <paramref name="serviceType" />. When no
            registration exists, the container will try creating a new producer. A producer can be created
            when the type is a concrete reference type, there is an <see cref="E:SimpleInjector.Container.ResolveUnregisteredType" />
            event registered that acts on that type, or when the service type is an <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            Otherwise <b>null</b> (Nothing in VB) is returned, or an exception is throw when
            <paramref name="throwOnFailure" /> is set to <b>true</b>.
            </summary>
      <remarks>
        <para>
            A call to this method locks the container. No new registrations can't be made after a call to this 
            method.
            </para>
        <para>
          <b>Note:</b> This method is <i>not</i> guaranteed to always return the same 
            <see cref="T:SimpleInjector.InstanceProducer" /> instance for a given <see cref="T:System.Type" />. It will however either 
            always return <b>null</b> or always return a producer that is able to return the expected instance.
            </para>
      </remarks>
      <param name="serviceType">The <see cref="T:System.Type" /> that the returned instance producer should produce.</param>
      <param name="throwOnFailure">The indication whether the method should return null or throw
            an exception when the type is not registered.</param>
      <returns>An <see cref="T:SimpleInjector.InstanceProducer" /> or <b>null</b> (Nothing in VB).</returns>
    </member>
    <member name="M:SimpleInjector.Container.InjectProperties(System.Object)">
      <summary>
            Injects all public writable properties of the given <paramref name="instance" /> that have a type
            that can be resolved by this container instance.
            <b>NOTE:</b> This method will be removed in a future release. To use property injection,
            implement a custom the <see cref="T:SimpleInjector.Advanced.IPropertySelectionBehavior" /> instead. For more information,
            read the 
            <a href="https://simpleinjector.codeplex.com/wikipage?title=Extendibility-Points#Property-Injection">extendibility points</a> 
            wiki.
            </summary>
      <param name="instance">The instance whos properties will be injected.</param>
      <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="instance" /> is null (Nothing in VB).</exception>
      <exception cref="T:SimpleInjector.ActivationException">Throw when injecting properties on the given instance
            failed due to security constraints of the sandbox. This can happen when injecting properties
            on an internal type in a Silverlight sandbox, or when running in partial trust.</exception>
    </member>
    <member name="M:SimpleInjector.Container.#ctor">
      <summary>Initializes a new instance of the <see cref="T:SimpleInjector.Container" /> class.</summary>
    </member>
    <member name="M:SimpleInjector.Container.#ctor(SimpleInjector.ContainerOptions)">
      <summary>Initializes a new instance of the <see cref="T:SimpleInjector.Container" /> class.</summary>
      <param name="options">The container options.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="options" /> is a null
            reference.</exception>
      <exception cref="T:System.ArgumentException">Thrown when supplied <paramref name="options" /> is an instance
            that already is supplied to another <see cref="T:SimpleInjector.Container" /> instance. Every container must get
            its own <see cref="T:SimpleInjector.ContainerOptions" /> instance.</exception>
    </member>
    <member name="M:SimpleInjector.Container.GetCurrentRegistrations">
      <summary>
            Returns an array with the current registrations. This list contains all explicitly registered
            types, and all implicitly registered instances. Implicit registrations are  all concrete 
            unregistered types that have been requested, all types that have been resolved using
            unregistered type resolution (using the <see cref="E:SimpleInjector.Container.ResolveUnregisteredType" /> event), and
            requested unregistered collections. Note that the result of this method may change over time, 
            because of these implicit registrations.
            </summary>
      <remarks>
        <para>
            This method has a performance characteristic of O(n). Prevent from calling this in a performance
            critical path of the application.
            </para>
        <para>
          <b>Note:</b> This method is <i>not</i> guaranteed to always return the same 
            <see cref="T:SimpleInjector.InstanceProducer" /> instance for a given registration. It will however either 
            always return a producer that is able to return the expected instance. Because of this, do not 
            compare sets of instances returned by different calls to <see cref="M:SimpleInjector.Container.GetCurrentRegistrations" /> 
            by reference. The way of comparing lists is by the actual type. The type of each instance is 
            guaranteed to be unique in the returned list.
            </para>
      </remarks>
      <returns>An array of <see cref="T:SimpleInjector.InstanceProducer" /> instances.</returns>
    </member>
    <member name="M:SimpleInjector.Container.Equals(System.Object)">
      <summary>Determines whether the specified System.Object is equal to the current System.Object.
            </summary>
      <param name="obj">The System.Object to compare with the current System.Object.</param>
      <returns>
            True if the specified System.Object is equal to the current System.Object; otherwise, false.
            </returns>
    </member>
    <member name="M:SimpleInjector.Container.GetHashCode">
      <summary>Returns the hash code of the current instance.</summary>
      <returns>The hash code of the current instance.</returns>
    </member>
    <member name="M:SimpleInjector.Container.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the <see cref="T:SimpleInjector.Container" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the <see cref="T:SimpleInjector.Container" />.
            </returns>
    </member>
    <member name="M:SimpleInjector.Container.GetType">
      <summary>Gets the <see cref="T:System.Type" /> of the current instance.</summary>
      <returns>The <see cref="T:System.Type" /> instance that represents the exact runtime 
            type of the current instance.</returns>
    </member>
    <member name="M:SimpleInjector.Container.LockContainer">
      <summary>Prevents any new registrations to be made to the container.</summary>
    </member>
    <member name="P:SimpleInjector.Container.Options">
      <summary>Gets the container options.</summary>
      <value>The <see cref="T:SimpleInjector.ContainerOptions" /> instance for this container.</value>
    </member>
    <member name="E:SimpleInjector.Container.ResolveUnregisteredType">
      <summary>
             Occurs when an instance of a type is requested that has not been registered explicitly, allowing 
             resolution of unregistered types before the container tries to create the type.
             </summary>
      <remarks>
        <para>
             The <see cref="E:SimpleInjector.Container.ResolveUnregisteredType" /> event is called by the container every time an 
             unregistered type is requested for the first time, allowing a developer to do unregistered type 
             resolution. By calling the 
             <see cref="M:SimpleInjector.UnregisteredTypeEventArgs.Register(SimpleInjector.Registration)">Register</see> method on the
             <see cref="T:SimpleInjector.UnregisteredTypeEventArgs" />, a <see cref="T:SimpleInjector.Registration" />, <see cref="T:System.Linq.Expressions.Expression" /> or
             <see cref="T:System.Func`1" /> delegate can be registered allowing the container to retrieve 
             instances of the requested type. This registration is cached and it prevents the 
             <b>ResolveUnregisteredType</b> event from being called again for the same type.
             </para>
        <para>
             When no registered event handled the registration of an unregistered type, the container will try
             to create the type when this type is either concrete or is the <see cref="T:System.Collections.Generic.IEnumerable`1" />
             interface. Concrete types will be registered with the <see cref="F:SimpleInjector.Lifestyle.Transient">Transient</see>
             lifestyle and <see cref="T:System.Collections.Generic.IEnumerable`1" /> registrations will return an empty collection. When no 
             even handled the registration and the container could not create it, an exception is thrown.
             </para>
        <para>
          <b>Thread-safety:</b> Please note that the container will not ensure that the hooked delegates
             are executed only once. While the calls to <see cref="E:SimpleInjector.Container.ResolveUnregisteredType" /> for a given type
             are finite (and will in most cases happen just once), a container can call the delegate multiple 
             times and make parallel calls to the delegate. You must make sure that the code can be called 
             multiple times and is thread-safe.
             </para>
      </remarks>
      <example>
             The following example shows the usage of the <see cref="E:SimpleInjector.Container.ResolveUnregisteredType" /> event:
             <code lang="cs"><![CDATA[
             public interface IValidator<T>
             {
                 void Validate(T instance);
             }
            
             // Implementation of the null object pattern.
             public class EmptyValidator<T> : IValidator<T>
             {
                 public void Validate(T instance)
                 {
                     // Does nothing.
                 }
             }
             
             [TestMethod]
             public void TestResolveUnregisteredType()
             {
                 // Arrange
                 var container = new Container();
             
                 // Register an EmptyValidator<T> to be returned when a IValidator<T> is requested:
                 container.ResolveUnregisteredType += (sender, e) =>
                 {
                     if (e.UnregisteredServiceType.IsGenericType &&
                         e.UnregisteredServiceType.GetGenericTypeDefinition() == typeof(IValidator<>))
                     {
                         var validatorType = typeof(EmptyValidator<>).MakeGenericType(
                             e.UnregisteredServiceType.GetGenericArguments());
                 
                         object emptyValidator = container.GetInstance(validatorType);
                 
                         // Register the instance as singleton.
                         e.Register(() => emptyValidator);
                     }
                 };
                 
                 // Act
                 var orderValidator = container.GetInstance<IValidator<Order>>();
                 var customerValidator = container.GetInstance<IValidator<Customer>>();
             
                 // Assert
                 Assert.IsInstanceOfType(orderValidator, typeof(EmptyValidator<Order>));
                 Assert.IsInstanceOfType(customerValidator, typeof(EmptyValidator<Customer>));
             }
             ]]></code><para>
             The example above registers a delegate that is raised every time an unregistered type is requested
             from the container. The delegate checks whether the requested type is a closed generic
             implementation of the <b>IValidator&lt;T&gt;</b> interface (such as 
             <b>IValidator&lt;Order&gt;</b> or <b>IValidator&lt;Customer&gt;</b>). In that case it
             will request the container for a concrete <b>EmptyValidator&lt;T&gt;</b> implementation that
             implements the given 
             <see cref="P:SimpleInjector.UnregisteredTypeEventArgs.UnregisteredServiceType">UnregisteredServiceType</see>, and
             registers a delegate that will return this created instance. The <b>e.Register</b> call
             registers the method in the container, preventing the <see cref="E:SimpleInjector.Container.ResolveUnregisteredType" /> from
             being called again for the exact same service type, preventing any performance penalties.
             </para><para>
             Please note that given example is just an uhhmm... example. In the case of the example the
             <b>EmptyValidator&lt;T&gt;</b> can be better registered using of the built-in 
             <see cref="M:SimpleInjector.Extensions.OpenGenericRegistrationExtensions.RegisterOpenGeneric(SimpleInjector.Container,System.Type,System.Type,SimpleInjector.Lifestyle)">RegisterOpenGeneric</see> 
             extension methods instead. These extension methods take care of any given generic type constraint
             and allow the implementation to be integrated into the container's pipeline, which allows
             it to be intercepted using the <see cref="E:SimpleInjector.Container.ExpressionBuilding" /> event and allow any registered
             <see cref="M:SimpleInjector.Container.RegisterInitializer``1(System.Action{``0})">initializers</see> to be applied.
             </para></example>
    </member>
    <member name="E:SimpleInjector.Container.ExpressionBuilt">
      <summary>
             Occurs after the creation of the <see cref="T:System.Linq.Expressions.Expression" /> of a registered type is complete (the 
             lifestyle has been applied), allowing the created <see cref="T:System.Linq.Expressions.Expression" /> to be wrapped, 
             changed, or replaced. Multiple delegates may handle the same service type.
             </summary>
      <remarks>
        <para>
             The <b>ExpressionBuilt</b> event is called by the container every time an registered type is 
             getting compiled, allowing a developer to change the way the type is created. The delegate that
             hooks to the <b>ExpressionBuilt</b> event, can change the 
             <see cref="P:SimpleInjector.ExpressionBuiltEventArgs.Expression" /> property on the 
             <see cref="T:SimpleInjector.ExpressionBuiltEventArgs" />, which allows changing the way the type is constructed.
             </para>
        <para>
          <b>Thread-safety:</b> Please note that the container will not ensure that the hooked delegates
             are executed only once per service type. While the calls to <see cref="E:SimpleInjector.Container.ExpressionBuilt" /> for a 
             given type are finite (and will in most cases happen just once), a container can call the delegate 
             multiple times and make parallel calls to the delegate. You must make sure that the code can be 
             called multiple times and is thread-safe.
             </para>
      </remarks>
      <example>
             The following example shows the usage of the <b>ExpressionBuilt</b> event:
             <code lang="cs"><![CDATA[
             public interface IValidator<T>
             {
                 void Validate(T instance);
             }
            
             public interface ILogger
             {
                 void Write(string message);
             }
            
             // Implementation of the decorator pattern.
             public class MonitoringValidator<T> : IValidator<T>
             {
                 private readonly IValidator<T> validator;
                 private readonly ILogger logger;
            
                 public MonitoringValidator(IValidator<T> validator, ILogger logger)
                 {
                     this.validator = validator;
                     this.logger = logger;
                 }
            
                 public void Validate(T instance)
                 {
                     this.logger.Write("Validating " + typeof(T).Name);
                     this.validator.Validate(instance);
                     this.logger.Write("Validated " + typeof(T).Name);
                 }
             }
            
             [TestMethod]
             public void TestExpressionBuilt()
             {
                 // Arrange
                 var container = new Container();
            
                 container.RegisterSingle<ILogger, ConsoleLogger>();
                 container.Register<IValidator<Order>, OrderValidator>();
                 container.Register<IValidator<Customer>, CustomerValidator>();
            
                 // Intercept the creation of IValidator<T> instances and wrap them in a MonitoringValidator<T>:
                 container.ExpressionBuilt += (sender, e) =>
                 {
                     if (e.RegisteredServiceType.IsGenericType &&
                         e.RegisteredServiceType.GetGenericTypeDefinition() == typeof(IValidator<>))
                     {
                         var decoratorType = typeof(MonitoringValidator<>)
                             .MakeGenericType(e.RegisteredServiceType.GetGenericArguments());
            
                         // Wrap the IValidator<T> in a MonitoringValidator<T>.
                         e.Expression = Expression.New(decoratorType.GetConstructors()[0], new Expression[]
                         {
                             e.Expression,
                             container.GetRegistration(typeof(ILogger)).BuildExpression(),
                         });
                     }
                 };
            
                 // Act
                 var orderValidator = container.GetInstance<IValidator<Order>>();
                 var customerValidator = container.GetInstance<IValidator<Customer>>();
            
                 // Assert
                 Assert.IsInstanceOfType(orderValidator, typeof(MonitoringValidator<Order>));
                 Assert.IsInstanceOfType(customerValidator, typeof(MonitoringValidator<Customer>));
             }
             ]]></code><para>
             The example above registers a delegate that is raised every time the container compiles the
             expression for an registered type. The delegate checks whether the requested type is a closed generic
             implementation of the <b>IValidator&lt;T&gt;</b> interface (such as 
             <b>IValidator&lt;Order&gt;</b> or <b>IValidator&lt;Customer&gt;</b>). In that case it
             will changes the current <see cref="P:SimpleInjector.ExpressionBuiltEventArgs.Expression" /> with a new one that creates
             a new <b>MonitoringValidator&lt;T&gt;</b> that takes the current validator (and an <b>ILogger</b>)
             as an dependency.
             </para><para>
             Please note that given example is just an uhhmm... example. In the case of the example the
             <b>MonitoringValidator&lt;T&gt;</b> is a decorator and instead of manually writing this code that
             many limitations, you can use one of the built-in 
             <see cref="M:SimpleInjector.Extensions.DecoratorExtensions.RegisterDecorator(SimpleInjector.Container,System.Type,System.Type,SimpleInjector.Lifestyle)">RegisterDecorator</see> extension methods instead.
             These extension methods take care of any given generic type constraint, allow to register decorators
             conditionally and allow the decorator to be integrated into the container's pipeline, which allows
             it to be intercepted using the <see cref="E:SimpleInjector.Container.ExpressionBuilding" /> event and allow any registered
             <see cref="M:SimpleInjector.Container.RegisterInitializer``1(System.Action{``0})">initializers</see> to be applied.
             </para></example>
    </member>
    <member name="E:SimpleInjector.Container.ExpressionBuilding">
      <summary>
            Occurs directly after the creation of the <see cref="T:System.Linq.Expressions.Expression" /> of a registered type is made,
            but before any <see cref="M:SimpleInjector.Container.RegisterInitializer(System.Action{SimpleInjector.Advanced.InstanceInitializationData},System.Predicate{SimpleInjector.Advanced.InitializationContext})">initializer</see> and lifestyle specific caching
            has been applied, allowing the created <see cref="T:System.Linq.Expressions.Expression" /> to be altered. Multiple delegates 
            may handle the same service type.
            </summary>
      <remarks>
        <para>
            The <b>ExpressionBuilding</b> event is called by the container every time an registered type is 
            getting compiled, allowing a developer to change the way the type is created. The delegate that
            hooks to the <b>ExpressionBuilding</b> event, can change the 
            <see cref="P:SimpleInjector.ExpressionBuildingEventArgs.Expression" /> property on the 
            <see cref="T:SimpleInjector.ExpressionBuildingEventArgs" />, which allows changing the way the type is constructed.
            </para>
        <para>
            The exact <see cref="T:System.Linq.Expressions.Expression" /> type supplied depends on the type of registration. 
            Registrations that explicitly supply the implementation type (such as 
            <see cref="M:SimpleInjector.Container.Register``2">Register&lt;TService, TImplementation&gt;()</see>)
            will result in an <see cref="T:System.Linq.Expressions.NewExpression" />, while registrations that take a delegate (such as
            <see cref="M:SimpleInjector.Container.Register``1(System.Func{``0})">Register&lt;TService&gt;(Func&lt;TService&gt;)</see>)
            will result in an <see cref="T:System.Linq.Expressions.InvocationExpression" />. Singletons that are passed in using their
            value (<see cref="M:SimpleInjector.Container.RegisterSingle``1(``0)">RegisterSingle&lt;TService&gt;(TService)</see>)
            will result in an <see cref="T:System.Linq.Expressions.ConstantExpression" />. Note that other <b>ExpressionBuilding</b> 
            registrations might have changed the <see cref="P:SimpleInjector.ExpressionBuildingEventArgs.Expression" /> 
            property and might have supplied an <see cref="T:System.Linq.Expressions.Expression" /> of a different type. The order in
            which these events are registered might be of importantance to you.
            </para>
        <para>
          <b>Thread-safety:</b> Please note that the container will not ensure that the hooked delegates
            are executed only once per service type. While the calls to registered <b>ExpressionBuilding</b>
            events for a  given type are finite (and will in most cases happen just once), a container can 
            call the delegate multiple times and make parallel calls to the delegate. You must make sure that 
            the code can be called multiple times and is thread-safe.
            </para>
      </remarks>
      <example>
            The following example shows the usage of the <b>ExpressionBuilding</b> event:
            <code lang="cs"><![CDATA[
            public class MyInjectPropertyAttribute : Attribute { }
            
            public static void Bootstrap()
            {
                var container = new Container();
                
                container.ExpressionBuilding += (sender, e) =>
                {
                    var expression = e.Expression as NewExpression;
                
                    if (expression != null)
                    {
                        var propertiesToInject =
                            from property in expression.Constructor.DeclaringType.GetProperties()
                            where property.GetCustomAttributes(typeof(MyInjectPropertyAttribute), true).Any()
                            let registration = container.GetRegistration(property.PropertyType, true)
                            select Tuple.Create(property, registration);
                
                        if (propertiesToInject.Any())
                        {
                            Func<object, Tuple<PropertyInfo, InstanceProducer>[], object> injectorDelegate =
                                (instance, dependencies) =>
                                {
                                    foreach (var dependency in dependencies)
                                    {
                                        dependency.Item1.SetValue(instance, dependency.Item2.GetInstance(), null);
                                    }
                
                                    return instance;
                                };
                
                            e.Expression = Expression.Convert(
                                Expression.Invoke(
                                    Expression.Constant(injectorDelegate),
                                    e.Expression,
                                    Expression.Constant(propertiesToInject.ToArray())),
                                expression.Constructor.DeclaringType);
                        }
                    }
                };
            }
            ]]></code><para>
            The example above registers a delegate that is raised every time the container compiles the
            expression for an registered type. The delegate checks if the type contains properties that are
            decorated with the supplied <b>MyInjectPropertyAttribute</b>. If decorated properties are found,
            the given expression is replaced with an expression that injects decorated properties.
            </para><para>
            The example differs from the container's built-in <see cref="M:SimpleInjector.Container.InjectProperties(System.Object)" /> method in that
            it will fail when one of the decorated properties can not be injected. The built-in
            <see cref="M:SimpleInjector.Container.InjectProperties(System.Object)" /> will look at all properties of a given class and will simply skip
            over any properties that can not be injected, making the use of the <see cref="M:SimpleInjector.Container.InjectProperties(System.Object)" />
            method often verify fragile and error prone.
            </para></example>
    </member>
    <member name="T:SimpleInjector.Scope">
      <summary>Implements a cache for <see cref="T:SimpleInjector.ScopedLifestyle" /> implementations.</summary>
      <remarks>
        <see cref="T:SimpleInjector.Scope" /> is thread-safe can be used over multiple threads concurrently.
            </remarks>
    </member>
    <member name="M:SimpleInjector.Scope.WhenScopeEnds(System.Action)">
      <summary>
            Allows registering an <paramref name="action" /> delegate that will be called when the scope ends,
            but before the scope disposes any instances.
            </summary>
      <remarks>
            During the call to <see cref="M:SimpleInjector.Scope.Dispose" /> all registered <see cref="T:System.Action" /> delegates are
            processed in the order of registration. Do note that registered actions <b>are not guaranteed
            to run</b>. In case an exception is thrown during the call to <see cref="M:SimpleInjector.Scope.Dispose" />, the 
            <see cref="T:SimpleInjector.Scope" /> will stop running any actions that might not have been invoked at that point. 
            Instances that are registered for disposal using <see cref="M:SimpleInjector.Scope.RegisterForDisposal(System.IDisposable)" /> on the other
            hand, are guaranteed to be disposed. Note that registered actions won't be invoked during a call
            to <see cref="M:SimpleInjector.Container.Verify" />.
            </remarks>
      <param name="action">The delegate to run when the scope ends.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when one of the arguments is a null reference
            (Nothing in VB).</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown when the scope has been disposed.</exception>
    </member>
    <member name="M:SimpleInjector.Scope.RegisterForDisposal(System.IDisposable)">
      <summary>
            Adds the <paramref name="disposable" /> to the list of items that will get disposed when the
            scope ends.
            </summary>
      <remarks>
            Instances that are registered for disposal, will be disposed in opposite order of registration and
            they are guaranteed to be disposed when <see cref="M:SimpleInjector.Scope.Dispose" /> is called (even when 
            exceptions are thrown). This mimics the behavior of the C# and VB <code>using</code> statements,
            where the <see cref="M:System.IDisposable.Dispose" /> method is called inside the <code>finally</code> block.
            </remarks>
      <param name="disposable">The instance that should be disposed when the scope ends.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when one of the arguments is a null reference
            (Nothing in VB).</exception>
      <exception cref="T:System.ObjectDisposedException">Thrown when the scope has been disposed.</exception>
    </member>
    <member name="M:SimpleInjector.Scope.Dispose">
      <summary>Releases all instances that are cached by the <see cref="T:SimpleInjector.Scope" /> object.</summary>
    </member>
    <member name="M:SimpleInjector.Scope.Dispose(System.Boolean)">
      <summary>
            Releases all instances that are cached by the <see cref="T:SimpleInjector.Scope" /> object.
            </summary>
      <param name="disposing">False when only unmanaged resources should be released.</param>
    </member>
    <member name="T:SimpleInjector.ContainerOptions">
      <summary>Configuration options for the <see cref="P:SimpleInjector.ContainerOptions.Container" />.</summary>
      <example>
            The following example shows the typical usage of the <b>ContainerOptions</b> class.
            <code lang="cs"><![CDATA[
            var container = new Container();
            
            container.Register<ITimeProvider, DefaultTimeProvider>();
            
            // Use of ContainerOptions clas here.
            container.Options.AllowOverridingRegistrations = true;
            
            // Replaces the previous registration of ITimeProvider
            container.Register<ITimeProvider, CustomTimeProvider>();
            ]]></code></example>
    </member>
    <member name="M:SimpleInjector.ContainerOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:SimpleInjector.ContainerOptions" /> class.</summary>
    </member>
    <member name="P:SimpleInjector.ContainerOptions.AllowOverridingRegistrations">
      <summary>
            Gets or sets a value indicating whether the container allows overriding registrations. The default
            is false.
            </summary>
      <value>The value indicating whether the container allows overriding registrations.</value>
    </member>
    <member name="P:SimpleInjector.ContainerOptions.ConstructorResolutionBehavior">
      <summary>Gets or sets the constructor resolution behavior.</summary>
      <value>The constructor resolution behavior.</value>
      <exception cref="T:System.NullReferenceException">Thrown when the supplied value is a null reference.</exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the container already contains registrations.
            </exception>
    </member>
    <member name="P:SimpleInjector.ContainerOptions.ConstructorVerificationBehavior">
      <summary>Gets or sets the constructor resolution behavior.</summary>
      <value>The constructor resolution behavior.</value>
      <exception cref="T:System.NullReferenceException">Thrown when the supplied value is a null reference.</exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the container already contains registrations.
            </exception>
    </member>
    <member name="P:SimpleInjector.ContainerOptions.ConstructorInjectionBehavior">
      <summary>Gets or sets the constructor injection behavior.</summary>
      <value>The constructor injection behavior.</value>
      <exception cref="T:System.NullReferenceException">Thrown when the supplied value is a null reference.</exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the container already contains registrations.
            </exception>
    </member>
    <member name="P:SimpleInjector.ContainerOptions.PropertySelectionBehavior">
      <summary>Gets or sets the property selection behavior.</summary>
      <value>The property selection behavior.</value>
      <exception cref="T:System.NullReferenceException">Thrown when the supplied value is a null reference.</exception>
      <exception cref="T:System.InvalidOperationException">
            Thrown when the container already contains registrations.
            </exception>
    </member>
    <member name="P:SimpleInjector.ContainerOptions.Container">
      <summary>
            Gets the container to which this <b>ContainerOptions</b> instance belongs to or <b>null</b> when
            this instance hasn't been applied to a <see cref="P:SimpleInjector.ContainerOptions.Container" /> yet.
            </summary>
      <value>The current <see cref="P:SimpleInjector.ContainerOptions.Container" />.</value>
    </member>
    <member name="P:SimpleInjector.ContainerOptions.EnableDynamicAssemblyCompilation">
      <summary>
            Gets or sets a value indicating whether the container will use dynamic assemblies for compilation. 
            By default, this value is <b>true</b> for the first few containers that are created in an app 
            domain and <b>false</b> for all other containers. You can set this value explicitly to <b>false</b>
            to prevent the use of dynamic assemblies or you can set this value explicitly to <b>true</b> to
            force more container instances to use dynamic assemblies. Note that creating an infinite number
            of <see cref="P:SimpleInjector.ContainerOptions.Container" /> instances (for instance one per web request) with this property set to
            <b>true</b> will result in a memory leak; dynamic assemblies take up memory and will only be
            unloaded when the app domain is unloaded.
            </summary>
      <value>A boolean indicating whether the container should use a dynamic assembly for compilation.
            </value>
    </member>
    <member name="T:SimpleInjector.CyclicDependencyValidator">
      <summary>
            Allows verifying whether a given type has a direct or indirect dependency on itself. Verifying is done
            by preventing recursive calls to a IInstanceProvider. An instance of this type is related to a single 
            instance of a IInstanceProvider. A RecursiveDependencyValidator instance checks a single 
            IInstanceProvider and therefore a single service type.
            </summary>
    </member>
    <member name="T:SimpleInjector.CyclicDependencyValidatorExtensions">
      <summary>
            Extension methods for the RecursiveDependencyValidator class.
            </summary>
    </member>
    <member name="T:SimpleInjector.ExpressionBuildingEventArgs">
      <summary>
            Provides data for and interaction with the 
            <see cref="E:SimpleInjector.Container.ExpressionBuilding">ExpressionBuilding</see> event of 
            the <see cref="T:SimpleInjector.Container" />. An observer can change the 
            <see cref="P:SimpleInjector.ExpressionBuildingEventArgs.Expression" /> property to change the component that is 
            currently being built.
            </summary>
    </member>
    <member name="P:SimpleInjector.ExpressionBuildingEventArgs.RegisteredServiceType">
      <summary>Gets the registered service type that is currently requested.</summary>
      <value>The registered service type that is currently requested.</value>
    </member>
    <member name="P:SimpleInjector.ExpressionBuildingEventArgs.KnownImplementationType">
      <summary>
            Gets the type that is known to be returned by the 
            <see cref="P:SimpleInjector.ExpressionBuildingEventArgs.Expression">Expression</see> (most often the implementation
            type used in the <b>Register</b> call). This type will be a derivative of
            <see cref="P:SimpleInjector.ExpressionBuildingEventArgs.RegisteredServiceType">RegisteredServiceType</see> (or
            or <b>RegisteredServiceType</b> itself). If the <b>Expression</b> is changed, the new expression 
            must also return an instance of type <b>KnownImplementationType</b> or a sub type. 
            This information must be described in the new Expression.
            </summary>
      <value>A <see cref="T:System.Type" />.</value>
    </member>
    <member name="P:SimpleInjector.ExpressionBuildingEventArgs.Lifestyle">
      <summary>
            Gets the lifestyle for the component that is currently being built.
            </summary>
      <value>The <see cref="P:SimpleInjector.ExpressionBuildingEventArgs.Lifestyle" />.</value>
    </member>
    <member name="P:SimpleInjector.ExpressionBuildingEventArgs.Expression">
      <summary>Gets or sets the currently registered <see cref="P:SimpleInjector.ExpressionBuildingEventArgs.Expression" />.</summary>
      <value>The current registration.</value>
      <exception cref="T:System.ArgumentNullException">Thrown when the supplied value is a null reference.</exception>
    </member>
    <member name="P:SimpleInjector.ExpressionBuildingEventArgs.KnownRelationships">
      <summary>
            Gets the collection of currently known relationships. This information is used by the Diagnostics 
            Debug View. Change the contents of this collection to represent the changes made to the
            <see cref="P:SimpleInjector.ExpressionBuildingEventArgs.Expression">Expression</see> property (if any). This allows
            the Diagnostics Debug View to analyse those new relationships as well.
            </summary>
      <value>The collection of <see cref="T:SimpleInjector.Advanced.KnownRelationship" /> instances.</value>
    </member>
    <member name="T:SimpleInjector.ExpressionBuiltEventArgs">
      <summary>
            Provides data for and interaction with the 
            <see cref="E:SimpleInjector.Container.ExpressionBuilt">ExpressionBuilt</see> event of 
            the <see cref="T:SimpleInjector.Container" />. An observer can change the 
            <see cref="P:SimpleInjector.ExpressionBuiltEventArgs.Expression" /> property to change the component that is currently 
            being built. 
            </summary>
    </member>
    <member name="M:SimpleInjector.ExpressionBuiltEventArgs.#ctor(System.Type,System.Linq.Expressions.Expression)">
      <summary>Initializes a new instance of the <see cref="T:SimpleInjector.ExpressionBuiltEventArgs" /> class.</summary>
      <param name="registeredServiceType">Type of the registered service.</param>
      <param name="expression">The registered expression.</param>
    </member>
    <member name="P:SimpleInjector.ExpressionBuiltEventArgs.RegisteredServiceType">
      <summary>Gets the registered service type that is currently requested.</summary>
      <value>The registered service type that is currently requested.</value>
    </member>
    <member name="P:SimpleInjector.ExpressionBuiltEventArgs.Expression">
      <summary>Gets or sets the currently registered <see cref="P:SimpleInjector.ExpressionBuiltEventArgs.Expression" />.</summary>
      <value>The current registration.</value>
      <exception cref="T:System.ArgumentNullException">Thrown when the supplied value is a null reference.</exception>
    </member>
    <member name="P:SimpleInjector.ExpressionBuiltEventArgs.Lifestyle">
      <summary>Gets or sets the current lifestyle of the registration.</summary>
      <value>The original lifestyle of the registration.</value>
    </member>
    <member name="P:SimpleInjector.ExpressionBuiltEventArgs.KnownRelationships">
      <summary>
            Gets the collection of currently known relationships. This information is used by the Diagnostics 
            Debug View. Change the contents of this collection to represent the changes made to the
            <see cref="P:SimpleInjector.ExpressionBuiltEventArgs.Expression">Expression</see> property (if any). This allows
            the Diagnostics Debug View to analyse those new relationships as well.
            </summary>
      <value>The collection of <see cref="T:SimpleInjector.Advanced.KnownRelationship" /> instances.</value>
    </member>
    <member name="T:SimpleInjector.Extensions.ArgumentMapping">
      <summary>
            A map containing a generic argument (such as T) and the concrete type (such as Int32) that it
            represents.
            </summary>
    </member>
    <member name="M:SimpleInjector.Extensions.ArgumentMapping.GetHashCode">
      <summary>Overrides the default hash code. Needed for doing LINQ distinct operations.</summary>
      <returns>An 32 bit integer.</returns>
    </member>
    <member name="T:SimpleInjector.Extensions.DecoratorExtensions">
      <summary>
            Extension methods for applying decorators.
            </summary>
    </member>
    <member name="M:SimpleInjector.Extensions.DecoratorExtensions.RegisterDecorator(SimpleInjector.Container,System.Type,System.Type,SimpleInjector.Lifestyle)">
      <summary>
            Ensures that the supplied <paramref name="decoratorType" /> decorator is returned and cached with
            the given <paramref name="lifestyle" />, wrapping the original registered 
            <paramref name="serviceType" />, by injecting that service type into the constructor of the 
            supplied <paramref name="decoratorType" />. Multiple decorators may be applied to the same 
            <paramref name="serviceType" />. Decorators can be applied to both open, closed, and non-generic 
            service types.
            </summary>
      <remarks>
        <para>
            The <b>RegisterOpenGenericDecorator</b> method works by hooking onto the container's
            <see cref="E:SimpleInjector.Container.ExpressionBuilt">ExpressionBuilt</see> event. This event fires after the
            <see cref="E:SimpleInjector.Container.ResolveUnregisteredType">ResolveUnregisteredType</see> event, which allows
            decoration of types that are resolved using unregistered type resolution. The
            <see cref="M:SimpleInjector.Extensions.OpenGenericRegistrationExtensions.RegisterOpenGeneric(SimpleInjector.Container,System.Type,System.Type,SimpleInjector.Lifestyle)">RegisterOpenGeneric</see>
            extension method, for instance, hooks onto the <b>ResolveUnregisteredType</b>. This allows you to
            use <b>RegisterOpenGenericDecorator</b> on the same service type as <b>RegisterOpenGeneric</b>.
            </para>
        <para>
            Multiple decorators can be applied to the same service type. The order in which they are registered
            is the order they get applied in. This means that the decorator that gets registered first, gets
            applied first, which means that the next registered decorator, will wrap the first decorator, which
            wraps the original service type.
            </para>
        <para>
            Constructor injection will be used on that type, and although it may have many constructor 
            arguments, it must have exactly one argument of the type of <paramref name="serviceType" />, or an 
            argument of type <see cref="T:System.Func`1" /> where <b>TResult</b> is <paramref name="serviceType" />.
            An exception will be thrown when this is not the case.
            </para>
        <para>
            The registered <paramref name="decoratorType" /> may have a constructor with an argument of type
            <see cref="T:System.Func`1" /> where <b>T</b> is <paramref name="serviceType" />. In this case, the
            will not inject the decorated <paramref name="serviceType" /> itself into the 
            <paramref name="decoratorType" /> instance, but it will inject a <see cref="T:System.Func`1" /> that allows
            creating instances of the decorated type, according to the lifestyle of that type. This enables
            more advanced scenarios, such as executing the decorated types on a different thread, or executing
            decorated instance within a certain scope (such as a lifetime scope).
            </para>
      </remarks>
      <example>
            Please see the <see cref="M:SimpleInjector.Extensions.DecoratorExtensions.RegisterDecorator(SimpleInjector.Container,System.Type,System.Type)">RegisterDecorator</see> method
            for more information.
            </example>
      <param name="container">The container to make the registrations in.</param>
      <param name="serviceType">The definition of the open generic service type that will
            be wrapped by the given <paramref name="decoratorType" />.</param>
      <param name="decoratorType">The definition of the open generic decorator type that will
            be used to wrap the original service type.</param>
      <param name="lifestyle">The lifestyle that specifies how the returned decorator will be cached.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when one of the arguments is a null reference.</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="serviceType" /> is not
            an open generic type, when <paramref name="decoratorType" /> does not inherit from or 
            implement <paramref name="serviceType" />, when <paramref name="decoratorType" />
            does not have a single public constructor, or when <paramref name="decoratorType" /> does 
            not contain a constructor that has exactly one argument of type 
            <paramref name="serviceType" /> or <see cref="T:System.Func`1" /> where <b>T</b> is
            <paramref name="serviceType" />.</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.DecoratorExtensions.RegisterDecorator(SimpleInjector.Container,System.Type,System.Type,SimpleInjector.Lifestyle,System.Predicate{SimpleInjector.Extensions.DecoratorPredicateContext})">
      <summary>
            Ensures that the supplied <paramref name="decoratorType" /> decorator is returned when the supplied
            <paramref name="predicate" /> returns <b>true</b> and cached with the given 
            <paramref name="lifestyle" />, wrapping the original registered <paramref name="serviceType" />, by 
            injecting that service type into the constructor of the supplied <paramref name="decoratorType" />. 
            Multiple decorators may be applied to the same <paramref name="serviceType" />. Decorators can be 
            applied to both open, closed, and non-generic service types.
            </summary>
      <remarks>
        <para>
            The <b>RegisterOpenGenericDecorator</b> method works by hooking onto the container's
            <see cref="E:SimpleInjector.Container.ExpressionBuilt">ExpressionBuilt</see> event. This event fires after the
            <see cref="E:SimpleInjector.Container.ResolveUnregisteredType">ResolveUnregisteredType</see> event, which allows
            decoration of types that are resolved using unregistered type resolution. The
            <see cref="M:SimpleInjector.Extensions.OpenGenericRegistrationExtensions.RegisterOpenGeneric(SimpleInjector.Container,System.Type,System.Type,SimpleInjector.Lifestyle)">RegisterOpenGeneric</see>
            extension method, for instance, hooks onto the <b>ResolveUnregisteredType</b>. This allows you to
            use <b>RegisterOpenGenericDecorator</b> on the same service type as <b>RegisterOpenGeneric</b>.
            </para>
        <para>
            Multiple decorators can be applied to the same service type. The order in which they are registered
            is the order they get applied in. This means that the decorator that gets registered first, gets
            applied first, which means that the next registered decorator, will wrap the first decorator, which
            wraps the original service type.
            </para>
        <para>
            Constructor injection will be used on that type, and although it may have many constructor 
            arguments, it must have exactly one argument of the type of <paramref name="serviceType" />, or an 
            argument of type <see cref="T:System.Func`1" /> where <b>TResult</b> is <paramref name="serviceType" />.
            An exception will be thrown when this is not the case.
            </para>
        <para>
            The registered <paramref name="decoratorType" /> may have a constructor with an argument of type
            <see cref="T:System.Func`1" /> where <b>T</b> is <paramref name="serviceType" />. In this case, the
            will not inject the decorated <paramref name="serviceType" /> itself into the 
            <paramref name="decoratorType" /> instance, but it will inject a <see cref="T:System.Func`1" /> that allows
            creating instances of the decorated type, according to the lifestyle of that type. This enables
            more advanced scenarios, such as executing the decorated types on a different thread, or executing
            decorated instance within a certain scope (such as a lifetime scope).
            </para>
      </remarks>
      <example>
            Please see the <see cref="M:SimpleInjector.Extensions.DecoratorExtensions.RegisterDecorator(SimpleInjector.Container,System.Type,System.Type)">RegisterDecorator</see> method
            for more information.
            </example>
      <param name="container">The container to make the registrations in.</param>
      <param name="serviceType">The definition of the open generic service type that will
            be wrapped by the given <paramref name="decoratorType" />.</param>
      <param name="decoratorType">The definition of the open generic decorator type that will
            be used to wrap the original service type.</param>
      <param name="lifestyle">The lifestyle that specifies how the returned decorator will be cached.</param>
      <param name="predicate">The predicate that determines whether the 
            <paramref name="decoratorType" /> must be applied to a service type.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when one of the arguments is a null reference.</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="serviceType" /> is not
            an open generic type, when <paramref name="decoratorType" /> does not inherit from or 
            implement <paramref name="serviceType" />, when <paramref name="decoratorType" />
            does not have a single public constructor, or when <paramref name="decoratorType" /> does 
            not contain a constructor that has exactly one argument of type 
            <paramref name="serviceType" /> or <see cref="T:System.Func`1" /> where <b>T</b> is
            <paramref name="serviceType" />.</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.DecoratorExtensions.RegisterDecorator(SimpleInjector.Container,System.Type,System.Func{SimpleInjector.Extensions.DecoratorPredicateContext,System.Type},SimpleInjector.Lifestyle,System.Predicate{SimpleInjector.Extensions.DecoratorPredicateContext})">
      <summary>
            Ensures that the decorator type that is returned from <paramref name="decoratorTypeFactory" /> is 
            supplied when the supplied <paramref name="predicate" /> returns <b>true</b> and cached with the given 
            <paramref name="lifestyle" />, wrapping the original registered <paramref name="serviceType" />, by 
            injecting that service type into the constructor of the decorator type that is returned by the
            supplied <paramref name="decoratorTypeFactory" />. 
            Multiple decorators may be applied to the same <paramref name="serviceType" />. Decorators can be 
            applied to both open, closed, and non-generic service types.
            </summary>
      <remarks>
        <para>
            The types returned from the <paramref name="decoratorTypeFactory" /> may be open-generic. The
            container will try to fill in the generic parameters based on the resolved service type.
            </para>
        <para>
            The <b>RegisterOpenGenericDecorator</b> method works by hooking onto the container's
            <see cref="E:SimpleInjector.Container.ExpressionBuilt">ExpressionBuilt</see> event. This event fires after the
            <see cref="E:SimpleInjector.Container.ResolveUnregisteredType">ResolveUnregisteredType</see> event, which allows
            decoration of types that are resolved using unregistered type resolution. The
            <see cref="M:SimpleInjector.Extensions.OpenGenericRegistrationExtensions.RegisterOpenGeneric(SimpleInjector.Container,System.Type,System.Type,SimpleInjector.Lifestyle)">RegisterOpenGeneric</see>
            extension method, for instance, hooks onto the <b>ResolveUnregisteredType</b>. This allows you to
            use <b>RegisterOpenGenericDecorator</b> on the same service type as <b>RegisterOpenGeneric</b>.
            </para>
        <para>
            Multiple decorators can be applied to the same service type. The order in which they are registered
            is the order they get applied in. This means that the decorator that gets registered first, gets
            applied first, which means that the next registered decorator, will wrap the first decorator, which
            wraps the original service type.
            </para>
        <para>
            Constructor injection will be used on that type, and although it may have many constructor 
            arguments, it must have exactly one argument of the type of <paramref name="serviceType" />, or an 
            argument of type <see cref="T:System.Func`1" /> where <b>TResult</b> is <paramref name="serviceType" />.
            An exception will be thrown when this is not the case.
            </para>
        <para>
            The type returned from <paramref name="decoratorTypeFactory" /> may have a constructor with an 
            argument of type <see cref="T:System.Func`1" /> where <b>T</b> is <paramref name="serviceType" />. In this 
            case, the framework will not inject the decorated <paramref name="serviceType" /> itself into the 
            decorator instance, but it will inject a <see cref="T:System.Func`1" /> that allows
            creating instances of the decorated type, according to the lifestyle of that type. This enables
            more advanced scenarios, such as executing the decorated types on a different thread, or executing
            decorated instance within a certain scope (such as a lifetime scope).
            </para>
      </remarks>
      <example>
            The following is an example of the registration of a decorator through the factory delegate:
            <code lang="cs"><![CDATA[
            container.Register<ICommandHandler<MoveCustomerCommand>, MoveCustomerCommandHandler>();
            
            container.RegisterDecorator(
                typeof(ICommandHandler<>),
                context => typeof(LoggingCommandHandler<,>).MakeGenericType(
                    typeof(LoggingCommandHandler<,>).GetGenericArguments().First(),
                    context.ImplementationType),
                Lifestyle.Transient,
                context => true);
                
            var handler = container.GetInstance<ICommandHandler<MoveCustomerCommand>>();
            
            Assert.IsInstanceOfType(handler,
                typeof(LoggingCommandHandler<MoveCustomerCommand, MoveCustomerCommandHandler>));
            
            ]]></code>
            The code above allows a generic <b>LoggingCommandHandler&lt;TCommand, TImplementation&gt;</b> to
            be applied to command handlers, where the second generic argument will be filled in using the
            contextual information.
            </example>
      <param name="container">The container to make the registrations in.</param>
      <param name="serviceType">The definition of the open generic service type that will
            be wrapped by the decorator type returned by the supplied <paramref name="decoratorTypeFactory" />.</param>
      <param name="decoratorTypeFactory">A factory that allows building Type objects that define the
            decorators to inject, based on the given contextual information. The delegate is allowed to return
            open-generic types.</param>
      <param name="lifestyle">The lifestyle that specifies how the returned decorator will be cached.</param>
      <param name="predicate">The predicate that determines whether the decorator must be applied to a 
            service type.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when one of the arguments is a null reference.</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="serviceType" /> is not
            an open generic type.</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.DecoratorExtensions.RegisterDecorator(SimpleInjector.Container,System.Type,System.Type)">
      <summary>
             Ensures that the supplied <paramref name="decoratorType" /> decorator is returned, wrapping the 
             original registered <paramref name="serviceType" />, by injecting that service type into the 
             constructor of the supplied <paramref name="decoratorType" />. Multiple decorators may be applied 
             to the same <paramref name="serviceType" />. Decorators can be applied to both open, closed, and 
             non-generic service types. A new <paramref name="decoratorType" /> will always be returned (the
             <see cref="F:SimpleInjector.Lifestyle.Transient">Transient</see> lifestyle), independently of the lifestyle of the 
             wrapped service.
             </summary>
      <remarks>
        <para>
             The <b>RegisterDecorator</b> method works by hooking onto the container's
             <see cref="E:SimpleInjector.Container.ExpressionBuilt">ExpressionBuilt</see> event. This event fires after the
             <see cref="E:SimpleInjector.Container.ResolveUnregisteredType">ResolveUnregisteredType</see> event, which allows
             decoration of types that are resolved using unregistered type resolution. The
             <see cref="M:SimpleInjector.Extensions.OpenGenericRegistrationExtensions.RegisterOpenGeneric(SimpleInjector.Container,System.Type,System.Type,SimpleInjector.Lifestyle)">RegisterOpenGeneric</see>
             extension method, for instance, hooks onto the <b>ResolveUnregisteredType</b>. This allows you to
             use <b>RegisterDecorator</b> on the same generic service type as <b>RegisterOpenGeneric</b>.
             </para>
        <para>
             Multiple decorators can be applied to the same service type. The order in which they are registered
             is the order they get applied in. This means that the decorator that gets registered first, gets
             applied first, which means that the next registered decorator, will wrap the first decorator, which
             wraps the original service type.
             </para>
        <para>
             Constructor injection will be used on that type, and although it may have many constructor 
             arguments, it must have exactly one argument of the type of <paramref name="serviceType" />, or an 
             argument of type <see cref="T:System.Func`1" /> where <b>TResult</b> is <paramref name="serviceType" />.
             An exception will be thrown when this is not the case.
             </para>
        <para>
             The registered <paramref name="decoratorType" /> may have a constructor with an argument of type
             <see cref="T:System.Func`1" /> where <b>T</b> is <paramref name="serviceType" />. In this case, an decorated
             instance will not injected into the <paramref name="decoratorType" />, but it will inject a 
             <see cref="T:System.Func`1" /> that allows creating instances of the decorated type, according to the
             lifestyle of that type. This enables more advanced scenarios, such as executing the decorated 
             types on a different thread, or executing decorated instance within a certain scope (such as a 
             lifetime scope).
             </para>
      </remarks>
      <example>
             The following example shows the definition of a generic <b>ICommandHandler&lt;T&gt;</b> interface,
             a <b>CustomerMovedCommandHandler</b> implementing that interface, and a 
             <b>ValidatorCommandHandlerDecorator&lt;T&gt;</b> that acts as a decorator for that interface.
             <code lang="cs"><![CDATA[
             using System.ComponentModel.DataAnnotations;
             using System.Diagnostics;
             using System.Linq;
             
             using Microsoft.VisualStudio.TestTools.UnitTesting;
             
             using SimpleInjector;
             using SimpleInjector.Extensions;
             
             public interface ICommandHandler<TCommand>
             {
                 void Handle(TCommand command);
             }
            
             public class CustomerMovedCommand
             {
                 [Required]
                 public int CustomerId { get; set; }
            
                 [Required]
                 public Address Address { get; set; }
             }
            
             public class CustomerMovedCommandHandler
                 : ICommandHandler<CustomerMovedCommand>
             {
                 public void Handle(CustomerMovedCommand command)
                 {
                     // some logic
                 }
             }
            
             // Decorator that validates commands before they get executed.
             public class ValidatorCommandHandlerDecorator<TCommand>
                 : ICommandHandler<TCommand>
             {
                 private readonly ICommandHandler<TCommand> decoratedHandler;
                 private readonly Container container;
            
                 public ValidatorCommandHandlerDecorator(
                     ICommandHandler<TCommand> decoratedHandler,
                     Container container)
                 {
                     this.decoratedHandler = decoratedHandler;
                     this.container = container;
                 }
            
                 public void Handle(TCommand command)
                 {
                     this.Validate(command);
            
                     this.decoratedHandler.Handle(command);
                 }
            
                 private void Validate(TCommand command)
                 {
                     var validationContext =
                         new ValidationContext(command, this.container, null);
            
                     Validator.ValidateObject(command, validationContext);
                 }
             }
             
             // Decorator that measures the time it takes to execute a command.
             public class MonitoringCommandHandlerDecorator<TCommand>
                 : ICommandHandler<TCommand>
             {
                 private readonly ICommandHandler<TCommand> decoratedHandler;
                 private readonly ILogger logger;
            
                 public MonitoringCommandHandlerDecorator(
                     ICommandHandler<TCommand> decoratedHandler,
                     ILogger logger)
                 {
                     this.decoratedHandler = decoratedHandler;
                     this.logger = logger;
                 }
            
                 public void Handle(TCommand command)
                 {
                     var watch = Stopwatch.StartNew();
            
                     this.decoratedHandler.Handle(command);
            
                     this.logger.Log(string.Format("{0} executed in {1} ms.",
                         command.GetType().Name, watch.ElapsedMilliseconds));
                 }
             }
             
             [TestMethod]
             public static void TestRegisterOpenGenericDecorator()
             {
                 // Arrange
                 var container = new Container();
            
                 container.RegisterSingle<ILogger, DebugLogger>();
            
                 // Search the given assembly and register all concrete types that 
                 // implement ICommandHandler<TCommand>.
                 container.RegisterManyForOpenGeneric(typeof(ICommandHandler<>),
                     typeof(ICommandHandler<>).Assembly);
            
                 // Wrap all ICommandHandler<TCommand> service types with a decorator
                 // that measures and logs the duration of that handler.
                 container.RegisterDecorator(typeof(ICommandHandler<>),
                     typeof(MonitoringCommandHandlerDecorator<>));
            
                 // Wrap all ICommandHandler<TCommand> types (in this case it will
                 // wrap the monitoring decorator), but only if the TCommand contains
                 // any properties.
                 container.RegisterDecorator(typeof(ICommandHandler<>),
                     typeof(ValidatorCommandHandlerDecorator<>), context =>
                     {
                         var commandType = context.ServiceType.GetGenericArguments()[0];
                         bool mustDecorate = commandType.GetProperties().Any();
                         return mustDecorate;
                     });
            
                 // Act
                 var handler = 
                     container.GetInstance<ICommandHandler<CustomerMovedCommand>>();
            
                 // Assert
                 Assert.IsInstanceOfType(handler, 
                     typeof(ValidatorCommandHandlerDecorator<CustomerMovedCommand>));
             }
             ]]></code></example>
      <param name="container">The container to make the registrations in.</param>
      <param name="serviceType">The definition of the open generic service type that will
             be wrapped by the given <paramref name="decoratorType" />.</param>
      <param name="decoratorType">The definition of the open generic decorator type that will
             be used to wrap the original service type.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when one of the arguments is a null reference.</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="serviceType" />  is not
             an open generic type, when <paramref name="decoratorType" /> does not inherit from or implement 
             <paramref name="serviceType" />, when <paramref name="decoratorType" /> does not
             have a single public constructor, or when <paramref name="decoratorType" /> does not
             contain a constructor that has exactly one argument of type 
             <paramref name="serviceType" /> or <see cref="T:System.Func`1" /> where <b>T</b> is
             <paramref name="serviceType" />.</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.DecoratorExtensions.RegisterDecorator(SimpleInjector.Container,System.Type,System.Type,System.Predicate{SimpleInjector.Extensions.DecoratorPredicateContext})">
      <summary>
            Ensures that the supplied <paramref name="decoratorType" /> decorator is returned when the supplied
            <paramref name="predicate" /> returns <b>true</b>, wrapping the original registered 
            <paramref name="serviceType" />, by injecting that service type into the constructor of the 
            supplied <paramref name="decoratorType" />. Multiple decorators may be applied to the same 
            <paramref name="serviceType" />. Decorators can be applied to both open, closed, and non-generic 
            service types. A new <paramref name="decoratorType" /> will always be returned (the
            <see cref="F:SimpleInjector.Lifestyle.Transient">Transient</see> lifestyle), independently of the lifestyle of the 
            wrapped service.
            </summary>
      <remarks>
        <para>
            The <b>RegisterOpenGenericDecorator</b> method works by hooking onto the container's
            <see cref="E:SimpleInjector.Container.ExpressionBuilt">ExpressionBuilt</see> event. This event fires after the
            <see cref="E:SimpleInjector.Container.ResolveUnregisteredType">ResolveUnregisteredType</see> event, which allows
            decoration of types that are resolved using unregistered type resolution. The
            <see cref="M:SimpleInjector.Extensions.OpenGenericRegistrationExtensions.RegisterOpenGeneric(SimpleInjector.Container,System.Type,System.Type,SimpleInjector.Lifestyle)">RegisterOpenGeneric</see>
            extension method, for instance, hooks onto the <b>ResolveUnregisteredType</b>. This allows you to
            use <b>RegisterOpenGenericDecorator</b> on the same service type as <b>RegisterOpenGeneric</b>.
            </para>
        <para>
            Multiple decorators can be applied to the same service type. The order in which they are registered
            is the order they get applied in. This means that the decorator that gets registered first, gets
            applied first, which means that the next registered decorator, will wrap the first decorator, which
            wraps the original service type.
            </para>
        <para>
            Constructor injection will be used on that type, and although it may have many constructor 
            arguments, it must have exactly one argument of the type of <paramref name="serviceType" />, or an 
            argument of type <see cref="T:System.Func`1" /> where <b>TResult</b> is <paramref name="serviceType" />.
            An exception will be thrown when this is not the case.
            </para>
        <para>
            The registered <paramref name="decoratorType" /> may have a constructor with an argument of type
            <see cref="T:System.Func`1" /> where <b>T</b> is <paramref name="serviceType" />. In this case, the
            will not inject the decorated <paramref name="serviceType" /> itself into the 
            <paramref name="decoratorType" /> instance, but it will inject a <see cref="T:System.Func`1" /> that allows
            creating instances of the decorated type, according to the lifestyle of that type. This enables
            more advanced scenarios, such as executing the decorated types on a different thread, or executing
            decorated instance within a certain scope (such as a lifetime scope).
            </para>
      </remarks>
      <example>
            Please see the <see cref="M:SimpleInjector.Extensions.DecoratorExtensions.RegisterDecorator(SimpleInjector.Container,System.Type,System.Type)">RegisterDecorator</see> method
            for more information.
            </example>
      <param name="container">The container to make the registrations in.</param>
      <param name="serviceType">The definition of the open generic service type that will
            be wrapped by the given <paramref name="decoratorType" />.</param>
      <param name="decoratorType">The definition of the open generic decorator type that will
            be used to wrap the original service type.</param>
      <param name="predicate">The predicate that determines whether the 
            <paramref name="decoratorType" /> must be applied to a service type.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when one of the arguments is a null reference.</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="serviceType" /> is not
            an open generic type, when <paramref name="decoratorType" /> does not inherit from or 
            implement <paramref name="serviceType" />, when <paramref name="decoratorType" />
            does not have a single public constructor, or when <paramref name="decoratorType" /> does 
            not contain a constructor that has exactly one argument of type 
            <paramref name="serviceType" /> or <see cref="T:System.Func`1" /> where <b>T</b> is
            <paramref name="serviceType" />.</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.DecoratorExtensions.RegisterSingleDecorator(SimpleInjector.Container,System.Type,System.Type)">
      <summary>
            Ensures that a single instance of the supplied <paramref name="decoratorType" /> decorator is 
            returned, wrapping the original registered <paramref name="serviceType" />, by injecting that 
            service type into the constructor of the supplied <paramref name="decoratorType" />. Multiple 
            decorators may be applied to the same <paramref name="serviceType" />. Decorators can be applied 
            to both open, closed, and non-generic service types.
            </summary>
      <remarks>
        <para>
            This method ensures that a single instance of the supplied <paramref name="decoratorType" /> is
            returned, no matter what the lifestyle of the wrapped service type is. Use with care, because the
            wrapped service type will also become a singleton. This method is especially useful when use for
            injecting <see cref="T:System.Func`1" /> factory methods, which will allow the wrapped service type to get
            it's own lifestyle back.
            </para>
      </remarks>
      <example>
            Please see the <see cref="M:SimpleInjector.Extensions.DecoratorExtensions.RegisterDecorator(SimpleInjector.Container,System.Type,System.Type)">RegisterDecorator</see> method
            for more information.
            </example>
      <param name="container">The container to make the registrations in.</param>
      <param name="serviceType">The definition of the open generic service type that will
            be wrapped by the given <paramref name="decoratorType" />.</param>
      <param name="decoratorType">The definition of the open generic decorator type that will
            be used to wrap the original service type.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when one of the arguments is a null reference.</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="serviceType" />  is not
            an open generic type, when <paramref name="decoratorType" /> does not inherit from or implement 
            <paramref name="serviceType" />, when <paramref name="decoratorType" /> does not
            have a single public constructor, or when <paramref name="decoratorType" /> does not
            contain a constructor that has exactly one argument of type 
            <paramref name="serviceType" /> or <see cref="T:System.Func`1" /> where <b>T</b> is
            <paramref name="serviceType" />.</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.DecoratorExtensions.RegisterSingleDecorator(SimpleInjector.Container,System.Type,System.Type,System.Predicate{SimpleInjector.Extensions.DecoratorPredicateContext})">
      <summary>
            Ensures that the supplied <paramref name="decoratorType" /> decorator is returned when the supplied
            <paramref name="predicate" /> returns <b>true</b>, wrapping the original registered 
            <paramref name="serviceType" />, by injecting that service type into the constructor of the 
            supplied <paramref name="decoratorType" />. Multiple decorators may be applied to the same 
            <paramref name="serviceType" />. Decorators can be applied to both open, closed, and non-generic 
            service types.
            </summary>
      <remarks>
        <para>
            This method ensures that a single instance of the supplied <paramref name="decoratorType" /> is
            returned, no matter what the lifestyle of the wrapped service type is. Use with care, because the
            wrapped service type will also become a singleton. This method is especially useful when use for
            injecting <see cref="T:System.Func`1" /> factory methods, which will allow the wrapped service type to get
            it's own lifestyle back.
            </para>
      </remarks>
      <example>
            Please see the <see cref="M:SimpleInjector.Extensions.DecoratorExtensions.RegisterDecorator(SimpleInjector.Container,System.Type,System.Type)">RegisterDecorator</see> method
            for more information.
            </example>
      <param name="container">The container to make the registrations in.</param>
      <param name="serviceType">The definition of the open generic service type that will
            be wrapped by the given <paramref name="decoratorType" />.</param>
      <param name="decoratorType">The definition of the open generic decorator type that will
            be used to wrap the original service type.</param>
      <param name="predicate">The predicate that determines whether the 
            <paramref name="decoratorType" /> must be applied to a service type.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when one of the arguments is a null reference.</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="serviceType" /> is not
            an open generic type, when <paramref name="decoratorType" /> does not inherit from or 
            implement <paramref name="serviceType" />, when <paramref name="decoratorType" />
            does not have a single public constructor, or when <paramref name="decoratorType" /> does 
            not contain a constructor that has exactly one argument of type 
            <paramref name="serviceType" /> or <see cref="T:System.Func`1" /> where <b>T</b> is
            <paramref name="serviceType" />.</exception>
    </member>
    <member name="T:SimpleInjector.Extensions.DecoratorPredicateContext">
      <summary>
            An instance of this type will be supplied to the <see cref="T:System.Predicate`1" />
            delegate that is that is supplied to the 
            <see cref="M:SimpleInjector.Extensions.DecoratorExtensions.RegisterDecorator(SimpleInjector.Container,System.Type,System.Type,System.Predicate{SimpleInjector.Extensions.DecoratorPredicateContext})">RegisterDecorator</see>
            overload that takes this delegate. This type contains information about the decoration that is about
            to be applied and it allows users to examine the given instance to see whether the decorator should
            be applied or not.
            </summary>
      <remarks>
            Please see the 
            <see cref="M:SimpleInjector.Extensions.DecoratorExtensions.RegisterDecorator(SimpleInjector.Container,System.Type,System.Type,System.Predicate{SimpleInjector.Extensions.DecoratorPredicateContext})">RegisterDecorator</see>
            method for more information.
            </remarks>
    </member>
    <member name="P:SimpleInjector.Extensions.DecoratorPredicateContext.ServiceType">
      <summary>
            Gets the closed generic service type for which the decorator is about to be applied. The original
            service type will be returned, even if other decorators have already been applied to this type.
            </summary>
      <value>The closed generic service type.</value>
    </member>
    <member name="P:SimpleInjector.Extensions.DecoratorPredicateContext.ImplementationType">
      <summary>
            Gets the type of the implementation that is created by the container and for which the decorator
            is about to be applied. The original implementation type will be returned, even if other decorators
            have already been applied to this type. Please not that the implementation type can not always be
            determined. In that case the closed generic service type will be returned.
            </summary>
      <value>The implementation type.</value>
    </member>
    <member name="P:SimpleInjector.Extensions.DecoratorPredicateContext.AppliedDecorators">
      <summary>
            Gets the list of the types of decorators that have already been applied to this instance.
            </summary>
      <value>The applied decorators.</value>
    </member>
    <member name="P:SimpleInjector.Extensions.DecoratorPredicateContext.Expression">
      <summary>
            Gets the current <see cref="P:SimpleInjector.Extensions.DecoratorPredicateContext.Expression" /> object that describes the intention to create a new
            instance with its currently applied decorators.
            </summary>
      <value>The current expression that is about to be decorated.</value>
    </member>
    <member name="T:SimpleInjector.Extensions.Decorators.DecoratorExpressionInterceptor">
      <summary>
            Hooks into the building process and adds a decorator if needed.
            </summary>
    </member>
    <member name="T:SimpleInjector.Advanced.IContainerControlledCollection">
      <summary>This interface is not meant for public use.</summary>
    </member>
    <member name="M:SimpleInjector.Advanced.IContainerControlledCollection.GetRelationships">
      <summary>Please do not use.</summary>
      <returns>Do not use.</returns>
    </member>
    <member name="M:SimpleInjector.Advanced.IContainerControlledCollection.Append(SimpleInjector.Registration)">
      <summary>PLease do not use.</summary>
      <param name="registration">Do not use.</param>
    </member>
    <member name="T:SimpleInjector.Registration">
      <summary>
            A <b>Registration</b> implements lifestyle based caching for a single service and allows building an
            <see cref="T:System.Linq.Expressions.Expression" /> that describes the creation of the service.
            </summary>
      <remarks>
        <see cref="P:SimpleInjector.Registration.Lifestyle" /> implementations create a new <b>Registration</b> instance for each registered
            service type. <see cref="T:System.Linq.Expressions.Expression" />s returned from the 
            <see cref="M:SimpleInjector.Registration.BuildExpression">BuildExpression</see> method can be intercepted by any event
            registered with <see cref="E:SimpleInjector.Container.ExpressionBuilding" />, have 
            <see cref="M:SimpleInjector.Container.RegisterInitializer``1(System.Action{``0})">initializers</see> 
            applied, and the caching particular to its lifestyle have been applied. Interception using the 
            <see cref="E:SimpleInjector.Container.ExpressionBuilt">Container.ExpressionBuilt</see> will <b>not</b> 
            be applied in the <b>Registration</b>, but will be applied in <see cref="T:SimpleInjector.InstanceProducer" />.</remarks>
      <example>
            See the <see cref="P:SimpleInjector.Registration.Lifestyle" /> documentation for an example.
            </example>
    </member>
    <member name="M:SimpleInjector.Registration.#ctor(SimpleInjector.Lifestyle,SimpleInjector.Container)">
      <summary>
            Initializes a new instance of the <see cref="T:SimpleInjector.Registration" /> class.
            </summary>
      <param name="lifestyle">The <see cref="P:SimpleInjector.Registration.Lifestyle" /> this that created this registration.</param>
      <param name="container">The <see cref="P:SimpleInjector.Registration.Container" /> instance for this registration.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when one of the supplied arguments is a null
            reference (Nothing in VB).</exception>
    </member>
    <member name="M:SimpleInjector.Registration.BuildExpression">
      <summary>
            Builds a new <see cref="T:System.Linq.Expressions.Expression" /> with the correct caching (according to the specifications of
            its <see cref="P:SimpleInjector.Registration.Lifestyle" />) applied.
            </summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="M:SimpleInjector.Registration.GetRelationships">
      <summary>
            Gets the list of <see cref="T:SimpleInjector.Advanced.KnownRelationship" /> instances. Note that the list is only available
            after calling <see cref="M:SimpleInjector.Registration.BuildExpression" />.
            </summary>
      <returns>A new array containing the <see cref="T:SimpleInjector.Advanced.KnownRelationship" /> instances.</returns>
    </member>
    <member name="M:SimpleInjector.Registration.InitializeInstance(System.Object)">
      <summary>
            Initializes an already created instance and applies properties and initializers to that instance.
            </summary>
      <remarks>
            This method is especially useful in integration scenarios where the given platform is in control
            of creating certain types. By passing the instance created by the platform to this method, the
            container is still able to apply any properties (as defined using a custom
            <see cref="T:SimpleInjector.Advanced.IPropertySelectionBehavior" />) and by applying any initializers.
            </remarks>
      <param name="instance">The instance to initialize.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="instance" /> is a null reference
            (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when the supplied <paramref name="instance" /> is not
            of type <see cref="P:SimpleInjector.Registration.ImplementationType" />.</exception>
    </member>
    <member name="M:SimpleInjector.Registration.BuildTransientDelegate``1(System.Func{``0})">
      <summary>
            Builds a <see cref="T:System.Func`1" /> delegate for the creation of the <typeparamref name="TService" />
            using the supplied <paramref name="instanceCreator" />. The returned <see cref="T:System.Func`1" /> might
            be intercepted by a 
            <see cref="E:SimpleInjector.Container.ExpressionBuilding">Container.ExpressionBuilding</see> event, 
            and the <paramref name="instanceCreator" /> will have been wrapped with a delegate that executes the
            registered <see cref="M:SimpleInjector.Container.RegisterInitializer``1(System.Action{``0})">initializers</see> 
            that are appliable to the given <typeparamref name="TService" /> (if any).
            </summary>
      <typeparam name="TService">The interface or base type that can be used to retrieve instances.</typeparam>
      <param name="instanceCreator">
            The delegate supplied by the user that allows building or creating new instances.</param>
      <returns>A <see cref="T:System.Func`1" /> delegate.</returns>
    </member>
    <member name="M:SimpleInjector.Registration.BuildTransientDelegate``2">
      <summary>
            Builds a <see cref="T:System.Func`1" /> delegate for the creation of <typeparamref name="TImplementation" />.
            The returned <see cref="T:System.Func`1" /> might be intercepted by a 
            <see cref="E:SimpleInjector.Container.ExpressionBuilding">Container.ExpressionBuilding</see> event, 
            and the creation of the <typeparamref name="TImplementation" /> will have been wrapped with a 
            delegate that executes the registered 
            <see cref="M:SimpleInjector.Container.RegisterInitializer``1(System.Action{``0})">initializers</see> 
            that are appliable to the given <typeparamref name="TService" /> (if any).
            </summary>
      <typeparam name="TService">The interface or base type that can be used to retrieve instances.</typeparam>
      <typeparam name="TImplementation">The concrete type that will be registered.</typeparam>
      <returns>A <see cref="T:System.Func`1" /> delegate.</returns>
    </member>
    <member name="M:SimpleInjector.Registration.BuildTransientExpression``1(System.Func{``0})">
      <summary>
            Builds an <see cref="T:System.Linq.Expressions.Expression" /> that describes the creation of the <typeparamref name="TService" />
            using the supplied <paramref name="instanceCreator" />. The returned <see cref="T:System.Linq.Expressions.Expression" /> might
            be intercepted by a 
            <see cref="E:SimpleInjector.Container.ExpressionBuilding">Container.ExpressionBuilding</see> event, 
            and the <paramref name="instanceCreator" /> will have been wrapped with a delegate that executes the
            registered <see cref="M:SimpleInjector.Container.RegisterInitializer(System.Action{SimpleInjector.Advanced.InstanceInitializationData},System.Predicate{SimpleInjector.Advanced.InitializationContext})">initializers</see> that are 
            appliable to the given <typeparamref name="TService" /> (if any).
            </summary>
      <typeparam name="TService">The interface or base type that can be used to retrieve instances.</typeparam>
      <param name="instanceCreator">
            The delegate supplied by the user that allows building or creating new instances.</param>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="M:SimpleInjector.Registration.BuildTransientExpression``2">
      <summary>
            Builds an <see cref="T:System.Linq.Expressions.Expression" /> that describes the creation of 
            <typeparamref name="TImplementation" />. The returned <see cref="T:System.Linq.Expressions.Expression" /> might be intercepted
            by a <see cref="E:SimpleInjector.Container.ExpressionBuilding">Container.ExpressionBuilding</see>
            event, and the creation of the <typeparamref name="TImplementation" /> will have been wrapped with
            a delegate that executes the registered 
            <see cref="M:SimpleInjector.Container.RegisterInitializer(System.Action{SimpleInjector.Advanced.InstanceInitializationData},System.Predicate{SimpleInjector.Advanced.InitializationContext})">initializers</see> 
            that are appliable to the given <typeparamref name="TService" /> (if any).
            </summary>
      <typeparam name="TService">The interface or base type that can be used to retrieve instances.</typeparam>
      <typeparam name="TImplementation">The concrete type that will be registered.</typeparam>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="P:SimpleInjector.Registration.ImplementationType">
      <summary>Gets the type that this instance will create.</summary>
      <value>The type that this instance will create.</value>
    </member>
    <member name="P:SimpleInjector.Registration.Lifestyle">
      <summary>Gets the <see cref="P:SimpleInjector.Registration.Lifestyle" /> this that created this registration.</summary>
      <value>The <see cref="P:SimpleInjector.Registration.Lifestyle" /> this that created this registration.</value>
    </member>
    <member name="P:SimpleInjector.Registration.Container">
      <summary>Gets the <see cref="P:SimpleInjector.Registration.Container" /> instance for this registration.</summary>
      <value>The <see cref="P:SimpleInjector.Registration.Container" /> instance for this registration.</value>
    </member>
    <member name="T:SimpleInjector.Extensions.GenericArgumentFinder">
      <summary>
            Allows retrieving the concrete types of the generic type arguments of that must be used to create a
            closed generic implementation of a given open generic implementation, based on on the concrete
            arguments of the given closed base type.
            </summary>
    </member>
    <member name="T:SimpleInjector.Extensions.GenericTypeBuilder">
      <summary>
            Helper class for building closed generic type for a given open generic type and a closed generic base.
            </summary>
    </member>
    <member name="T:SimpleInjector.Extensions.GenericTypeBuilder.BuildResult">
      <summary>Result of the GenericTypeBuilder.</summary>
    </member>
    <member name="T:SimpleInjector.Extensions.GenericTypeBuilder.CandicateServiceType">
      <summary>
            A open generic type with the concrete arguments that can be used to create a closed generic type.
            </summary>
    </member>
    <member name="T:SimpleInjector.Extensions.ExtensionHelpers">
      <summary>
            Helper methods for the extensions.
            </summary>
    </member>
    <member name="T:SimpleInjector.Extensions.BatchRegistrationCallback">
      <summary>
            Represents the method that will called to register one or multiple concrete non-generic
            <paramref name="implementations" /> of the given closed generic type 
            <paramref name="closedServiceType" />.
            </summary>
      <param name="closedServiceType">The service type that needs to be registered.</param>
      <param name="implementations">One or more concrete types that implement the given 
            <paramref name="closedServiceType" />.</param>
      <example>
        <code lang="cs"><![CDATA[
            var container = new Container();
            
            BatchRegistrationCallback registerAsCollectionAsSingletons = (closedServiceType, implementations) =>
            {
                foreach (Type implementation in implementations)
                {
                    container.RegisterSingle(implementation);
                }
                
                container.RegisterAll(closedServiceType, implementations);
            };
            
            container.RegisterManyForOpenGeneric(
                typeof(ICommandHandler<>),
                registerAsCollectionAsSingletons, 
                typeof(ICommandHandler<>).Assembly);
            ]]></code>
            The <b>BatchRegistrationCallback</b> can be supplied to some overloads of the
            <see cref="T:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions">RegisterManyForOpenGeneric</see> extension methods.
            The default behavior of the <b>RegisterManyForOpenGeneric</b> methods is to register a closed generic
            type with the corresponding implementation (and will throw when multiple implementations are found for
            a single closed generic service type). The given example overrides this default registration by 
            registering the found list of implementations (one or more) as collection of singletons for the given 
            closed generic service type.
            </example>
    </member>
    <member name="T:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions">
      <summary>
            Provides a set of static (Shared in Visual Basic) methods for registration many concrete types at
            once that implement the same open generic service types in the <see cref="T:SimpleInjector.Container" />.
            </summary>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,System.Reflection.Assembly[])">
      <summary>
            Registers all concrete, non-generic, publicly exposed types in the given set of
            <paramref name="assemblies" /> that implement the given <paramref name="openGenericServiceType" /> 
            with a transient lifetime.
            </summary>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="assemblies">A list of assemblies that will be searched.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container" />,
            <paramref name="openGenericServiceType" />, or <paramref name="assemblies" /> contain a null
            reference (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="openGenericServiceType" /> is not
            an open generic type.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when the given set of 
            <paramref name="assemblies" /> contain multiple publicly exposed types that implement the same 
            closed generic version of the given <paramref name="openGenericServiceType" />.</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>
            Registers all concrete, non-generic, publicly exposed types that are located in the given 
            <paramref name="assemblies" /> that implement the given <paramref name="openGenericServiceType" /> 
            with a transient lifetime.
            </summary>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="assemblies">A list of assemblies that will be searched.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container" />,
            <paramref name="openGenericServiceType" />, or <paramref name="assemblies" /> contain a null
            reference (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="openGenericServiceType" /> is not
            an open generic type.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when the given set of 
            <paramref name="assemblies" /> contain multiple publicly exposed types that implement the same 
            closed generic version of the given <paramref name="openGenericServiceType" />.</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,SimpleInjector.Lifestyle,System.Reflection.Assembly[])">
      <summary>
            Registers all concrete, non-generic, publicly exposed types in the given set of
            <paramref name="assemblies" /> that implement the given <paramref name="openGenericServiceType" /> 
            with the supplied <paramref name="lifestyle" />. When a found type implements multiple 
            closed-generic versions of the given <paramref name="openGenericServiceType" />, both closed-generic
            service types will point at the same registration and return the same instance based on the caching
            behavior of the supplied <paramref name="lifestyle" />.
            </summary>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="lifestyle">The lifestyle that will be used for the registration of the types.</param>
      <param name="assemblies">A list of assemblies that will be searched.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container" />,
            <paramref name="openGenericServiceType" />, <paramref name="lifestyle" /> or 
            <paramref name="assemblies" /> contain a null reference (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="openGenericServiceType" /> is not
            an open generic type.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when the given set of 
            <paramref name="assemblies" /> contain multiple publicly exposed types that implement the same 
            closed generic version of the given <paramref name="openGenericServiceType" />.</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,SimpleInjector.Lifestyle,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>
            Registers all concrete, non-generic, publicly exposed types that are located in the given 
            <paramref name="assemblies" /> that implement the given <paramref name="openGenericServiceType" /> 
            with the supplied <paramref name="lifestyle" />. When a found type implements multiple 
            closed-generic versions of the given <paramref name="openGenericServiceType" />, both closed-generic
            service types will point at the same registration and return the same instance based on the caching
            behavior of the supplied <paramref name="lifestyle" />.
            </summary>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="lifestyle">The lifestyle that will be used for the registration of the types.</param>
      <param name="assemblies">A list of assemblies that will be searched.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container" />,
            <paramref name="openGenericServiceType" />, <paramref name="lifestyle" /> or 
            <paramref name="assemblies" /> contain a null reference (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="openGenericServiceType" /> is not
            an open generic type.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when the given set of 
            <paramref name="assemblies" /> contain multiple publicly exposed types that implement the same 
            closed generic version of the given <paramref name="openGenericServiceType" />.</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,SimpleInjector.Extensions.BatchRegistrationCallback,System.Reflection.Assembly[])">
      <summary>
            Allows registration of all concrete, public, non-generic types that are located in the given set of 
            <paramref name="assemblies" /> that implement the given <paramref name="openGenericServiceType" />, 
            by supplying a <see cref="T:SimpleInjector.Extensions.BatchRegistrationCallback" /> delegate, that will be called for each 
            found closed generic implementation of the given <paramref name="openGenericServiceType" />.
            </summary>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="callback">The delegate that will be called for each found closed generic version of
            the given open generic <paramref name="openGenericServiceType" /> to do the actual registration.</param>
      <param name="assemblies">A list of assemblies that will be searched.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container" />,
            <paramref name="openGenericServiceType" />, <paramref name="callback" />, or 
            <paramref name="assemblies" /> contain a null reference (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="openGenericServiceType" /> is not
            an open generic type.</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,SimpleInjector.Extensions.BatchRegistrationCallback,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>
            Allows registration of all concrete, public, non-generic types that are located in the given set of 
            <paramref name="assemblies" /> that implement the given <paramref name="openGenericServiceType" />, 
            by supplying a <see cref="T:SimpleInjector.Extensions.BatchRegistrationCallback" /> delegate, that will be called for each 
            found closed generic implementation of the given <paramref name="openGenericServiceType" />.
            </summary>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="callback">The delegate that will be called for each found closed generic version of
            the given open generic <paramref name="openGenericServiceType" /> to do the actual registration.</param>
      <param name="assemblies">A list of assemblies that will be searched.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container" />,
            <paramref name="openGenericServiceType" />, <paramref name="callback" />, or 
            <paramref name="assemblies" /> contain a null reference (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="openGenericServiceType" /> is not
            an open generic type.</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManySinglesForOpenGeneric(SimpleInjector.Container,System.Type,System.Reflection.Assembly[])">
      <summary>
            Registers all concrete, non-generic, publicly exposed types that are located in the given 
            <paramref name="assemblies" /> that implement the given 
            <paramref name="openGenericServiceType" /> with a singleton lifetime.
            </summary>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="assemblies">A list of assemblies that will be searched.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container" />,
            <paramref name="openGenericServiceType" />, or <paramref name="assemblies" /> contain a null
            reference (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="openGenericServiceType" /> is not
            an open generic type.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when the given set of 
            <paramref name="assemblies" /> contain multiple publicly exposed types that implement the same 
            closed generic version of the given <paramref name="openGenericServiceType" />.</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManySinglesForOpenGeneric(SimpleInjector.Container,System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>
            Registers all concrete, non-generic, publicly exposed types that are located in the given 
            <paramref name="assemblies" /> that implement the given <paramref name="openGenericServiceType" /> 
            with a singleton lifetime.
            </summary>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="assemblies">A list of assemblies that will be searched.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container" />,
            <paramref name="openGenericServiceType" />, or <paramref name="assemblies" /> contain a null
            reference (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="openGenericServiceType" /> is not
            an open generic type.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when the given set of 
            <paramref name="assemblies" /> contain multiple publicly exposed types that implement the same 
            closed generic version of the given <paramref name="openGenericServiceType" />.</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,System.Type[])">
      <summary>
            Registers all supplied <paramref name="typesToRegister" /> by a closed generic definition of the
            given <paramref name="openGenericServiceType" /> with a transient lifetime.
            </summary>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="typesToRegister">The list of types that must be registered according to the given
            <paramref name="openGenericServiceType" /> definition.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container" />, 
            <paramref name="openGenericServiceType" />, or <paramref name="typesToRegister" /> contain a null
            reference (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="typesToRegister" /> contains a null
            (Nothing in VB) element, when the <paramref name="openGenericServiceType" /> is not an open generic
            type, or one of the types supplied in <paramref name="typesToRegister" /> does not implement a 
            closed version of <paramref name="openGenericServiceType" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">Thrown when there are multiple types in the given
            <paramref name="typesToRegister" /> collection that implement the same closed version of the
            supplied <paramref name="openGenericServiceType" />.
            </exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Registers all supplied <paramref name="typesToRegister" /> by a closed generic definition of the
            given <paramref name="openGenericServiceType" /> with a transient lifetime.
            </summary>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="typesToRegister">The list of types that must be registered according to the given
            <paramref name="openGenericServiceType" /> definition.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container" />, 
            <paramref name="openGenericServiceType" />, or <paramref name="typesToRegister" /> contain a null
            reference (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="typesToRegister" /> contains a null
            (Nothing in VB) element, when the <paramref name="openGenericServiceType" /> is not an open generic
            type, or one of the types supplied in <paramref name="typesToRegister" /> does not implement a 
            closed version of <paramref name="openGenericServiceType" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">Thrown when there are multiple types in the given
            <paramref name="typesToRegister" /> collection that implement the same closed version of the
            supplied <paramref name="openGenericServiceType" />.
            </exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,SimpleInjector.Extensions.BatchRegistrationCallback,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Allows registration of all supplied <paramref name="typesToRegister" /> by a closed generic 
            definition of the given <paramref name="openGenericServiceType" />, by supplying a 
            <see cref="T:SimpleInjector.Extensions.BatchRegistrationCallback" /> delegate, that will be called for each found closed generic 
            implementation.
            If the list contains open generic types, matching closed generic versions of each open generic
            type will be added to the list of implementations that is passed on to the 
            <paramref name="callback" /> delegate.
            </summary>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="callback">The delegate that will be called for each found closed generic version of
            the given open generic <paramref name="openGenericServiceType" /> to do the actual registration.</param>
      <param name="typesToRegister">The list of types that must be registered according to the given
            <paramref name="openGenericServiceType" /> definition.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container" />, 
            <paramref name="openGenericServiceType" />, <paramref name="callback" />, or 
            <paramref name="typesToRegister" /> contain a null reference (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="typesToRegister" /> contains a null
            (Nothing in VB) element, when the <paramref name="openGenericServiceType" /> is not an open generic
            type, or one of the types supplied in <paramref name="typesToRegister" /> does not implement a 
            closed version of <paramref name="openGenericServiceType" />.
            </exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManySinglesForOpenGeneric(SimpleInjector.Container,System.Type,System.Type[])">
      <summary>
            Registers all supplied <paramref name="typesToRegister" /> by a closed generic definition of the
            given <paramref name="openGenericServiceType" /> with a singleton lifetime.
            When a found type implements multiple 
            closed-generic versions of the given <paramref name="openGenericServiceType" />, both closed-generic
            service types will return the exact same instance.
            </summary>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="typesToRegister">The list of types that must be registered according to the given
            <paramref name="openGenericServiceType" /> definition.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container" />, 
            <paramref name="openGenericServiceType" />, or <paramref name="typesToRegister" /> contain a null
            reference (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="typesToRegister" /> contains a null
            (Nothing in VB) element, when the <paramref name="openGenericServiceType" /> is not an open generic
            type, or one of the types supplied in <paramref name="typesToRegister" /> does not implement a 
            closed version of <paramref name="openGenericServiceType" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">Thrown when there are multiple types in the given
            <paramref name="typesToRegister" /> collection that implement the same closed version of the
            supplied <paramref name="openGenericServiceType" />.
            </exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManySinglesForOpenGeneric(SimpleInjector.Container,System.Type,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Registers all supplied <paramref name="typesToRegister" /> by a closed generic definition of the
            given <paramref name="openGenericServiceType" /> with a singleton lifetime.
            When a found type implements multiple 
            closed-generic versions of the given <paramref name="openGenericServiceType" />, both closed-generic
            service types will return the exact same instance.
            </summary>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="typesToRegister">The list of types that must be registered according to the given
            <paramref name="openGenericServiceType" /> definition.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container" />, 
            <paramref name="openGenericServiceType" />, or <paramref name="typesToRegister" /> contain a null
            reference (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="typesToRegister" /> contains a null
            (Nothing in VB) element, when the <paramref name="openGenericServiceType" /> is not an open generic
            type, or one of the types supplied in <paramref name="typesToRegister" /> does not implement a 
            closed version of <paramref name="openGenericServiceType" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">Thrown when there are multiple types in the given
            <paramref name="typesToRegister" /> collection that implement the same closed version of the
            supplied <paramref name="openGenericServiceType" />.
            </exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.GetTypesToRegister(System.Type,System.Reflection.Assembly[])">
      <summary>
            Returns all public types that are located in the supplied <paramref name="assemblies" /> 
            and implement or inherit from the supplied <paramref name="openGenericServiceType" />.
            </summary>
      <remarks>
            Use this method when you need influence the types that are registered using 
            <see cref="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,System.Reflection.Assembly[])">RegisterManyForOpenGeneric</see>. 
            The <b>RegisterManyForOpenGeneric</b> overloads that take a collection of <see cref="T:System.Reflection.Assembly" /> 
            objects use this method to get the list of types that need to be registered. Instead of calling 
            such overload, you can call an overload that takes a list of <see cref="T:System.Type" /> objects and pass 
            in a filtered result from this <b>GetTypesToRegister</b> method.
            <code lang="cs"><![CDATA[
            var container = new Container();
            
            var types = OpenGenericBatchRegistrationExtensions
                .GetTypesToRegister(typeof(ICommandHandler<>), typeof(ICommandHandler<>).Assembly)
                .Where(type => !type.Name.EndsWith("Decorator"));
            
            container.RegisterManyForOpenGeneric(typeof(ICommandHandler<>), types);
            ]]></code>
            This example calls the <b>GetTypesToRegister</b> method to request a list of concrete implementations
            of the <b>ICommandHandler&lt;T&gt;</b> interface from the assembly of that interface. After that
            all types which name ends with 'Decorator' are filtered out. This list is supplied to an
            <see cref="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,System.Reflection.Assembly[])">RegisterManyForOpenGeneric</see>
            overload that takes a list of types to finish the
            registration.
            </remarks>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="assemblies">A list of assemblies that will be searched.</param>
      <returns>A list of types.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="openGenericServiceType" />, or 
            <paramref name="assemblies" /> contain a null reference (Nothing in VB).</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.GetTypesToRegister(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>
            Returns all public types that are located in the supplied <paramref name="assemblies" /> 
            and implement or inherit from the supplied <paramref name="openGenericServiceType" />.
            </summary>
      <remarks>
            Use this method when you need influence the types that are registered using 
            <see cref="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,System.Reflection.Assembly[])">RegisterManyForOpenGeneric</see>. 
            The <b>RegisterManyForOpenGeneric</b> overloads that take a collection of <see cref="T:System.Reflection.Assembly" /> 
            objects use this method to get the list of types that need to be registered. Instead of calling 
            such overload, you can call an overload that takes a list of <see cref="T:System.Type" /> objects and pass 
            in a filtered result from this <b>GetTypesToRegister</b> method.
            <code lang="cs"><![CDATA[
            var container = new Container();
            
            var types = OpenGenericBatchRegistrationExtensions
                .GetTypesToRegister(typeof(ICommandHandler<>), typeof(ICommandHandler<>).Assembly)
                .Where(type => !type.Name.EndsWith("Decorator"));
            
            container.RegisterManyForOpenGeneric(typeof(ICommandHandler<>), types);
            ]]></code>
            This example calls the <b>GetTypesToRegister</b> method to request a list of concrete implementations
            of the <b>ICommandHandler&lt;T&gt;</b> interface from the assembly of that interface. After that
            all types which name ends with 'Decorator' are filtered out. This list is supplied to an
            <see cref="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,System.Reflection.Assembly[])">RegisterManyForOpenGeneric</see>
            overload that takes a list of types to finish the registration.
            </remarks>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="assemblies">A list of assemblies that will be searched.</param>
      <returns>A list of types.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="openGenericServiceType" />, or 
            <paramref name="assemblies" /> contain a null reference (Nothing in VB).</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.GetTypesToRegister(SimpleInjector.Container,System.Type,System.Reflection.Assembly[])">
      <summary>
            Returns all public types that are located in the supplied <paramref name="assemblies" /> 
            and implement or inherit from the supplied <paramref name="openGenericServiceType" />.
            Types that are considered to be decorators are not returned.
            </summary>
      <remarks>
            Use this method when you need influence the types that are registered using 
            <see cref="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,System.Reflection.Assembly[])">RegisterManyForOpenGeneric</see>. 
            The <b>RegisterManyForOpenGeneric</b> overloads that take a collection of <see cref="T:System.Reflection.Assembly" /> 
            objects use this method to get the list of types that need to be registered. Instead of calling 
            such overload, you can call an overload that takes a list of <see cref="T:System.Type" /> objects and pass 
            in a filtered result from this <b>GetTypesToRegister</b> method.
            <code lang="cs"><![CDATA[
            var container = new Container();
            
            var types = OpenGenericBatchRegistrationExtensions
                .GetTypesToRegister(typeof(ICommandHandler<>), typeof(ICommandHandler<>).Assembly)
                .Where(type => !type.Name.EndsWith("Decorator"));
            
            container.RegisterManyForOpenGeneric(typeof(ICommandHandler<>), types);
            ]]></code>
            This example calls the <b>GetTypesToRegister</b> method to request a list of concrete implementations
            of the <b>ICommandHandler&lt;T&gt;</b> interface from the assembly of that interface. After that
            all types which name ends with 'Decorator' are filtered out. This list is supplied to an
            <see cref="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,System.Reflection.Assembly[])">RegisterManyForOpenGeneric</see>
            overload that takes a list of types to finish the
            registration.
            </remarks>
      <param name="container">The container to use.</param>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="assemblies">A list of assemblies that will be searched.</param>
      <returns>A list of types.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="openGenericServiceType" />, or 
            <paramref name="assemblies" /> contain a null reference (Nothing in VB).</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.GetTypesToRegister(SimpleInjector.Container,System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>
            Returns all public types that are located in the supplied <paramref name="assemblies" /> 
            and implement or inherit from the supplied <paramref name="openGenericServiceType" />.
            Types that are considered to be decorators are not returned.
            </summary>
      <remarks>
            Use this method when you need influence the types that are registered using 
            <see cref="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,System.Reflection.Assembly[])">RegisterManyForOpenGeneric</see>. 
            The <b>RegisterManyForOpenGeneric</b> overloads that take a collection of <see cref="T:System.Reflection.Assembly" /> 
            objects use this method to get the list of types that need to be registered. Instead of calling 
            such overload, you can call an overload that takes a list of <see cref="T:System.Type" /> objects and pass 
            in a filtered result from this <b>GetTypesToRegister</b> method.
            <code lang="cs"><![CDATA[
            var container = new Container();
            
            var types = OpenGenericBatchRegistrationExtensions
                .GetTypesToRegister(typeof(ICommandHandler<>), typeof(ICommandHandler<>).Assembly)
                .Where(type => !type.Name.EndsWith("Decorator"));
            
            container.RegisterManyForOpenGeneric(typeof(ICommandHandler<>), types);
            ]]></code>
            This example calls the <b>GetTypesToRegister</b> method to request a list of concrete implementations
            of the <b>ICommandHandler&lt;T&gt;</b> interface from the assembly of that interface. After that
            all types which name ends with 'Decorator' are filtered out. This list is supplied to an
            <see cref="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,System.Reflection.Assembly[])">RegisterManyForOpenGeneric</see>
            overload that takes a list of types to finish the registration.
            </remarks>
      <param name="container">The container to use.</param>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="assemblies">A list of assemblies that will be searched.</param>
      <returns>A list of types.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="openGenericServiceType" />, or 
            <paramref name="assemblies" /> contain a null reference (Nothing in VB).</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,SimpleInjector.Extensions.AccessibilityOption,System.Reflection.Assembly[])">
      <summary>
            Registers  all concrete, non-generic types with the given <paramref name="accessibility" />
            that are located in the given <paramref name="assemblies" /> that implement the given 
            <paramref name="openGenericServiceType" /> with a transient lifetime.
            </summary>
      <remarks>
        <b>This method is not available in Silverlight.</b>
      </remarks>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="accessibility">Defines which types should be used from the given assemblies.</param>
      <param name="assemblies">A list of assemblies that will be searched.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container" />,
            <paramref name="openGenericServiceType" />, or <paramref name="assemblies" /> contain a null
            reference (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="openGenericServiceType" /> is not
            an open generic type.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when the given set of 
            <paramref name="assemblies" /> contain multiple types that implement the same closed generic 
            version of the given <paramref name="openGenericServiceType" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when 
            <paramref name="accessibility" /> contains an invalid value.</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,SimpleInjector.Extensions.AccessibilityOption,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>
            Registers all concrete, non-generic types with the given <paramref name="accessibility" /> 
            that are located in the given <paramref name="assemblies" /> that implement the given 
            <paramref name="openGenericServiceType" /> with a transient lifetime.
            </summary>
      <remarks>
        <b>This method is not available in Silverlight.</b>
      </remarks>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="accessibility">Defines which types should be used from the given assemblies.</param>
      <param name="assemblies">A list of assemblies that will be searched.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container" />,
            <paramref name="openGenericServiceType" />, or <paramref name="assemblies" /> contain a null
            reference (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="openGenericServiceType" /> is not
            an open generic type.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when the given set of 
            <paramref name="assemblies" /> contain multiple types that implement the same 
            closed generic version of the given <paramref name="openGenericServiceType" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when 
            <paramref name="accessibility" /> contains an invalid value.</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,SimpleInjector.Extensions.AccessibilityOption,SimpleInjector.Lifestyle,System.Reflection.Assembly[])">
      <summary>
            Registers  all concrete, non-generic types with the given <paramref name="accessibility" />
            that are located in the given <paramref name="assemblies" /> that implement the given 
            <paramref name="openGenericServiceType" /> with the supplied <paramref name="lifestyle" />.
            When a found type implements multiple 
            closed-generic versions of the given <paramref name="openGenericServiceType" />, both closed-generic
            service types will point at the same registration and return the same instance based on the caching
            behavior of the supplied <paramref name="lifestyle" />.
            </summary>
      <remarks>
        <b>This method is not available in Silverlight.</b>
      </remarks>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="accessibility">Defines which types should be used from the given assemblies.</param>
      <param name="lifestyle">The lifestyle that will be used for the registration of the types.</param>
      <param name="assemblies">A list of assemblies that will be searched.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container" />,
            <paramref name="openGenericServiceType" />, <paramref name="lifestyle" /> or 
            <paramref name="assemblies" /> contain a null reference (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="openGenericServiceType" /> is not
            an open generic type.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when the given set of 
            <paramref name="assemblies" /> contain multiple types that implement the same closed generic 
            version of the given <paramref name="openGenericServiceType" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when 
            <paramref name="accessibility" /> contains an invalid value.</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,SimpleInjector.Extensions.AccessibilityOption,SimpleInjector.Lifestyle,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>
            Registers all concrete, non-generic types with the given <paramref name="accessibility" /> 
            that are located in the given <paramref name="assemblies" /> that implement the given 
            <paramref name="openGenericServiceType" /> with the supplied <paramref name="lifestyle" />.
            When a found type implements multiple 
            closed-generic versions of the given <paramref name="openGenericServiceType" />, both closed-generic
            service types will point at the same registration and return the same instance based on the caching
            behavior of the supplied <paramref name="lifestyle" />.
            </summary>
      <remarks>
        <b>This method is not available in Silverlight.</b>
      </remarks>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="accessibility">Defines which types should be used from the given assemblies.</param>
      <param name="lifestyle">The lifestyle that will be used for the registration of the types.</param>
      <param name="assemblies">A list of assemblies that will be searched.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container" />,
            <paramref name="openGenericServiceType" />, <paramref name="lifestyle" /> or 
            <paramref name="assemblies" /> contain a null reference (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="openGenericServiceType" /> is not
            an open generic type.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when the given set of 
            <paramref name="assemblies" /> contain multiple types that implement the same 
            closed generic version of the given <paramref name="openGenericServiceType" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when 
            <paramref name="accessibility" /> contains an invalid value.</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,SimpleInjector.Extensions.AccessibilityOption,SimpleInjector.Extensions.BatchRegistrationCallback,System.Reflection.Assembly[])">
      <summary>
            Allows registration of all concrete, non-generic types with the given 
            <paramref name="accessibility" /> that are located in the given set of <paramref name="assemblies" /> 
            that implement the given <paramref name="openGenericServiceType" />, by supplying a 
            <see cref="T:SimpleInjector.Extensions.BatchRegistrationCallback" /> delegate, that will be called for each found closed generic 
            implementation of the given <paramref name="openGenericServiceType" />.
            </summary>
      <remarks>
        <b>This method is not available in Silverlight.</b>
      </remarks>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="accessibility">Defines which types should be used from the given assemblies.</param>
      <param name="callback">The delegate that will be called for each found closed generic version of
            the given open generic <paramref name="openGenericServiceType" /> to do the actual registration.</param>
      <param name="assemblies">A list of assemblies that will be searched.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container" />,
            <paramref name="openGenericServiceType" />, <paramref name="callback" />, or 
            <paramref name="assemblies" /> contain a null reference (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="openGenericServiceType" /> is not
            an open generic type.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when 
            <paramref name="accessibility" /> contains an invalid value.</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,SimpleInjector.Extensions.AccessibilityOption,SimpleInjector.Extensions.BatchRegistrationCallback,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>
            Allows registration of all concrete, non-generic types with the given 
            <paramref name="accessibility" /> that are located in the given set of <paramref name="assemblies" /> 
            that implement the given <paramref name="openGenericServiceType" />, by supplying a 
            <see cref="T:SimpleInjector.Extensions.BatchRegistrationCallback" /> delegate, that will be called for each found closed generic 
            implementation of the given <paramref name="openGenericServiceType" />.
            </summary>
      <remarks>
        <b>This method is not available in Silverlight.</b>
      </remarks>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="accessibility">Defines which types should be used from the given assemblies.</param>
      <param name="callback">The delegate that will be called for each found closed generic version of
            the given open generic <paramref name="openGenericServiceType" /> to do the actual registration.</param>
      <param name="assemblies">A list of assemblies that will be searched.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container" />,
            <paramref name="openGenericServiceType" />, <paramref name="callback" />, or 
            <paramref name="assemblies" /> contain a null reference (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="openGenericServiceType" /> is not
            an open generic type.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when 
            <paramref name="accessibility" /> contains an invalid value.</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManySinglesForOpenGeneric(SimpleInjector.Container,System.Type,SimpleInjector.Extensions.AccessibilityOption,System.Reflection.Assembly[])">
      <summary>
            Registers  all concrete, non-generic types with the given <paramref name="accessibility" /> 
            that are located in the given <paramref name="assemblies" /> that implement the given 
            <paramref name="openGenericServiceType" /> with a singleton lifetime.
            </summary>
      <remarks>
        <b>This method is not available in Silverlight.</b>
      </remarks>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="accessibility">Defines which types should be used from the given assemblies.</param>
      <param name="assemblies">A list of assemblies that will be searched.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container" />,
            <paramref name="openGenericServiceType" />, or <paramref name="assemblies" /> contain a null
            reference (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="openGenericServiceType" /> is not
            an open generic type.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when the given set of 
            <paramref name="assemblies" /> contain multiple types that implement the same closed generic 
            version of the given <paramref name="openGenericServiceType" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when 
            <paramref name="accessibility" /> contains an invalid value.</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManySinglesForOpenGeneric(SimpleInjector.Container,System.Type,SimpleInjector.Extensions.AccessibilityOption,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>
            Registers all concrete, non-generic types with the given <paramref name="accessibility" /> 
            that are located in the given <paramref name="assemblies" /> that implement the given 
            <paramref name="openGenericServiceType" /> with a singleton lifetime.
            </summary>
      <remarks>
        <b>This method is not available in Silverlight.</b>
      </remarks>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="accessibility">Defines which types should be used from the given assemblies.</param>
      <param name="assemblies">A list of assemblies that will be searched.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container" />,
            <paramref name="openGenericServiceType" />, or <paramref name="assemblies" /> contain a null
            reference (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="openGenericServiceType" /> is not
            an open generic type.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown when the given set of 
            <paramref name="assemblies" /> contain multiple types that implement the same 
            closed generic version of the given <paramref name="openGenericServiceType" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when 
            <paramref name="accessibility" /> contains an invalid value.</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.GetTypesToRegister(System.Type,SimpleInjector.Extensions.AccessibilityOption,System.Reflection.Assembly[])">
      <summary>
            Returns all types that are located in the supplied <paramref name="assemblies" /> 
            and implement or inherit from the supplied <paramref name="openGenericServiceType" />.
            </summary>
      <remarks>
            Use this method when you need influence the types that are registered using 
            <see cref="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,System.Reflection.Assembly[])">RegisterManyForOpenGeneric</see>. 
            The <b>RegisterManyForOpenGeneric</b> overloads that take a collection of <see cref="T:System.Reflection.Assembly" /> 
            objects use this method to get the list of types that need to be registered. Instead of calling 
            such overload, you can call an overload that takes a list of <see cref="T:System.Type" /> objects and pass 
            in a filtered result from this <b>GetTypesToRegister</b> method.
            <code lang="cs"><![CDATA[
            var container = new Container();
            
            var types = OpenGenericBatchRegistrationExtensions
                .GetTypesToRegister(typeof(ICommandHandler<>), AccessibilityOption.PublicTypesOnly,
                    typeof(ICommandHandler<>).Assembly)
                .Where(type => !type.Name.EndsWith("Decorator"));
            
            container.RegisterManyForOpenGeneric(typeof(ICommandHandler<>), types);
            ]]></code>
            This example calls the <b>GetTypesToRegister</b> method to request a list of concrete implementations
            of the <b>ICommandHandler&lt;T&gt;</b> interface from the assembly of that interface. After that
            all types which name ends with 'Decorator' are filtered out. This list is supplied to an
            <see cref="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,System.Reflection.Assembly[])">RegisterManyForOpenGeneric</see>
            overload that takes a list of types to finish the
            registration.
            </remarks>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="accessibility">Defines which types should be used from the given assemblies.</param>
      <param name="assemblies">A list of assemblies that will be searched.</param>
      <returns>A list of types.</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when 
            <paramref name="accessibility" /> contains an invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="openGenericServiceType" />, or 
            <paramref name="assemblies" /> contain a null reference (Nothing in VB).</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.GetTypesToRegister(System.Type,SimpleInjector.Extensions.AccessibilityOption,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>
            Returns all types that are located in the supplied <paramref name="assemblies" /> 
            and implement or inherit from the supplied <paramref name="openGenericServiceType" />.
            </summary>
      <remarks>
            Use this method when you need influence the types that are registered using 
            <see cref="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,System.Reflection.Assembly[])">RegisterManyForOpenGeneric</see>.
            The <b>RegisterManyForOpenGeneric</b> overloads that take a collection of <see cref="T:System.Reflection.Assembly" /> 
            objects use this method to get the list of types that need to be registered. Instead of calling 
            such overload, you can call an overload that takes a list of <see cref="T:System.Type" /> objects and pass 
            in a filtered result from this <b>GetTypesToRegister</b> method.
            <code lang="cs"><![CDATA[
            var container = new Container();
            
            var types = OpenGenericBatchRegistrationExtensions
                .GetTypesToRegister(typeof(ICommandHandler<>), AccessibilityOption.PublicTypesOnly, 
                    typeof(ICommandHandler<>).Assembly)
                .Where(type => !type.Name.EndsWith("Decorator"));
            
            container.RegisterManyForOpenGeneric(typeof(ICommandHandler<>), types);
            ]]></code>
            This example calls the <b>GetTypesToRegister</b> method to request a list of concrete implementations
            of the <b>ICommandHandler&lt;T&gt;</b> interface from the assembly of that interface. After that
            all types which name ends with 'Decorator' are filtered out. This list is supplied to an
            <see cref="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,System.Reflection.Assembly[])">RegisterManyForOpenGeneric</see>
            overload that takes a list of types to finish the registration.
            </remarks>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="accessibility">Defines which types should be used from the given assemblies.</param>
      <param name="assemblies">A list of assemblies that will be searched.</param>
      <returns>A list of types.</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when 
            <paramref name="accessibility" /> contains an invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="openGenericServiceType" />, or 
            <paramref name="assemblies" /> contain a null reference (Nothing in VB).</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.GetTypesToRegister(SimpleInjector.Container,System.Type,SimpleInjector.Extensions.AccessibilityOption,System.Reflection.Assembly[])">
      <summary>
            Returns all types that are located in the supplied <paramref name="assemblies" /> 
            and implement or inherit from the supplied <paramref name="openGenericServiceType" />.
            </summary>
      <remarks>
            Use this method when you need influence the types that are registered using 
            <see cref="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,System.Reflection.Assembly[])">RegisterManyForOpenGeneric</see>. 
            The <b>RegisterManyForOpenGeneric</b> overloads that take a collection of <see cref="T:System.Reflection.Assembly" /> 
            objects use this method to get the list of types that need to be registered. Instead of calling 
            such overload, you can call an overload that takes a list of <see cref="T:System.Type" /> objects and pass 
            in a filtered result from this <b>GetTypesToRegister</b> method.
            <code lang="cs"><![CDATA[
            var container = new Container();
            
            var types = OpenGenericBatchRegistrationExtensions
                .GetTypesToRegister(typeof(ICommandHandler<>), AccessibilityOption.PublicTypesOnly,
                    typeof(ICommandHandler<>).Assembly)
                .Where(type => !type.Name.EndsWith("Decorator"));
            
            container.RegisterManyForOpenGeneric(typeof(ICommandHandler<>), types);
            ]]></code>
            This example calls the <b>GetTypesToRegister</b> method to request a list of concrete implementations
            of the <b>ICommandHandler&lt;T&gt;</b> interface from the assembly of that interface. After that
            all types which name ends with 'Decorator' are filtered out. This list is supplied to an
            <see cref="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,System.Reflection.Assembly[])">RegisterManyForOpenGeneric</see>
            overload that takes a list of types to finish the
            registration.
            </remarks>
      <param name="container">The container to use.</param>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="accessibility">Defines which types should be used from the given assemblies.</param>
      <param name="assemblies">A list of assemblies that will be searched.</param>
      <returns>A list of types.</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when 
            <paramref name="accessibility" /> contains an invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="openGenericServiceType" />, or 
            <paramref name="assemblies" /> contain a null reference (Nothing in VB).</exception>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.GetTypesToRegister(SimpleInjector.Container,System.Type,SimpleInjector.Extensions.AccessibilityOption,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>
            Returns all types that are located in the supplied <paramref name="assemblies" /> 
            and implement or inherit from the supplied <paramref name="openGenericServiceType" />.
            </summary>
      <remarks>
            Use this method when you need influence the types that are registered using 
            <see cref="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,System.Reflection.Assembly[])">RegisterManyForOpenGeneric</see>.
            The <b>RegisterManyForOpenGeneric</b> overloads that take a collection of <see cref="T:System.Reflection.Assembly" /> 
            objects use this method to get the list of types that need to be registered. Instead of calling 
            such overload, you can call an overload that takes a list of <see cref="T:System.Type" /> objects and pass 
            in a filtered result from this <b>GetTypesToRegister</b> method.
            <code lang="cs"><![CDATA[
            var container = new Container();
            
            var types = OpenGenericBatchRegistrationExtensions
                .GetTypesToRegister(typeof(ICommandHandler<>), AccessibilityOption.PublicTypesOnly, 
                    typeof(ICommandHandler<>).Assembly)
                .Where(type => !type.Name.EndsWith("Decorator"));
            
            container.RegisterManyForOpenGeneric(typeof(ICommandHandler<>), types);
            ]]></code>
            This example calls the <b>GetTypesToRegister</b> method to request a list of concrete implementations
            of the <b>ICommandHandler&lt;T&gt;</b> interface from the assembly of that interface. After that
            all types which name ends with 'Decorator' are filtered out. This list is supplied to an
            <see cref="M:SimpleInjector.Extensions.OpenGenericBatchRegistrationExtensions.RegisterManyForOpenGeneric(SimpleInjector.Container,System.Type,System.Reflection.Assembly[])">RegisterManyForOpenGeneric</see>
            overload that takes a list of types to finish the registration.
            </remarks>
      <param name="container">The container to use.</param>
      <param name="openGenericServiceType">The definition of the open generic type.</param>
      <param name="accessibility">Defines which types should be used from the given assemblies.</param>
      <param name="assemblies">A list of assemblies that will be searched.</param>
      <returns>A list of types.</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Thrown when 
            <paramref name="accessibility" /> contains an invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="openGenericServiceType" />, or 
            <paramref name="assemblies" /> contain a null reference (Nothing in VB).</exception>
    </member>
    <member name="T:SimpleInjector.Extensions.AccessibilityOption">
      <summary>Defines the accessibility of the types to search.</summary>
      <remarks>This type is not available in Silverlight.</remarks>
    </member>
    <member name="F:SimpleInjector.Extensions.AccessibilityOption.AllTypes">
      <summary>Load both public as internal types from the given assemblies.</summary>
    </member>
    <member name="F:SimpleInjector.Extensions.AccessibilityOption.PublicTypesOnly">
      <summary>Only load publicly exposed types from the given assemblies.</summary>
    </member>
    <member name="T:SimpleInjector.Extensions.OpenGenericPredicateContext">
      <summary>
            An instance of this type will be supplied to the <see cref="T:System.Predicate`1" />
            delegate that is that is supplied to the 
            <see cref="M:SimpleInjector.Extensions.OpenGenericRegistrationExtensions.RegisterOpenGeneric(SimpleInjector.Container,System.Type,System.Type,SimpleInjector.Lifestyle,System.Predicate{SimpleInjector.Extensions.OpenGenericPredicateContext})">RegisterOpenGeneric</see>
            overload that takes this delegate. This type contains information about the open generic service that is about
            to be created and it allows the user to examine the given instance to decide whether this implementation should
            be created or not.
            </summary>
      <remarks>
            Please see the 
            <see cref="M:SimpleInjector.Extensions.OpenGenericRegistrationExtensions.RegisterOpenGeneric(SimpleInjector.Container,System.Type,System.Type,SimpleInjector.Lifestyle,System.Predicate{SimpleInjector.Extensions.OpenGenericPredicateContext})">RegisterOpenGeneric</see>
            method for more information.
            </remarks>
    </member>
    <member name="P:SimpleInjector.Extensions.OpenGenericPredicateContext.ServiceType">
      <summary>Gets the closed generic service type that is to be created.</summary>
      <value>The closed generic service type.</value>
    </member>
    <member name="P:SimpleInjector.Extensions.OpenGenericPredicateContext.ImplementationType">
      <summary>Gets the closed generic implementation type that will be created by the container.</summary>
      <value>The implementation type.</value>
    </member>
    <member name="P:SimpleInjector.Extensions.OpenGenericPredicateContext.Handled">
      <summary>Gets a value indicating whether a previous <b>RegisterOpenGeneric</b> registration has already
            been applied for the given <see cref="P:SimpleInjector.Extensions.OpenGenericPredicateContext.ServiceType" />.</summary>
      <value>The indication whether the event has been handled.</value>
    </member>
    <member name="T:SimpleInjector.Extensions.OpenGenericRegistrationExtensions">
      <summary>
            Provides a set of static (Shared in Visual Basic) methods for registration of open generic service
            types in the <see cref="T:SimpleInjector.Container" />.
            </summary>
    </member>
    <member name="T:SimpleInjector.Extensions.OpenGenericRegistrationExtensions.UnregisteredOpenGenericResolver">
      <summary>Resolves a given open generic type.</summary>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericRegistrationExtensions.RegisterOpenGeneric(SimpleInjector.Container,System.Type,System.Type)">
      <summary>
            Registers that a new instance of <paramref name="openGenericImplementation" /> will be returned 
            every time a <paramref name="openGenericServiceType" /> is requested.
            </summary>
      <example>
            Please see the 
            <see cref="M:SimpleInjector.Extensions.OpenGenericRegistrationExtensions.RegisterOpenGeneric(SimpleInjector.Container,System.Type,System.Type,SimpleInjector.Lifestyle)">RegisterOpenGeneric(Container,Type,Type,Lifestyle)</see>
            overload for an example.
            </example>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic service type that can be 
            used to retrieve instances.</param>
      <param name="openGenericImplementation">The definition of the open generic implementation type
            that will be returned when a <paramref name="openGenericServiceType" /> is requested.</param>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericRegistrationExtensions.RegisterSingleOpenGeneric(SimpleInjector.Container,System.Type,System.Type)">
      <summary>
            Registers that the same instance of <paramref name="openGenericImplementation" /> will be returned 
            every time a <paramref name="openGenericServiceType" /> is requested.
            </summary>
      <example>
            Please see the 
            <see cref="M:SimpleInjector.Extensions.OpenGenericRegistrationExtensions.RegisterOpenGeneric(SimpleInjector.Container,System.Type,System.Type,SimpleInjector.Lifestyle)">RegisterOpenGeneric(Container,Type,Type,Lifestyle)</see>
            overload for an example.
            </example>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic service type that can be 
            used to retrieve instances..</param>
      <param name="openGenericImplementation">The definition of the open generic implementation type
            that will be returned when a <paramref name="openGenericServiceType" /> is requested.</param>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericRegistrationExtensions.RegisterOpenGeneric(SimpleInjector.Container,System.Type,System.Type,SimpleInjector.Lifestyle)">
      <summary>
            Registers that a closed generic instance of the supplied 
            <paramref name="openGenericImplementation" /> will be returned when a closed generic version of
            the <paramref name="openGenericServiceType" /> is requested. The instance will be cached 
            according to the specified <paramref name="lifestyle" />.
            </summary>
      <remarks>
            Types registered using the <b>RegisterOpenGeneric</b> are resolved using unregistered type
            resolution. This means that an explicit registration made for a closed generic version of the
            <paramref name="openGenericServiceType" /> always gets resolved first and the given
            <paramref name="openGenericImplementation" /> only gets resolved when there is no such registration.
            </remarks>
      <example>
            The following example shows the definition of a generic <b>IValidator&lt;T&gt;</b> interface
            and, a <b>NullValidator&lt;T&gt;</b> implementation and a specific validator for Orders.
            The registration ensures a <b>OrderValidator</b> is returned when a 
            <b>IValidator&lt;Order&gt;</b> is requested. For all requests for a 
            <b>IValidator&lt;T&gt;</b> other than a <b>IValidator&lt;Order&gt;</b>, an 
            implementation of <b>NullValidator&lt;T&gt;</b> will be returned.
            <code lang="cs"><![CDATA[
            public interface IValidator<T>
            { 
                void Validate(T instance);
            }
            
            public class NullValidator<T> : IValidator<T>
            {
                public void Validate(T instance)
                {
                }
            }
            
            public class OrderValidator : IValidator<Order>
            {
                public void Validate(Order instance)
                {
                    if (instance.Total < 0)
                    {
                        throw new ValidationException("Total can not be negative.");
                    }
                }
            }
            
            [TestMethod]
            public static void TestRegisterOpenGeneric()
            {
                // Arrange
                var container = new Container();
                
                container.Register<IValidator<Order>, OrderValidator>(Lifestyle.Transient);
                container.RegisterOpenGeneric(typeof(IValidator<>), typeof(NullValidator<>), Lifestyle.Singleton);
                
                // Act
                var orderValidator = container.GetInstance<IValidator<Order>>();
                var customerValidator = container.GetInstance<IValidator<Customer>>();
                var productValidator = container.GetInstance<IValidator<Product>>();
            
                // Assert
                Assert.IsInstanceOfType(orderValidator, typeof(OrderValidator));
                Assert.IsInstanceOfType(customerValidator, typeof(NullValidator<Customer>));
                Assert.IsInstanceOfType(productValidator, typeof(NullValidator<Product>));
            }
            ]]></code></example>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic service type that can be 
            used to retrieve instances.</param>
      <param name="openGenericImplementation">The definition of the open generic implementation type
            that will be returned when a <paramref name="openGenericServiceType" /> is requested.</param>
      <param name="lifestyle">The lifestyle that defines how returned instances are cached.</param>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericRegistrationExtensions.RegisterOpenGeneric(SimpleInjector.Container,System.Type,System.Type,SimpleInjector.Lifestyle,System.Predicate{SimpleInjector.Extensions.OpenGenericPredicateContext})">
      <summary>
            Registers that the same instance of <paramref name="openGenericImplementationType" /> will be returned 
            every time a <paramref name="openGenericServiceType" /> is requested.
            </summary>
      <example>
            Please see the 
            <see cref="M:SimpleInjector.Extensions.OpenGenericRegistrationExtensions.RegisterOpenGeneric(SimpleInjector.Container,System.Type,System.Type,SimpleInjector.Lifestyle)">RegisterOpenGeneric(Container,Type,Type,Lifestyle)</see>
            overload for an example.
            </example>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic service type that can be 
            used to retrieve instances..</param>
      <param name="openGenericImplementationType">The definition of the open generic implementation type
            that will be returned when a <paramref name="openGenericServiceType" /> is requested.</param>
      <param name="lifestyle">The lifestyle that defines how returned instances are cached.</param>
      <param name="predicate">The predicate that determines whether the 
            <paramref name="openGenericImplementationType" /> can implement the service type.</param>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericRegistrationExtensions.RegisterAllOpenGeneric(SimpleInjector.Container,System.Type,System.Type[])">
      <summary>
            Registers that instances of <paramref name="openGenericImplementations" /> will be returned 
            when a collection of <paramref name="openGenericServiceType" /> is requested. New instances of 
            the registered <paramref name="openGenericImplementations" /> will be returned whenever the
            resolved collection is itereated.
            </summary>
      <example>
            Please see the 
            <see cref="M:SimpleInjector.Extensions.OpenGenericRegistrationExtensions.RegisterAllOpenGeneric(SimpleInjector.Container,System.Type,SimpleInjector.Lifestyle,System.Collections.Generic.IEnumerable{System.Type})">RegisterAllOpenGeneric(Container,Type,Lifestyle,IEnumerable&lt;Type&gt;)</see>
            overload for an example.
            </example>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic service type that can be 
            used to retrieve instances.</param>
      <param name="openGenericImplementations">The list of open generic implementation types
            that will be returned when a collection of <paramref name="openGenericServiceType" /> is requested.
            </param>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericRegistrationExtensions.RegisterAllOpenGeneric(SimpleInjector.Container,System.Type,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Registers that instances of <paramref name="openGenericImplementations" /> will be returned 
            when a collection of <paramref name="openGenericServiceType" /> is requested. New instances of 
            the registered <paramref name="openGenericImplementations" /> will be returned whenever the
            resolved collection is itereated.
            </summary>
      <example>
            Please see the 
            <see cref="M:SimpleInjector.Extensions.OpenGenericRegistrationExtensions.RegisterAllOpenGeneric(SimpleInjector.Container,System.Type,SimpleInjector.Lifestyle,System.Collections.Generic.IEnumerable{System.Type})">RegisterAllOpenGeneric(Container,Type,Lifestyle,IEnumerable&lt;Type&gt;)</see>
            overload for an example.
            </example>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic service type that can be 
            used to retrieve instances.</param>
      <param name="openGenericImplementations">The list of open generic implementation types
            that will be returned when a collection of <paramref name="openGenericServiceType" /> is requested.
            </param>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericRegistrationExtensions.RegisterAllOpenGeneric(SimpleInjector.Container,System.Type,SimpleInjector.Lifestyle,System.Type[])">
      <summary>
            Registers that instances of <paramref name="openGenericImplementations" /> will be returned 
            when a collection of <paramref name="openGenericServiceType" /> is requested. The instances will be 
            cached according to the specified <paramref name="lifestyle" />.
            </summary>
      <example>
            Please see the 
            <see cref="M:SimpleInjector.Extensions.OpenGenericRegistrationExtensions.RegisterAllOpenGeneric(SimpleInjector.Container,System.Type,SimpleInjector.Lifestyle,System.Collections.Generic.IEnumerable{System.Type})">RegisterAllOpenGeneric(Container,Type,Lifestyle,IEnumerable&lt;Type&gt;)</see>
            overload for an example.
            </example>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic service type that can be 
            used to retrieve instances.</param>
      <param name="lifestyle">The lifestyle that defines how returned instances are cached.</param>
      <param name="openGenericImplementations">The list of open generic implementation types
            that will be returned when a collection of <paramref name="openGenericServiceType" /> is requested.
            </param>
    </member>
    <member name="M:SimpleInjector.Extensions.OpenGenericRegistrationExtensions.RegisterAllOpenGeneric(SimpleInjector.Container,System.Type,SimpleInjector.Lifestyle,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Registers that instances of <paramref name="openGenericImplementations" /> will be returned 
            when a collection of <paramref name="openGenericServiceType" /> is requested. The instances will be 
            cached according to the specified <paramref name="lifestyle" />.
            </summary>
      <remarks>
        <para>
            Collections registered using the <b>RegisterAllOpenGeneric</b> are resolved using unregistered type
            resolution. This means that an explicit registration made for a collection of the closed generic 
            version of the <paramref name="openGenericServiceType" /> always gets resolved first and a 
            collection of <paramref name="openGenericImplementations" /> only gets resolved when there is no 
            such registration.
            </para>
      </remarks>
      <example>
            The following example shows the definition of a generic <b>IValidator&lt;T&gt;</b> interface
            and, a <b>NullValidator&lt;T&gt;</b> implementation and a specific validator for Orders.
            The registration ensures a <b>OrderValidator</b> is returned when a 
            <b>IValidator&lt;Order&gt;</b> is requested. For all requests for a 
            <b>IValidator&lt;T&gt;</b> other than a <b>IValidator&lt;Order&gt;</b>, an 
            implementation of <b>NullValidator&lt;T&gt;</b> will be returned.
            <code lang="cs"><![CDATA[
            public interface IValidator<T>
            { 
                void Validate(T instance);
            }
            
            public class DefaultValidator<T> : IValidator<T>
            {
                public void Validate(T instance)
                {
                    // some default validation
                }
            }
            
            [TestMethod]
            public static void TestRegisterAllOpenGeneric()
            {
                // Arrange
                var container = new Container();
                
                Type[] types = new[] { typeof(OrderValidator), typeof(DefaultValidator<>) };
                
                container.RegisterManyForOpenGeneric(typeof(IValidator<>),
                    (serviceType, implementationTypes) => container.RegisterAll(serviceType, implementationTypes), 
                    types);
                
                container.RegisterAllOpenGeneric(typeof(IValidator<>), typeof(DefaultValidator<>));
                
                // Act
                var orderValidators = container.GetAllInstances<IValidator<Order>>();
                var customerValidators = container.GetAllInstances<IValidator<Customer>>();
            
                // Assert
                Assert.IsTrue(orderValidators.SequenceEqual(
                    new[] { typeof(OrderValidator), typeof(DefaultValidator<Order>) }));
                
                // Without the call to RegisterAllOpenGeneric this customerValidators would be empty.
                Assert.IsTrue(customerValidators.SequenceEqual(new[] { typeof(DefaultValidator<Customer>) }));
            }
            ]]></code></example>
      <param name="container">The container to make the registrations in.</param>
      <param name="openGenericServiceType">The definition of the open generic service type that can be 
            used to retrieve instances.</param>
      <param name="lifestyle">The lifestyle that defines how returned instances are cached.</param>
      <param name="openGenericImplementations">The list of open generic implementation types
            that will be returned when a collection of <paramref name="openGenericServiceType" /> is requested.
            </param>
    </member>
    <member name="T:SimpleInjector.Extensions.TypeConstraintValidator">
      <summary>
            Allows validating an ArgumentMapping.
            </summary>
    </member>
    <member name="T:SimpleInjector.Lifestyle">
      <summary>
            Instances returned from the container can be cached. The <see cref="T:SimpleInjector.Container" /> contains several
            overloads of the <b>Register</b> method that take a <b>Lifestyle</b> instance as argument to define 
            how returned instances should be cached. The core library contains two lifestyles out of the box. By
            supplying <see cref="F:SimpleInjector.Lifestyle.Transient">Lifestyle.Transient</see>, the registered instance is not
            cached; a new instance is returned every time it is requested or injected. By supplying
            <see cref="F:SimpleInjector.Lifestyle.Singleton">Lifestyle.Singleton</see> instances can be cached indefinately; only
            a single instance of the registered component will be returned by that container instance. Other
            lifestyles are defined in integration and extension packages. The 
            <see cref="M:SimpleInjector.Lifestyle.CreateCustom(System.String,SimpleInjector.CreateLifestyleApplier)">CreateCustom</see> method allows defining a custom lifestyle and 
            the <see cref="M:SimpleInjector.Lifestyle.CreateHybrid(System.Func{System.Boolean},SimpleInjector.Lifestyle,SimpleInjector.Lifestyle)">CreateHybrid</see> method 
            allows creating a lifestle that mixes multiple other lifestyles.
            </summary>
      <remarks>
            This type is abstract and can be overridden to implement a custom lifestyle.
            </remarks>
    </member>
    <member name="F:SimpleInjector.Lifestyle.Transient">
      <summary>
            The lifestyle instance that doesn't cache instances. A new instance of the specified
            component is created every time the registered service it is requested or injected.
            </summary>
      <example>
            The following example registers the <c>SomeServiceImpl</c> implementation for the
            <c>ISomeService</c> service type using the <b>Transient</b> lifestyle:
            <code lang="cs"><![CDATA[
            var container = new Container();
            
            container.Register<ISomeService, SomeServiceImpl>(Lifestyle.Transient);
            ]]></code>
            Note that <b>Transient</b> is the default lifestyle, the previous registration can be reduced to
            the following:
            <code lang="cs"><![CDATA[
            var container = new Container();
            
            // Transient registration.
            container.Register<ISomeService, SomeServiceImpl>();
            ]]></code></example>
    </member>
    <member name="F:SimpleInjector.Lifestyle.Singleton">
      <summary>
            The lifestyle that caches components during the lifetime of the <see cref="T:SimpleInjector.Container" /> instance
            and guarantees that only a single instance of that component is created for that instance. Since
            general use is to create a single <b>Container</b> instance for the lifetime of the application /
            AppDomain, this would mean that only a single instance of that component would exist during the
            lifetime of the application. In a multi-threaded applications, implementations registered using 
            this lifestyle must be thread-safe.
            </summary>
      <example>
            The following example registers the <c>RealTimeProvider</c> implementation for the
            <c>ITimeProvider</c> service type using the <b>Singleton</b> lifestyle:
            <code lang="cs"><![CDATA[
            var container = new Container();
            
            container.Register<ITimeProvider, RealTimeProvider>(Lifestyle.Singleton);
            ]]></code>
            Note that using the 
            <see cref="M:SimpleInjector.Container.RegisterSingle``2">RegisterSingle</see> method has 
            the same effect:
            <code lang="cs"><![CDATA[
            var container = new Container();
            
            // Singleton registration.
            container.RegisterSingle<ITimeProvider, RealTimeProvider>();
            ]]></code></example>
    </member>
    <member name="M:SimpleInjector.Lifestyle.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:SimpleInjector.Lifestyle" /> class.</summary>
      <param name="name">The user friendly name of this lifestyle.</param>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="name" /> is null (Nothing in VB) 
            or an empty string.</exception>
    </member>
    <member name="M:SimpleInjector.Lifestyle.CreateHybrid(System.Func{System.Boolean},SimpleInjector.Lifestyle,SimpleInjector.Lifestyle)">
      <summary>
            The hybrid lifestyle allows mixing two lifestyles in a single registration. Based on the supplied
            <paramref name="lifestyleSelector" /> delegate the hybrid lifestyle will redirect the creation of 
            the instance to the correct lifestyle. The result of the <paramref name="lifestyleSelector" /> 
            delegate will not be cached; it is invoked each time an instance is requested or injected. By 
            nesting hybrid lifestyles, any number of lifestyles can be mixed.
            </summary>
      <param name="lifestyleSelector">The <see cref="T:System.Func`1" /> delegate that determines which 
            lifestyle should be used. The <paramref name="trueLifestyle" /> will be used if <b>true</b> is 
            returned; the <paramref name="falseLifestyle" /> otherwise. This delegate will be called every
            time an instance needs to be resolved or injected.</param>
      <param name="trueLifestyle">The lifestyle to use when <paramref name="lifestyleSelector" /> 
            returns <b>true</b>.</param>
      <param name="falseLifestyle">The lifestyle to use when <paramref name="lifestyleSelector" /> 
            returns <b>false</b>.</param>
      <returns>A new hybrid lifestyle that wraps the supplied lifestyles.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown when one of the supplied arguments is a null
            reference (Nothing in VB).</exception>
      <example>
        <para>
            The following example shows the creation of a <b>HybridLifestyle</b> that mixes an 
            <b>WebRequestLifestyle</b> and <b>LifetimeScopeLifestyle</b>:
            </para>
        <code lang="cs"><![CDATA[
            // NOTE: WebRequestLifestyle is located in SimpleInjector.Integration.Web.dll.
            // NOTE: LifetimeScopeLifestyle is located in SimpleInjector.Extensions.LifetimeScoping.dll.
            var mixedScopeLifestyle = Lifestyle.CreateHybrid(
                () => HttpContext.Current != null,
                new WebRequestLifestyle(),
                new LifetimeScopeLifestyle());
            
            // The created lifestyle can be reused for many registrations.
            container.Register<IUserRepository, SqlUserRepository>(mixedScopeLifestyle);
            container.Register<ICustomerRepository, SqlCustomerRepository>(mixedScopeLifestyle);
            ]]></code>
        <para>
            Hybrid lifestyles can be nested:
            </para>
        <code lang="cs"><![CDATA[
            var mixedLifetimeTransientLifestyle = Lifestyle.CreateHybrid(
                () => container.GetCurrentLifetimeScope() != null,
                new LifetimeScopeLifestyle(),
                Lifestyle.Transient);
            
            var mixedScopeLifestyle = Lifestyle.CreateHybrid(
                () => HttpContext.Current != null,
                new WebRequestLifestyle(),
                mixedLifetimeTransientLifestyle);
            ]]></code>
        <para>
            The <b>mixedScopeLifestyle</b> now mixed three lifestyles: Web Request, Lifetime Scope and 
            Transient.
            </para>
      </example>
    </member>
    <member name="M:SimpleInjector.Lifestyle.CreateHybrid(System.Func{System.Boolean},SimpleInjector.ScopedLifestyle,SimpleInjector.ScopedLifestyle)">
      <summary>
            The hybrid lifestyle allows mixing two lifestyles in a single registration. Based on the supplied
            <paramref name="lifestyleSelector" /> delegate the hybrid lifestyle will redirect the creation of 
            the instance to the correct lifestyle. The result of the <paramref name="lifestyleSelector" /> 
            delegate will not be cached; it is invoked each time an instance is requested or injected. By 
            nesting hybrid lifestyles, any number of lifestyles can be mixed.
            </summary>
      <param name="lifestyleSelector">The <see cref="T:System.Func`1" /> delegate that determines which 
            lifestyle should be used. The <paramref name="trueLifestyle" /> will be used if <b>true</b> is 
            returned; the <paramref name="falseLifestyle" /> otherwise. This delegate will be called every
            time an instance needs to be resolved or injected.</param>
      <param name="trueLifestyle">The scoped lifestyle to use when <paramref name="lifestyleSelector" /> 
            returns <b>true</b>.</param>
      <param name="falseLifestyle">The scoped lifestyle to use when <paramref name="lifestyleSelector" /> 
            returns <b>false</b>.</param>
      <returns>A new scoped hybrid lifestyle that wraps the supplied lifestyles.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown when one of the supplied arguments is a null
            reference (Nothing in VB).</exception>
      <example>
        <para>
            The following example shows the creation of a <b>HybridLifestyle</b> that mixes an 
            <b>WebRequestLifestyle</b> and <b>LifetimeScopeLifestyle</b>:
            </para>
        <code lang="cs"><![CDATA[
            // NOTE: WebRequestLifestyle is located in SimpleInjector.Integration.Web.dll.
            // NOTE: LifetimeScopeLifestyle is located in SimpleInjector.Extensions.LifetimeScoping.dll.
            var mixedScopeLifestyle = Lifestyle.CreateHybrid(
                () => HttpContext.Current != null,
                new WebRequestLifestyle(),
                new LifetimeScopeLifestyle());
            
            // The created lifestyle can be reused for many registrations.
            container.Register<IUserRepository, SqlUserRepository>(mixedScopeLifestyle);
            container.Register<ICustomerRepository, SqlCustomerRepository>(mixedScopeLifestyle);
            ]]></code>
      </example>
    </member>
    <member name="M:SimpleInjector.Lifestyle.CreateCustom(System.String,SimpleInjector.CreateLifestyleApplier)">
      <summary>
            Creates a custom lifestyle using the supplied <paramref name="lifestyleApplierFactory" /> delegate.
            </summary>
      <remarks>
            The supplied <paramref name="lifestyleApplierFactory" /> will be called just once per registered 
            service. The supplied <paramref name="lifestyleApplierFactory" /> will be called by the framework
            when the type is resolved for the first time, and the framework will supply the factory with a
            <b>Func&lt;object&gt;</b> for creating new (transient) instances of that type (that might
            have been <see cref="E:SimpleInjector.Container.ExpressionBuilding">intercepted</see> and
            <see cref="M:SimpleInjector.Container.RegisterInitializer``1(System.Action{``0})">initializers</see> might have been applied). 
            It is the job of the <paramref name="lifestyleApplierFactory" /> to return a <b>Func&lt;object&gt;</b>
            that applies the proper caching. The <b>Func&lt;object&gt;</b> that is returned by the 
            <paramref name="lifestyleApplierFactory" /> will be stored for that registration (every 
            registration will store its own <b>Func&lt;object&gt;</b> delegate) and this delegate will be
            called everytime the service is resolved (by calling 
            <code>container.GetInstance&lt;TService&gt;</code> or when that service is injected into another
            type). 
            </remarks>
      <param name="name">The name of the lifestyle to create. The name is used to display the lifestyle
            in the debugger.</param>
      <param name="lifestyleApplierFactory">A factory delegate that takes a <b>Func&lt;object&gt;</b> delegate
            that will produce a transient instance and returns a delegate that returns cached instances.</param>
      <returns>A new <see cref="T:SimpleInjector.Lifestyle" />.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown when one of the arguments is a null reference
            (Nothing in VB).</exception>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="name" /> is an empty string.</exception>
      <example>
            The following example shows the creation of a lifestyle that caches registered instances for 10
            minutes:
            <code lang="cs"><![CDATA[
            var customLifestyle = Lifestyle.CreateCustom("Absolute 10 Minute Expiration", instanceCreator =>
            {
                TimeSpan timeout = TimeSpan.FromMinutes(10);
                var syncRoot = new object();
                var expirationTime = DateTime.MinValue;
                object instance = null;
            
                // If the application has multiple registrations using this lifestyle, each registration
                // will get its own Func<object> delegate (created here) and therefore get its own set
                // of variables as defined above.
                return () =>
                {
                    lock (syncRoot)
                    {
                        if (expirationTime < DateTime.UtcNow)
                        {
                            instance = instanceCreator();
                            expirationTime = DateTime.UtcNow.Add(timeout);
                        }
            
                        return instance;
                    }
                };
            });
            
            var container = new Container();
            
            // We can reuse the created lifestyle for multiple registrations.
            container.Register<IService, MyService>(customLifestyle);
            container.Register<AnotherService, MeTwoService>(customLifestyle);
            ]]></code></example>
    </member>
    <member name="M:SimpleInjector.Lifestyle.CreateProducer``2(SimpleInjector.Container)">
      <summary>
            Creates a new <see cref="T:SimpleInjector.InstanceProducer" /> instance for the given <typeparamref name="TService" />
            that will create new instances of specified <typeparamref name="TImplementation" /> with the 
            caching as specified by this lifestyle.
            </summary>
      <typeparam name="TService">The interface or base type that can be used to retrieve the instances.</typeparam>
      <typeparam name="TImplementation">The concrete type that will be created.</typeparam>
      <param name="container">The <see cref="T:SimpleInjector.Container" /> instance for which a 
            <see cref="T:SimpleInjector.InstanceProducer" /> must be created.</param>
      <returns>A new <see cref="T:SimpleInjector.InstanceProducer" /> instance.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container" /> is a null
            reference (Nothing in VB).</exception>
    </member>
    <member name="M:SimpleInjector.Lifestyle.CreateProducer``1(System.Func{``0},SimpleInjector.Container)">
      <summary>
            Creates a new <see cref="T:SimpleInjector.InstanceProducer" /> instance for the given <typeparamref name="TService" />
            that will create new instances instance using the supplied <paramref name="instanceCreator" /> 
            with the caching as specified by this lifestyle.
            </summary>
      <typeparam name="TService">The interface or base type that can be used to retrieve the instances.</typeparam>
      <param name="instanceCreator">A delegate that will create a new instance of 
            <typeparamref name="TService" /> every time it is called.</param>
      <param name="container">The <see cref="T:SimpleInjector.Container" /> instance for which a 
            <see cref="T:SimpleInjector.InstanceProducer" /> must be created.</param>
      <returns>A new <see cref="T:SimpleInjector.InstanceProducer" /> instance.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown when either <paramref name="instanceCreator" /> or
            <paramref name="container" /> are null references (Nothing in VB).</exception>
    </member>
    <member name="M:SimpleInjector.Lifestyle.CreateProducer(System.Type,System.Type,SimpleInjector.Container)">
      <summary>
            Creates a new <see cref="T:SimpleInjector.InstanceProducer" /> instance for the given <paramref name="serviceType" />
            that will create new instances of specified <paramref name="implementationType" /> with the 
            caching as specified by this lifestyle.
            </summary>
      <param name="serviceType">The interface or base type that can be used to retrieve the instances.</param>
      <param name="implementationType">The concrete type that will be registered.</param>
      <param name="container">The <see cref="T:SimpleInjector.Container" /> instance for which a 
            <see cref="T:SimpleInjector.Registration" /> must be created.</param>
      <returns>A new <see cref="T:SimpleInjector.InstanceProducer" /> instance.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown when on of the supplied arguments is a null 
            reference (Nothing in VB).</exception>
    </member>
    <member name="M:SimpleInjector.Lifestyle.CreateRegistration``1(SimpleInjector.Container)">
      <summary>
            Creates a new <see cref="T:SimpleInjector.Registration" /> instance defining the creation of the
            specified <typeparamref name="TConcrete" /> with the caching as specified by this lifestyle.
            </summary>
      <typeparam name="TConcrete">The concrete type that will be registered.</typeparam>
      <param name="container">The <see cref="T:SimpleInjector.Container" /> instance for which a 
            <see cref="T:SimpleInjector.Registration" /> must be created.</param>
      <returns>A new <see cref="T:SimpleInjector.Registration" /> instance.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container" /> is a null
            reference (Nothing in VB).</exception>
    </member>
    <member name="M:SimpleInjector.Lifestyle.CreateRegistration``2(SimpleInjector.Container)">
      <summary>
            Creates a new <see cref="T:SimpleInjector.Registration" /> instance defining the creation of the
            specified <typeparamref name="TImplementation" /> with the caching as specified by this lifestyle.
            </summary>
      <typeparam name="TService">The interface or base type that can be used to retrieve the instances.</typeparam>
      <typeparam name="TImplementation">The concrete type that will be created.</typeparam>
      <param name="container">The <see cref="T:SimpleInjector.Container" /> instance for which a 
            <see cref="T:SimpleInjector.Registration" /> must be created.</param>
      <returns>A new <see cref="T:SimpleInjector.Registration" /> instance.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="container" /> is a null
            reference (Nothing in VB).</exception>
    </member>
    <member name="M:SimpleInjector.Lifestyle.CreateRegistration``1(System.Func{``0},SimpleInjector.Container)">
      <summary>
            Creates a new <see cref="T:SimpleInjector.Registration" /> instance defining the creation of the
            specified <typeparamref name="TService" /> using the supplied <paramref name="instanceCreator" /> 
            with the caching as specified by this lifestyle.
            </summary>
      <typeparam name="TService">The interface or base type that can be used to retrieve the instances.</typeparam>
      <param name="instanceCreator">A delegate that will create a new instance of 
            <typeparamref name="TService" /> every time it is called.</param>
      <param name="container">The <see cref="T:SimpleInjector.Container" /> instance for which a 
            <see cref="T:SimpleInjector.Registration" /> must be created.</param>
      <returns>A new <see cref="T:SimpleInjector.Registration" /> instance.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown when either <paramref name="instanceCreator" /> or
            <paramref name="container" /> are null references (Nothing in VB).</exception>
    </member>
    <member name="M:SimpleInjector.Lifestyle.CreateRegistration(System.Type,SimpleInjector.Container)">
      <summary>
            Creates a new <see cref="T:SimpleInjector.Registration" /> instance defining the creation of the
            specified <paramref name="concreteType" /> with the caching as specified by this lifestyle.
            This method might fail when run in a partial trust sandbox when <paramref name="concreteType" />
            is an internal type.
            </summary>
      <param name="concreteType">The concrete type that will be registered.</param>
      <param name="container">The <see cref="T:SimpleInjector.Container" /> instance for which a 
            <see cref="T:SimpleInjector.Registration" /> must be created.</param>
      <returns>A new <see cref="T:SimpleInjector.Registration" /> instance.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown when on of the supplied arguments is a null 
            reference (Nothing in VB).</exception>
    </member>
    <member name="M:SimpleInjector.Lifestyle.CreateRegistration(System.Type,System.Type,SimpleInjector.Container)">
      <summary>
            Creates a new <see cref="T:SimpleInjector.Registration" /> instance defining the creation of the
            specified <paramref name="implementationType" /> with the caching as specified by this lifestyle.
            This method might fail when run in a partial trust sandbox when <paramref name="implementationType" />
            is an internal type.
            </summary>
      <param name="serviceType">The interface or base type that can be used to retrieve the instances.</param>
      <param name="implementationType">The concrete type that will be registered.</param>
      <param name="container">The <see cref="T:SimpleInjector.Container" /> instance for which a 
            <see cref="T:SimpleInjector.Registration" /> must be created.</param>
      <returns>A new <see cref="T:SimpleInjector.Registration" /> instance.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown when on of the supplied arguments is a null 
            reference (Nothing in VB).</exception>
    </member>
    <member name="M:SimpleInjector.Lifestyle.CreateRegistration(System.Type,System.Func{System.Object},SimpleInjector.Container)">
      <summary>
            Creates a new <see cref="T:SimpleInjector.Registration" /> instance defining the creation of the
            specified <paramref name="serviceType" />  using the supplied <paramref name="instanceCreator" /> 
            with the caching as specified by this lifestyle.
            </summary>
      <param name="serviceType">The interface or base type that can be used to retrieve the instances.</param>
      <param name="instanceCreator">The delegate that will be responsible for creating new instances.</param>
      <param name="container">The <see cref="T:SimpleInjector.Container" /> instance for which a 
            <see cref="T:SimpleInjector.Registration" /> must be created.</param>
      <returns>A new <see cref="T:SimpleInjector.Registration" /> instance.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown when on of the supplied arguments is a null 
            reference (Nothing in VB).</exception>
    </member>
    <member name="M:SimpleInjector.Lifestyle.CreateRegistrationCore``2(SimpleInjector.Container)">
      <summary>
            When overridden in a derived class, 
            creates a new <see cref="T:SimpleInjector.Registration" /> instance defining the creation of the
            specified <typeparamref name="TImplementation" /> with the caching as specified by this lifestyle.
            </summary>
      <typeparam name="TService">The interface or base type that can be used to retrieve the instances.</typeparam>
      <typeparam name="TImplementation">The concrete type that will be registered.</typeparam>
      <param name="container">The <see cref="T:SimpleInjector.Container" /> instance for which a 
            <see cref="T:SimpleInjector.Registration" /> must be created.</param>
      <returns>A new <see cref="T:SimpleInjector.Registration" /> instance.</returns>
      <remarks>
            If you are implementing your own lifestyle, override this method to implement the code necessary 
            to create and return a new <see cref="T:SimpleInjector.Registration" />. Note that you should <b>always</b> create
            a new <see cref="T:SimpleInjector.Registration" /> instance. They should never be cached.
            </remarks>
    </member>
    <member name="M:SimpleInjector.Lifestyle.CreateRegistrationCore``1(System.Func{``0},SimpleInjector.Container)">
      <summary>
            When overridden in a derived class, 
            creates a new <see cref="T:SimpleInjector.Registration" /> instance defining the creation of the
            specified <typeparamref name="TService" /> using the supplied <paramref name="instanceCreator" /> 
            with the caching as specified by this lifestyle.
            </summary>
      <typeparam name="TService">The interface or base type that can be used to retrieve the instances.</typeparam>
      <param name="instanceCreator">A delegate that will create a new instance of 
            <typeparamref name="TService" /> every time it is called.</param>
      <param name="container">The <see cref="T:SimpleInjector.Container" /> instance for which a 
            <see cref="T:SimpleInjector.Registration" /> must be created.</param>
      <returns>A new <see cref="T:SimpleInjector.Registration" /> instance.</returns>
      <remarks>
            If you are implementing your own lifestyle, override this method to implement the code necessary 
            to create and return a new <see cref="T:SimpleInjector.Registration" />. Note that you should <b>always</b> create
            a new <see cref="T:SimpleInjector.Registration" /> instance. They should never be cached.
            </remarks>
    </member>
    <member name="P:SimpleInjector.Lifestyle.Name">
      <summary>Gets the user friendly name of this lifestyle.</summary>
      <value>The user friendly name of this lifestyle.</value>
    </member>
    <member name="P:SimpleInjector.Lifestyle.Length">
      <summary>
            Gets the length of the lifestyle. Implementers must implement this property. The diagnostic
            services use this value to compare lifestyles with each other to determine lifestyle 
            misconfigurations.
            </summary>
      <value>The <see cref="T:System.Int32" /> representing the length of this lifestyle.</value>
    </member>
    <member name="T:SimpleInjector.Advanced.KnownRelationship">
      <summary>
            A known relationship defines a relationship between two types. The Diagnostics Debug View uses this
            information to spot possible misconfigurations. 
            </summary>
    </member>
    <member name="M:SimpleInjector.Advanced.KnownRelationship.#ctor(System.Type,SimpleInjector.Lifestyle,SimpleInjector.InstanceProducer)">
      <summary>Initializes a new instance of the <see cref="T:SimpleInjector.Advanced.KnownRelationship" /> class.</summary>
      <param name="implementationType">The implementation type of the parent type.</param>
      <param name="lifestyle">The lifestyle of the parent type.</param>
      <param name="dependency">The type that the parent depends on (it is injected into the parent).</param>
    </member>
    <member name="M:SimpleInjector.Advanced.KnownRelationship.GetHashCode">
      <summary>Serves as a hash function for a particular type.</summary>
      <returns>A hash code for the current <see cref="T:SimpleInjector.Advanced.KnownRelationship" />.</returns>
    </member>
    <member name="M:SimpleInjector.Advanced.KnownRelationship.Equals(SimpleInjector.Advanced.KnownRelationship)">
      <summary>
            Determines whether the specified <see cref="T:SimpleInjector.Advanced.KnownRelationship" /> is equal to the current 
            <see cref="T:SimpleInjector.Advanced.KnownRelationship" />.
            </summary>
      <param name="other">The object to compare with the current object.</param>
      <returns>True if the specified <see cref="T:SimpleInjector.Advanced.KnownRelationship" /> is equal to the current 
            <see cref="T:SimpleInjector.Advanced.KnownRelationship" />; otherwise, false.</returns>
    </member>
    <member name="P:SimpleInjector.Advanced.KnownRelationship.ImplementationType">
      <summary>Gets the implementation type of the parent type of the relationship.</summary>
      <value>The implementation type of the parent type of the relationship.</value>
    </member>
    <member name="P:SimpleInjector.Advanced.KnownRelationship.Lifestyle">
      <summary>Gets the lifestyle of the parent type of the relationship.</summary>
      <value>The lifestyle of the parent type of the relationship.</value>
    </member>
    <member name="P:SimpleInjector.Advanced.KnownRelationship.Dependency">
      <summary>Gets the type that the parent depends on (it is injected into the parent).</summary>
      <value>The type that the parent depends on.</value>
    </member>
    <member name="T:SimpleInjector.CreateLifestyleApplier">
      <summary>
            Factory for the creation of a delegate that applies caching to the supplied 
            <paramref name="transientInstanceCreator" />.
            </summary>
      <param name="transientInstanceCreator">A factory for creating new instances.</param>
      <returns>A factory that returns cached instances.</returns>
    </member>
    <member name="T:SimpleInjector.ScopedLifestyle">
      <summary>
            Base class for scoped lifestyles. A scoped lifestyle caches instances for the duration of an implicitly
            or explicitly defined scope. Such scope can be an (implicitly defined) web request or an explicitly
            defined Lifetime Scope. The lifetime of instances registered with a scoped lifestyle is always equal
            or bigger than one-instance-per-object-graph. In other words, a call to GetInstance() will never create
            more than one instance of such registered type.
            </summary>
    </member>
    <member name="M:SimpleInjector.ScopedLifestyle.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:SimpleInjector.ScopedLifestyle" /> class.</summary>
      <param name="name">The user friendly name of this lifestyle.</param>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="name" /> is null (Nothing in VB) 
            or an empty string.</exception>
    </member>
    <member name="M:SimpleInjector.ScopedLifestyle.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:SimpleInjector.ScopedLifestyle" /> class.</summary>
      <param name="name">The user friendly name of this lifestyle.</param>
      <param name="disposeInstances">Signals the lifestyle whether instances should be
            disposed or not.</param>
      <exception cref="T:System.ArgumentException">Thrown when <paramref name="name" /> is null (Nothing in VB) 
            or an empty string.</exception>
    </member>
    <member name="M:SimpleInjector.ScopedLifestyle.WhenScopeEnds(SimpleInjector.Container,System.Action)">
      <summary>
            Allows registering an <paramref name="action" /> delegate that will be called when the scope ends,
            but before the scope disposes any instances.
            </summary>
      <remarks>
            During the call to <see cref="M:SimpleInjector.Scope.Dispose" /> all registered <see cref="T:System.Action" /> delegates are
            processed in the order of registration. Do note that registered actions <b>are not guaranteed
            to run</b>. In case an exception is thrown during the call to <see cref="M:SimpleInjector.Scope.Dispose" />, the 
            <see cref="T:SimpleInjector.Scope" /> will stop running any actions that might not have been invoked at that point. 
            Instances that are registered for disposal using <see cref="M:SimpleInjector.ScopedLifestyle.RegisterForDisposal(SimpleInjector.Container,System.IDisposable)" /> on the other
            hand, are guaranteed to be disposed. Note that registered actions won't be invoked during a call
            to <see cref="M:SimpleInjector.Container.Verify" />.
            </remarks>
      <param name="container">The <see cref="T:SimpleInjector.Container" /> instance.</param>
      <param name="action">The delegate to run when the scope ends.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when one of the arguments is a null reference
            (Nothing in VB).</exception>
      <exception cref="T:System.InvalidOperationException">Will be thrown when there is currently no active
            scope for the supplied <paramref name="container" />.</exception>
    </member>
    <member name="M:SimpleInjector.ScopedLifestyle.RegisterForDisposal(SimpleInjector.Container,System.IDisposable)">
      <summary>
            Adds the <paramref name="disposable" /> to the list of items that will get disposed when the
            scope ends.
            </summary>
      <remarks>
            Note to implementers: Instances registered for disposal will have to be disposed in the opposite
            order of registration, since disposable components might still need to call disposable dependencies
            in their Dispose() method.
            </remarks>
      <param name="container">The <see cref="T:SimpleInjector.Container" /> instance.</param>
      <param name="disposable">The instance that should be disposed when the scope ends.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when one of the arguments is a null reference
            (Nothing in VB).</exception>
      <exception cref="T:System.InvalidOperationException">Will be thrown when there is currently no active
            scope for the supplied <paramref name="container" />.</exception>
    </member>
    <member name="M:SimpleInjector.ScopedLifestyle.GetCurrentScope(SimpleInjector.Container)">
      <summary>
            Returns the current <see cref="T:SimpleInjector.Scope" /> for this lifestyle and the given 
            <paramref name="container" />, or null when this method is executed outside the context of a scope.
            </summary>
      <param name="container">The container instance that is related to the scope to return.</param>
      <returns>A <see cref="T:SimpleInjector.Scope" /> instance or null when there is no scope active in this context.</returns>
    </member>
    <member name="M:SimpleInjector.ScopedLifestyle.CreateCurrentScopeProvider(SimpleInjector.Container)">
      <summary>
            Creates a delegate that that upon invocation return the current <see cref="T:SimpleInjector.Scope" /> for this
            lifestyle and the given <paramref name="container" />, or null when the delegate is executed outside
            the context of such scope.
            </summary>
      <param name="container">The container for which the delegate gets created.</param>
      <returns>A <see cref="T:System.Func`1" /> delegate. This method never returns null.</returns>
    </member>
    <member name="M:SimpleInjector.ScopedLifestyle.GetCurrentScopeCore(SimpleInjector.Container)">
      <summary>
            Returns the current <see cref="T:SimpleInjector.Scope" /> for this lifestyle and the given 
            <paramref name="container" />, or null when this method is executed outside the context of a scope.
            </summary>
      <param name="container">The container instance that is related to the scope to return.</param>
      <returns>A <see cref="T:SimpleInjector.Scope" /> instance or null when there is no scope active in this context.</returns>
    </member>
    <member name="M:SimpleInjector.ScopedLifestyle.CreateRegistrationCore``1(System.Func{``0},SimpleInjector.Container)">
      <summary>
            Creates a new <see cref="T:SimpleInjector.Registration" /> instance defining the creation of the
            specified <typeparamref name="TService" /> using the supplied <paramref name="instanceCreator" /> 
            with the caching as specified by this lifestyle.
            </summary>
      <typeparam name="TService">The interface or base type that can be used to retrieve the instances.</typeparam>
      <param name="instanceCreator">A delegate that will create a new instance of 
            <typeparamref name="TService" /> every time it is called.</param>
      <param name="container">The <see cref="T:SimpleInjector.Container" /> instance for which a 
            <see cref="T:SimpleInjector.Registration" /> must be created.</param>
      <returns>A new <see cref="T:SimpleInjector.Registration" /> instance.</returns>
    </member>
    <member name="M:SimpleInjector.ScopedLifestyle.CreateRegistrationCore``2(SimpleInjector.Container)">
      <summary>
            Creates a new <see cref="T:SimpleInjector.Registration" /> instance defining the creation of the
            specified <typeparamref name="TImplementation" /> with the caching as specified by this lifestyle.
            </summary>
      <typeparam name="TService">The interface or base type that can be used to retrieve the instances.</typeparam>
      <typeparam name="TImplementation">The concrete type that will be registered.</typeparam>
      <param name="container">The <see cref="T:SimpleInjector.Container" /> instance for which a 
            <see cref="T:SimpleInjector.Registration" /> must be created.</param>
      <returns>A new <see cref="T:SimpleInjector.Registration" /> instance.</returns>
    </member>
    <member name="M:SimpleInjector.ScopedLifestyle.DisposeInstances(System.Collections.Generic.IList{System.IDisposable})">
      <summary>
            Disposes the list of supplied <paramref name="disposables" />. The list is iterated in reverse 
            order (the first element in the list will be disposed last) and the method ensures that the
            Dispose method of each element is called, regardless of any exceptions raised from any previously
            called Dispose methods. If multiple exceptions are thrown, the last thrown exception will bubble
            up the call stack.
            </summary>
      <param name="disposables">The list of objects to be disposed.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="disposables" /> is a null
            reference.</exception>
    </member>
    <member name="T:SimpleInjector.Helpers">
      <summary>
            Helper methods for the container.
            </summary>
    </member>
    <member name="T:SimpleInjector.InstanceProducer">
      <summary>
            Produces instances for a given registration. Instances of this type are generally created by the
            container when calling one of the <b>Register</b> overloads. Instances can be retrieved by calling
            <see cref="M:SimpleInjector.Container.GetCurrentRegistrations" /> or <see cref="M:SimpleInjector.Container.GetRegistration(System.Type,System.Boolean)" />.
            </summary>
      <remarks>
            The <b>Register</b> method overloads create <b>InstanceProducer</b> instances internally, but
            <b>InstanceProducer</b>s can be created manually to implement special scenarios. An 
            <b>InstanceProducer</b> wraps <see cref="P:SimpleInjector.InstanceProducer.Registration" /> instance. The <b>Registration</b> builds an
            <see cref="T:System.Linq.Expressions.Expression" /> that describes the intend to create the instance according to a certain
            lifestyle. The <b>InstanceProducer</b> on the other hand transforms this <b>Expression</b> to a
            delegate and allows the actual instance to be created. A <b>Registration</b> itself can't create any
            instance. The <b>InsanceProducer</b> allows intercepting created instances by hooking onto the
            <see cref="E:SimpleInjector.Container.ExpressionBuilt">Container.ExpressionBuilt</see> event. The
            <see cref="M:SimpleInjector.Extensions.DecoratorExtensions.RegisterDecorator(SimpleInjector.Container,System.Type,System.Type)">RegisterDecorator</see>
            extension methods for instance work by hooking onto the <b>ExpressionBuilt</b> event and allow
            wrapping the returned instance with a decorator.
            </remarks>
      <example>
            The following example shows the creation of two different <b>InstanceProducer</b> instances that wrap
            the same <b>Registration</b> instance. Since the <b>Registration</b> is created using the 
            <see cref="F:SimpleInjector.Lifestyle.Singleton">Singleton</see> lifestyle, both producers will return 
            the same instance. The <b>InstanceProducer</b> for the <code>Interface1</code> however, will wrap that
            instance in a (transient) <code>Interface1Decorator</code>.
            <code lang="cs"><![CDATA[
            var container = new Container();
            
            // ServiceImpl implements both Interface1 and Interface2.
            var registration = Lifestyle.Singleton.CreateRegistration<ServiceImpl, ServiceImpl>(container);
            
            var producer1 = new InstanceProducer(typeof(Interface1), registration);
            var producer2 = new InstanceProducer(typeof(Interface2), registration);
            
            container.RegisterDecorator(typeof(Interface1), typeof(Interface1Decorator));
            
            var instance1 = (Interface1)producer1.GetInstance();
            var instance2 = (Interface2)producer2.GetInstance();
            
            Assert.IsInstanceOfType(instance1, typeof(Interface1Decorator));
            Assert.IsInstanceOfType(instance2, typeof(ServiceImpl));
            
            Assert.AreSame(((Interface1Decorator)instance1).DecoratedInstance, instance2);
            ]]></code></example>
    </member>
    <member name="M:SimpleInjector.InstanceProducer.#ctor(System.Type,SimpleInjector.Registration)">
      <summary>Initializes a new instance of the <see cref="T:SimpleInjector.InstanceProducer" /> class.</summary>
      <param name="serviceType">The service type for which this instance is created.</param>
      <param name="registration">The <see cref="P:SimpleInjector.InstanceProducer.Registration" />.</param>
    </member>
    <member name="M:SimpleInjector.InstanceProducer.GetInstance">
      <summary>Produces an instance.</summary>
      <returns>An instance. Will never return null.</returns>
      <exception cref="T:SimpleInjector.ActivationException">When the instance could not be retrieved or is null.</exception>
    </member>
    <member name="M:SimpleInjector.InstanceProducer.BuildExpression">
      <summary>
            Builds an expression that expresses the intent to get an instance by the current producer. A call 
            to this method locks the container. No new registrations can't be made after a call to this method.
            </summary>
      <returns>An Expression.</returns>
    </member>
    <member name="M:SimpleInjector.InstanceProducer.GetRelationships">
      <summary>
            Gets the collection of relationships for this instance that the container knows about.
            This includes relationships between the registered type and its dependencies and relationships 
            between applied decorators and their dependencies. Note that types that are not newed up by the 
            container, property dependencies that are injected using the (legacy)
            <see cref="M:SimpleInjector.Container.InjectProperties(System.Object)">InjectProperties</see> method, and
            properties that are injected inside a custom delegate that is registered using the
            <see cref="M:SimpleInjector.Container.RegisterInitializer``1(System.Action{``0})">RegisterInitializer</see> method are unknown
            to the container and are not returned from this method.
            Also note that this method will return an empty collection when called before the the
            registered type is requested from the container (or before <see cref="M:SimpleInjector.Container.Verify">Verify</see>
            is called). 
            </summary>
      <returns>An array of <see cref="T:SimpleInjector.Advanced.KnownRelationship" /> instances.</returns>
    </member>
    <member name="P:SimpleInjector.InstanceProducer.Lifestyle">
      <summary>
            Gets the <see cref="P:SimpleInjector.InstanceProducer.Lifestyle" /> for this registration. The returned lifestyle can differ from the
            lifestyle that is used during the registration. This can happen for instance when the registration
            is changed by an <see cref="E:SimpleInjector.Container.ExpressionBuilt">ExpressionBuilt</see> registration or
            gets <see cref="T:SimpleInjector.Extensions.DecoratorExtensions">decorated</see>.
            </summary>
      <value>The <see cref="P:SimpleInjector.InstanceProducer.Lifestyle" /> for this registration.</value>
    </member>
    <member name="P:SimpleInjector.InstanceProducer.ServiceType">
      <summary>Gets the service type for which this producer produces instances.</summary>
      <value>A <see cref="T:System.Type" /> instance.</value>
    </member>
    <member name="P:SimpleInjector.InstanceProducer.Registration">
      <summary>
            Gets the <see cref="P:SimpleInjector.InstanceProducer.Registration" /> instance for this instance.
            </summary>
      <value>The <see cref="P:SimpleInjector.InstanceProducer.Registration" />.</value>
    </member>
    <member name="T:SimpleInjector.StringResources">
      <summary>Internal helper for string resources.</summary>
    </member>
    <member name="T:SimpleInjector.UnregisteredTypeEventArgs">
      <summary>
            Provides data for and interaction with the 
            <see cref="E:SimpleInjector.Container.ResolveUnregisteredType">ResolveUnregisteredType</see> event of 
            the <see cref="T:SimpleInjector.Container" />. An observer can check the 
            <see cref="P:SimpleInjector.UnregisteredTypeEventArgs.UnregisteredServiceType" /> to see whether the unregistered type can be handled. The
            <see cref="M:SimpleInjector.UnregisteredTypeEventArgs.Register(System.Func{System.Object})" /> method can be called to register a <see cref="T:System.Func`1" /> delegate 
            that allows creation of instances of the unregistered for this and future requests.
            </summary>
    </member>
    <member name="M:SimpleInjector.UnregisteredTypeEventArgs.#ctor(System.Type)">
      <summary>Initializes a new instance of the UnregisteredTypeEventArgs class.</summary>
      <param name="unregisteredServiceType">The unregistered service type.</param>
    </member>
    <member name="M:SimpleInjector.UnregisteredTypeEventArgs.Register(System.Func{System.Object})">
      <summary>
            Registers a <see cref="T:System.Func`1" /> delegate that allows creation of instances of the type
            expressed by the <see cref="P:SimpleInjector.UnregisteredTypeEventArgs.UnregisteredServiceType" /> for this and future requests. The delegate
            will be caches and future requests will directly call that delegate.
            </summary>
      <param name="instanceCreator">The delegate that allows creation of instances of the type
            expressed by the <see cref="P:SimpleInjector.UnregisteredTypeEventArgs.UnregisteredServiceType" />.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="instanceCreator" /> is a
            null reference.</exception>
      <exception cref="T:SimpleInjector.ActivationException">Thrown when multiple observers that have registered to
            the <see cref="E:SimpleInjector.Container.ResolveUnregisteredType">ResolveUnregisteredType</see> event
            called this method for the same type.</exception>
    </member>
    <member name="M:SimpleInjector.UnregisteredTypeEventArgs.Register(System.Linq.Expressions.Expression)">
      <summary>
            Registers an <see cref="P:SimpleInjector.UnregisteredTypeEventArgs.Expression" /> that describes the creation of instances of the type
            expressed by the <see cref="P:SimpleInjector.UnregisteredTypeEventArgs.UnregisteredServiceType" /> for this and future requests. The delegate
            will be cached and future requests will directly use that expression or the compiled delegate.
            </summary>
      <remarks>
            NOTE: If possible, use the <see cref="M:SimpleInjector.UnregisteredTypeEventArgs.Register(SimpleInjector.Registration)">Register(Registration)</see> overload,
            since this allows the analysis services to determine any configuration errors on the lifestyle of
            the registration.
            </remarks>
      <param name="expression">The expression that describes the creation of instances of the type
            expressed by the <see cref="P:SimpleInjector.UnregisteredTypeEventArgs.UnregisteredServiceType" />.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="expression" /> is a
            null reference.</exception>
      <exception cref="T:SimpleInjector.ActivationException">Thrown when multiple observers that have registered to
            the <see cref="E:SimpleInjector.Container.ResolveUnregisteredType">ResolveUnregisteredType</see> event
            called this method for the same type.</exception>
    </member>
    <member name="M:SimpleInjector.UnregisteredTypeEventArgs.Register(SimpleInjector.Registration)">
      <summary>
            Registers a <see cref="P:SimpleInjector.UnregisteredTypeEventArgs.Registration" /> that describes the creation of instances of the type
            expressed by the <see cref="P:SimpleInjector.UnregisteredTypeEventArgs.UnregisteredServiceType" /> for this and future requests. The 
            registration will be cached and future requests will directly call unon that registration, the
            expression that it generates or the delegate that gets compiled from that expression.
            </summary>
      <param name="registration">The registration that describes the creation of instances according to
            the registration's lifestyle of the type expressed by the <see cref="P:SimpleInjector.UnregisteredTypeEventArgs.UnregisteredServiceType" />.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="registration" /> is a
            null reference.</exception>
      <exception cref="T:System.ArgumentException">Thrown when the <paramref name="registration" /> is a
            not exactly of type <see cref="T:System.Func`1" /> where T equals the <see cref="P:SimpleInjector.UnregisteredTypeEventArgs.UnregisteredServiceType" />.
            </exception>
      <exception cref="T:SimpleInjector.ActivationException">Thrown when multiple observers that have registered to
            the <see cref="E:SimpleInjector.Container.ResolveUnregisteredType">ResolveUnregisteredType</see> event
            called this method for the same type.</exception>
    </member>
    <member name="P:SimpleInjector.UnregisteredTypeEventArgs.UnregisteredServiceType">
      <summary>Gets the unregistered service type that is currently requested.</summary>
      <value>The unregistered service type that is currently requested.</value>
    </member>
    <member name="P:SimpleInjector.UnregisteredTypeEventArgs.Handled">
      <summary>
            Gets a value indicating whether the event represented by this instance has been handled. 
            This property will return <b>true</b> when <see cref="M:SimpleInjector.UnregisteredTypeEventArgs.Register(System.Func{System.Object})" /> has been called on
            this instance.
            </summary>
      <value>The indication whether the event has been handled.</value>
    </member>
    <member name="T:System.Reactive.PlatformServices.NamespaceDoc">
      <summary>
            The <b>System.Reactive.PlatformServices</b> namespace contains interfaces and classes used by the runtime infrastructure of Reactive Extensions.
            Those are not intended to be used directly from user code and are subject to change in future releases of the product.
            </summary>
    </member>
    <member name="T:System.ObservableExtensions">
      <summary>
            Provides a set of static methods for subscribing delegates to observables.
            </summary>
    </member>
    <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0})">
      <summary>
            Subscribes to the observable sequence without specifying any handlers.
            This method can be used to evaluate the observable sequence for its side-effects only.
            </summary>
      <typeparam name="T">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to subscribe to.</param>
      <returns>IDisposable object used to unsubscribe from the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0})">
      <summary>
            Subscribes an element handler to an observable sequence.
            </summary>
      <typeparam name="T">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to subscribe to.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <returns>IDisposable object used to unsubscribe from the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> is null.</exception>
    </member>
    <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception})">
      <summary>
            Subscribes an element handler and an exception handler to an observable sequence.
            </summary>
      <typeparam name="T">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to subscribe to.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <param name="onError">Action to invoke upon exceptional termination of the observable sequence.</param>
      <returns>IDisposable object used to unsubscribe from the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> or <paramref name="onError" /> is null.</exception>
    </member>
    <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action)">
      <summary>
            Subscribes an element handler and a completion handler to an observable sequence.
            </summary>
      <typeparam name="T">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to subscribe to.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <param name="onCompleted">Action to invoke upon graceful termination of the observable sequence.</param>
      <returns>IDisposable object used to unsubscribe from the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> or <paramref name="onCompleted" /> is null.</exception>
    </member>
    <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
      <summary>
            Subscribes an element handler, an exception handler, and a completion handler to an observable sequence.
            </summary>
      <typeparam name="T">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to subscribe to.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <param name="onError">Action to invoke upon exceptional termination of the observable sequence.</param>
      <param name="onCompleted">Action to invoke upon graceful termination of the observable sequence.</param>
      <returns>IDisposable object used to unsubscribe from the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> or <paramref name="onError" /> or <paramref name="onCompleted" /> is null.</exception>
    </member>
    <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.IObserver{``0},System.Threading.CancellationToken)">
      <summary>
            Subscribes an observer to an observable sequence, using a CancellationToken to support unsubscription.
            </summary>
      <typeparam name="T">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to subscribe to.</param>
      <param name="observer">Observer to subscribe to the sequence.</param>
      <param name="token">CancellationToken that can be signaled to unsubscribe from the source sequence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="observer" /> is null.</exception>
    </member>
    <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Threading.CancellationToken)">
      <summary>
            Subscribes to the observable sequence without specifying any handlers, using a CancellationToken to support unsubscription.
            This method can be used to evaluate the observable sequence for its side-effects only.
            </summary>
      <typeparam name="T">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to subscribe to.</param>
      <param name="token">CancellationToken that can be signaled to unsubscribe from the source sequence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Threading.CancellationToken)">
      <summary>
            Subscribes an element handler to an observable sequence, using a CancellationToken to support unsubscription.
            </summary>
      <typeparam name="T">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to subscribe to.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <param name="token">CancellationToken that can be signaled to unsubscribe from the source sequence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> is null.</exception>
    </member>
    <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Threading.CancellationToken)">
      <summary>
            Subscribes an element handler and an exception handler to an observable sequence, using a CancellationToken to support unsubscription.
            </summary>
      <typeparam name="T">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to subscribe to.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <param name="onError">Action to invoke upon exceptional termination of the observable sequence.</param>
      <param name="token">CancellationToken that can be signaled to unsubscribe from the source sequence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> or <paramref name="onError" /> is null.</exception>
    </member>
    <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action,System.Threading.CancellationToken)">
      <summary>
            Subscribes an element handler and a completion handler to an observable sequence, using a CancellationToken to support unsubscription.
            </summary>
      <typeparam name="T">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to subscribe to.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <param name="onCompleted">Action to invoke upon graceful termination of the observable sequence.</param>
      <param name="token">CancellationToken that can be signaled to unsubscribe from the source sequence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> or <paramref name="onCompleted" /> is null.</exception>
    </member>
    <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action,System.Threading.CancellationToken)">
      <summary>
            Subscribes an element handler, an exception handler, and a completion handler to an observable sequence, using a CancellationToken to support unsubscription.
            </summary>
      <typeparam name="T">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to subscribe to.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <param name="onError">Action to invoke upon exceptional termination of the observable sequence.</param>
      <param name="onCompleted">Action to invoke upon graceful termination of the observable sequence.</param>
      <param name="token">CancellationToken that can be signaled to unsubscribe from the source sequence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> or <paramref name="onError" /> or <paramref name="onCompleted" /> is null.</exception>
    </member>
    <member name="M:System.ObservableExtensions.SubscribeSafe``1(System.IObservable{``0},System.IObserver{``0})">
      <summary>
            Subscribes to the specified source, re-routing synchronous exceptions during invocation of the Subscribe method to the observer's OnError channel.
            This method is typically used when writing query operators.
            </summary>
      <typeparam name="T">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to subscribe to.</param>
      <param name="observer">Observer that will be passed to the observable sequence, and that will be used for exception propagation.</param>
      <returns>IDisposable object used to unsubscribe from the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="observer" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Observer">
      <summary>
            Provides a set of static methods for creating observers.
            </summary>
    </member>
    <member name="M:System.Reactive.Observer.ToObserver``1(System.Action{System.Reactive.Notification{``0}})">
      <summary>
            Creates an observer from a notification callback.
            </summary>
      <typeparam name="T">The type of the elements received by the observer.</typeparam>
      <param name="handler">Action that handles a notification.</param>
      <returns>The observer object that invokes the specified handler using a notification corresponding to each message it receives.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Observer.ToNotifier``1(System.IObserver{``0})">
      <summary>
            Creates a notification callback from an observer.
            </summary>
      <typeparam name="T">The type of the elements received by the observer.</typeparam>
      <param name="observer">Observer object.</param>
      <returns>The action that forwards its input notification to the underlying observer.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Observer.Create``1(System.Action{``0})">
      <summary>
            Creates an observer from the specified OnNext action.
            </summary>
      <typeparam name="T">The type of the elements received by the observer.</typeparam>
      <param name="onNext">Observer's OnNext action implementation.</param>
      <returns>The observer object implemented using the given actions.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="onNext" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Observer.Create``1(System.Action{``0},System.Action{System.Exception})">
      <summary>
            Creates an observer from the specified OnNext and OnError actions.
            </summary>
      <typeparam name="T">The type of the elements received by the observer.</typeparam>
      <param name="onNext">Observer's OnNext action implementation.</param>
      <param name="onError">Observer's OnError action implementation.</param>
      <returns>The observer object implemented using the given actions.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="onNext" /> or <paramref name="onError" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Observer.Create``1(System.Action{``0},System.Action)">
      <summary>
            Creates an observer from the specified OnNext and OnCompleted actions.
            </summary>
      <typeparam name="T">The type of the elements received by the observer.</typeparam>
      <param name="onNext">Observer's OnNext action implementation.</param>
      <param name="onCompleted">Observer's OnCompleted action implementation.</param>
      <returns>The observer object implemented using the given actions.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="onNext" /> or <paramref name="onCompleted" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Observer.Create``1(System.Action{``0},System.Action{System.Exception},System.Action)">
      <summary>
            Creates an observer from the specified OnNext, OnError, and OnCompleted actions.
            </summary>
      <typeparam name="T">The type of the elements received by the observer.</typeparam>
      <param name="onNext">Observer's OnNext action implementation.</param>
      <param name="onError">Observer's OnError action implementation.</param>
      <param name="onCompleted">Observer's OnCompleted action implementation.</param>
      <returns>The observer object implemented using the given actions.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="onNext" /> or <paramref name="onError" /> or <paramref name="onCompleted" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Observer.AsObserver``1(System.IObserver{``0})">
      <summary>
            Hides the identity of an observer.
            </summary>
      <typeparam name="T">The type of the elements received by the source observer.</typeparam>
      <param name="observer">An observer whose identity to hide.</param>
      <returns>An observer that hides the identity of the specified observer.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Observer.Checked``1(System.IObserver{``0})">
      <summary>
            Checks access to the observer for grammar violations. This includes checking for multiple OnError or OnCompleted calls, as well as reentrancy in any of the observer methods.
            If a violation is detected, an InvalidOperationException is thrown from the offending observer method call.
            </summary>
      <typeparam name="T">The type of the elements received by the source observer.</typeparam>
      <param name="observer">The observer whose callback invocations should be checked for grammar violations.</param>
      <returns>An observer that checks callbacks invocations against the observer grammar and, if the checks pass, forwards those to the specified observer.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0})">
      <summary>
            Synchronizes access to the observer such that its callback methods cannot be called concurrently from multiple threads. This overload is useful when coordinating access to an observer.
            Notice reentrant observer callbacks on the same thread are still possible.
            </summary>
      <typeparam name="T">The type of the elements received by the source observer.</typeparam>
      <param name="observer">The observer whose callbacks should be synchronized.</param>
      <returns>An observer that delivers callbacks to the specified observer in a synchronized manner.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> is null.</exception>
      <remarks>
            Because a <see cref="T:System.Threading.Monitor">Monitor</see> is used to perform the synchronization, there's no protection against reentrancy from the same thread.
            Hence, overlapped observer callbacks are still possible, which is invalid behavior according to the observer grammar. In order to protect against this behavior as
            well, use the <see cref="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0},System.Boolean)" /> overload, passing true for the second parameter.
            </remarks>
    </member>
    <member name="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0},System.Boolean)">
      <summary>
            Synchronizes access to the observer such that its callback methods cannot be called concurrently. This overload is useful when coordinating access to an observer.
            The <paramref name="preventReentrancy" /> parameter configures the type of lock used for synchronization.
            </summary>
      <typeparam name="T">The type of the elements received by the source observer.</typeparam>
      <param name="observer">The observer whose callbacks should be synchronized.</param>
      <param name="preventReentrancy">If set to true, reentrant observer callbacks will be queued up and get delivered to the observer in a sequential manner.</param>
      <returns>An observer that delivers callbacks to the specified observer in a synchronized manner.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> is null.</exception>
      <remarks>
            When the <paramref name="preventReentrancy" /> parameter is set to false, behavior is identical to the <see cref="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0})" /> overload which uses
            a <see cref="T:System.Threading.Monitor">Monitor</see> for synchronization. When the <paramref name="preventReentrancy" /> parameter is set to true, an <see cref="T:System.Reactive.Concurrency.AsyncLock" />
            is used to queue up callbacks to the specified observer if a reentrant call is made.
            </remarks>
    </member>
    <member name="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0},System.Object)">
      <summary>
            Synchronizes access to the observer such that its callback methods cannot be called concurrently by multiple threads, using the specified gate object for use by a <see cref="T:System.Threading.Monitor">Monitor</see>-based lock.
            This overload is useful when coordinating multiple observers that access shared state by synchronizing on a common gate object.
            Notice reentrant observer callbacks on the same thread are still possible.
            </summary>
      <typeparam name="T">The type of the elements received by the source observer.</typeparam>
      <param name="observer">The observer whose callbacks should be synchronized.</param>
      <param name="gate">Gate object to synchronize each observer call on.</param>
      <returns>An observer that delivers callbacks to the specified observer in a synchronized manner.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> or <paramref name="gate" /> is null.</exception>
      <remarks>
            Because a <see cref="T:System.Threading.Monitor">Monitor</see> is used to perform the synchronization, there's no protection against reentrancy from the same thread.
            Hence, overlapped observer callbacks are still possible, which is invalid behavior according to the observer grammar. In order to protect against this behavior as
            well, use the <see cref="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0},System.Reactive.Concurrency.AsyncLock)" /> overload.
            </remarks>
    </member>
    <member name="M:System.Reactive.Observer.Synchronize``1(System.IObserver{``0},System.Reactive.Concurrency.AsyncLock)">
      <summary>
            Synchronizes access to the observer such that its callback methods cannot be called concurrently, using the specified asynchronous lock to protect against concurrent and reentrant access.
            This overload is useful when coordinating multiple observers that access shared state by synchronizing on a common asynchronous lock.
            </summary>
      <typeparam name="T">The type of the elements received by the source observer.</typeparam>
      <param name="observer">The observer whose callbacks should be synchronized.</param>
      <param name="asyncLock">Gate object to synchronize each observer call on.</param>
      <returns>An observer that delivers callbacks to the specified observer in a synchronized manner.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> or <paramref name="asyncLock" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Observer.NotifyOn``1(System.IObserver{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Schedules the invocation of observer methods on the given scheduler.
            </summary>
      <typeparam name="T">The type of the elements received by the source observer.</typeparam>
      <param name="observer">The observer to schedule messages for.</param>
      <param name="scheduler">Scheduler to schedule observer messages on.</param>
      <returns>Observer whose messages are scheduled on the given scheduler.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Observer.NotifyOn``1(System.IObserver{``0},System.Threading.SynchronizationContext)">
      <summary>
            Schedules the invocation of observer methods on the given synchonization context.
            </summary>
      <typeparam name="T">The type of the elements received by the source observer.</typeparam>
      <param name="observer">The observer to schedule messages for.</param>
      <param name="context">Synchonization context to schedule observer messages on.</param>
      <returns>Observer whose messages are scheduled on the given synchonization context.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> or <paramref name="context" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.ObservableBase`1">
      <summary>
            Abstract base class for implementations of the IObservable&lt;T&gt; interface.
            </summary>
      <remarks>
            If you don't need a named type to create an observable sequence (i.e. you rather need
            an instance rather than a reusable type), use the Observable.Create method to create
            an observable sequence with specified subscription behavior.
            </remarks>
      <typeparam name="T">The type of the elements in the sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.ObservableBase`1.Subscribe(System.IObserver{`0})">
      <summary>
            Subscribes the given observer to the observable sequence.
            </summary>
      <param name="observer">Observer that will receive notifications from the observable sequence.</param>
      <returns>Disposable object representing an observer's subscription to the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.ObservableBase`1.SubscribeCore(System.IObserver{`0})">
      <summary>
            Implement this method with the core subscription logic for the observable sequence.
            </summary>
      <param name="observer">Observer to send notifications to.</param>
      <returns>Disposable object representing an observer's subscription to the observable sequence.</returns>
    </member>
    <member name="T:System.Reactive.AnonymousObservable`1">
      <summary>
            Class to create an IObservable&lt;T&gt; instance from a delegate-based implementation of the Subscribe method.
            </summary>
      <typeparam name="T">The type of the elements in the sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.AnonymousObservable`1.#ctor(System.Func{System.IObserver{`0},System.IDisposable})">
      <summary>
            Creates an observable sequence object from the specified subscription function.
            </summary>
      <param name="subscribe">Subscribe method implementation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subscribe" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.AnonymousObservable`1.SubscribeCore(System.IObserver{`0})">
      <summary>
            Calls the subscription function that was supplied to the constructor.
            </summary>
      <param name="observer">Observer to send notifications to.</param>
      <returns>Disposable object representing an observer's subscription to the observable sequence.</returns>
    </member>
    <member name="T:System.Reactive.ObserverBase`1">
      <summary>
            Abstract base class for implementations of the IObserver&lt;T&gt; interface.
            </summary>
      <remarks>This base class enforces the grammar of observers where OnError and OnCompleted are terminal messages.</remarks>
      <typeparam name="T">The type of the elements in the sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.ObserverBase`1.#ctor">
      <summary>
            Creates a new observer in a non-stopped state.
            </summary>
    </member>
    <member name="M:System.Reactive.ObserverBase`1.OnNext(`0)">
      <summary>
            Notifies the observer of a new element in the sequence.
            </summary>
      <param name="value">Next element in the sequence.</param>
    </member>
    <member name="M:System.Reactive.ObserverBase`1.OnNextCore(`0)">
      <summary>
            Implement this method to react to the receival of a new element in the sequence.
            </summary>
      <param name="value">Next element in the sequence.</param>
      <remarks>This method only gets called when the observer hasn't stopped yet.</remarks>
    </member>
    <member name="M:System.Reactive.ObserverBase`1.OnError(System.Exception)">
      <summary>
            Notifies the observer that an exception has occurred.
            </summary>
      <param name="error">The error that has occurred.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="error" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.ObserverBase`1.OnErrorCore(System.Exception)">
      <summary>
            Implement this method to react to the occurrence of an exception.
            </summary>
      <param name="error">The error that has occurred.</param>
      <remarks>This method only gets called when the observer hasn't stopped yet, and causes the observer to stop.</remarks>
    </member>
    <member name="M:System.Reactive.ObserverBase`1.OnCompleted">
      <summary>
            Notifies the observer of the end of the sequence.
            </summary>
    </member>
    <member name="M:System.Reactive.ObserverBase`1.OnCompletedCore">
      <summary>
            Implement this method to react to the end of the sequence.
            </summary>
      <remarks>This method only gets called when the observer hasn't stopped yet, and causes the observer to stop.</remarks>
    </member>
    <member name="M:System.Reactive.ObserverBase`1.Dispose">
      <summary>
            Disposes the observer, causing it to transition to the stopped state.
            </summary>
    </member>
    <member name="M:System.Reactive.ObserverBase`1.Dispose(System.Boolean)">
      <summary>
            Core implementation of IDisposable.
            </summary>
      <param name="disposing">true if the Dispose call was triggered by the IDisposable.Dispose method; false if it was triggered by the finalizer.</param>
    </member>
    <member name="T:System.Reactive.AnonymousObserver`1">
      <summary>
            Class to create an IObserver&lt;T&gt; instance from delegate-based implementations of the On* methods.
            </summary>
      <typeparam name="T">The type of the elements in the sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.AnonymousObserver`1.#ctor(System.Action{`0},System.Action{System.Exception},System.Action)">
      <summary>
            Creates an observer from the specified OnNext, OnError, and OnCompleted actions.
            </summary>
      <param name="onNext">Observer's OnNext action implementation.</param>
      <param name="onError">Observer's OnError action implementation.</param>
      <param name="onCompleted">Observer's OnCompleted action implementation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="onNext" /> or <paramref name="onError" /> or <paramref name="onCompleted" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.AnonymousObserver`1.#ctor(System.Action{`0})">
      <summary>
            Creates an observer from the specified OnNext action.
            </summary>
      <param name="onNext">Observer's OnNext action implementation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="onNext" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.AnonymousObserver`1.#ctor(System.Action{`0},System.Action{System.Exception})">
      <summary>
            Creates an observer from the specified OnNext and OnError actions.
            </summary>
      <param name="onNext">Observer's OnNext action implementation.</param>
      <param name="onError">Observer's OnError action implementation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="onNext" /> or <paramref name="onError" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.AnonymousObserver`1.#ctor(System.Action{`0},System.Action)">
      <summary>
            Creates an observer from the specified OnNext and OnCompleted actions.
            </summary>
      <param name="onNext">Observer's OnNext action implementation.</param>
      <param name="onCompleted">Observer's OnCompleted action implementation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="onNext" /> or <paramref name="onCompleted" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.AnonymousObserver`1.OnNextCore(`0)">
      <summary>
            Calls the onNext action.
            </summary>
      <param name="value">Next element in the sequence.</param>
    </member>
    <member name="M:System.Reactive.AnonymousObserver`1.OnErrorCore(System.Exception)">
      <summary>
            Calls the onError action.
            </summary>
      <param name="error">The error that has occurred.</param>
    </member>
    <member name="M:System.Reactive.AnonymousObserver`1.OnCompletedCore">
      <summary>
            Calls the onCompleted action.
            </summary>
    </member>
    <member name="T:System.Reactive.AnonymousSafeObserver`1">
      <summary>
            This class fuses logic from ObserverBase, AnonymousObserver, and SafeObserver into one class. When an observer
            needs to be safeguarded, an instance of this type can be created by SafeObserver.Create when it detects its
            input is an AnonymousObserver, which is commonly used by end users when using the Subscribe extension methods
            that accept delegates for the On* handlers. By doing the fusion, we make the call stack depth shorter which
            helps debugging and some performance.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.AsyncLock">
      <summary>
            Asynchronous lock.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.AsyncLock.Wait(System.Action)">
      <summary>
            Queues the action for execution. If the caller acquires the lock and becomes the owner,
            the queue is processed. If the lock is already owned, the action is queued and will get
            processed by the owner.
            </summary>
      <param name="action">Action to queue for execution.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.AsyncLock.Dispose">
      <summary>
            Clears the work items in the queue and drops further work being queued.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.ConcurrencyAbstractionLayer">
      <summary>
            (Infrastructure) Concurrency abstraction layer.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.ConcurrencyAbstractionLayer.Current">
      <summary>
            Gets the current CAL. If no CAL has been set yet, it will be initialized to the default.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.IConcurrencyAbstractionLayer">
      <summary>
            (Infrastructure) Concurrency abstraction layer interface.
            </summary>
      <remarks>
            This type is used by the Rx infrastructure and not meant for public consumption or implementation.
            No guarantees are made about forward compatibility of the type's functionality and its usage.
            </remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.StartTimer(System.Action{System.Object},System.Object,System.TimeSpan)">
      <summary>
            Queues a method for execution at the specified relative time.
            </summary>
      <param name="action">Method to execute.</param>
      <param name="state">State to pass to the method.</param>
      <param name="dueTime">Time to execute the method on.</param>
      <returns>Disposable object that can be used to stop the timer.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.StartPeriodicTimer(System.Action,System.TimeSpan)">
      <summary>
            Queues a method for periodic execution based on the specified period.
            </summary>
      <param name="action">Method to execute; should be safe for reentrancy.</param>
      <param name="period">Period for running the method periodically.</param>
      <returns>Disposable object that can be used to stop the timer.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.QueueUserWorkItem(System.Action{System.Object},System.Object)">
      <summary>
            Queues a method for execution.
            </summary>
      <param name="action">Method to execute.</param>
      <param name="state">State to pass to the method.</param>
      <returns>Disposable object that can be used to cancel the queued method.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.Sleep(System.TimeSpan)">
      <summary>
            Blocking sleep operation.
            </summary>
      <param name="timeout">Time to sleep.</param>
    </member>
    <member name="M:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.StartStopwatch">
      <summary>
            Starts a new stopwatch object.
            </summary>
      <returns>New stopwatch object; started at the time of the request.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.StartThread(System.Action{System.Object},System.Object)">
      <summary>
            Starts a new long-running thread.
            </summary>
      <param name="action">Method to execute.</param>
      <param name="state">State to pass to the method.</param>
    </member>
    <member name="P:System.Reactive.Concurrency.IConcurrencyAbstractionLayer.SupportsLongRunning">
      <summary>
            Gets whether long-running scheduling is supported.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.Scheduler">
      <summary>
            Provides a set of static properties to access commonly used schedulers.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.DisableOptimizations(System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns a scheduler that represents the original scheduler, without any of its interface-based optimizations (e.g. long running scheduling).
            </summary>
      <param name="scheduler">Scheduler to disable all optimizations for.</param>
      <returns>Proxy to the original scheduler but without any optimizations enabled.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.DisableOptimizations(System.Reactive.Concurrency.IScheduler,System.Type[])">
      <summary>
            Returns a scheduler that represents the original scheduler, without the specified set of interface-based optimizations (e.g. long running scheduling).
            </summary>
      <param name="scheduler">Scheduler to disable the specified optimizations for.</param>
      <param name="optimizationInterfaces">Types of the optimization interfaces that have to be disabled.</param>
      <returns>Proxy to the original scheduler but without the specified optimizations enabled.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="optimizationInterfaces" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.Catch``1(System.Reactive.Concurrency.IScheduler,System.Func{``0,System.Boolean})">
      <summary>
            Returns a scheduler that wraps the original scheduler, adding exception handling for scheduled actions.
            </summary>
      <typeparam name="TException">Type of the exception to check for.</typeparam>
      <param name="scheduler">Scheduler to apply an exception filter for.</param>
      <param name="handler">Handler that's run if an exception is caught. The exception will be rethrown if the handler returns false.</param>
      <returns>Wrapper around the original scheduler, enforcing exception handling.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="handler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.SchedulePeriodic``1(System.Reactive.Concurrency.IScheduler,``0,System.TimeSpan,System.Func{``0,``0})">
      <summary>
            Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities.
            If the scheduler supports periodic scheduling, the request will be forwarded to the periodic scheduling implementation.
            If the scheduler provides stopwatch functionality, the periodic task will be emulated using recursive scheduling with a stopwatch to correct for time slippage.
            Otherwise, the periodic task will be emulated using recursive scheduling.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="scheduler">The scheduler to run periodic work on.</param>
      <param name="state">Initial state passed to the action upon the first iteration.</param>
      <param name="period">Period for running the work periodically.</param>
      <param name="action">Action to be executed, potentially updating the state.</param>
      <returns>The disposable object used to cancel the scheduled recurring action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="period" /> is less than TimeSpan.Zero.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.SchedulePeriodic``1(System.Reactive.Concurrency.IScheduler,``0,System.TimeSpan,System.Action{``0})">
      <summary>
            Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities.
            If the scheduler supports periodic scheduling, the request will be forwarded to the periodic scheduling implementation.
            If the scheduler provides stopwatch functionality, the periodic task will be emulated using recursive scheduling with a stopwatch to correct for time slippage.
            Otherwise, the periodic task will be emulated using recursive scheduling.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="scheduler">Scheduler to execute the action on.</param>
      <param name="state">State passed to the action to be executed.</param>
      <param name="period">Period for running the work periodically.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled recurring action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="period" /> is less than TimeSpan.Zero.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.SchedulePeriodic(System.Reactive.Concurrency.IScheduler,System.TimeSpan,System.Action)">
      <summary>
            Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities.
            If the scheduler supports periodic scheduling, the request will be forwarded to the periodic scheduling implementation.
            If the scheduler provides stopwatch functionality, the periodic task will be emulated using recursive scheduling with a stopwatch to correct for time slippage.
            Otherwise, the periodic task will be emulated using recursive scheduling.
            </summary>
      <param name="scheduler">Scheduler to execute the action on.</param>
      <param name="period">Period for running the work periodically.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled recurring action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="period" /> is less than TimeSpan.Zero.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.StartStopwatch(System.Reactive.Concurrency.IScheduler)">
      <summary>
            Starts a new stopwatch object by dynamically discovering the scheduler's capabilities.
            If the scheduler provides stopwatch functionality, the request will be forwarded to the stopwatch provider implementation.
            Otherwise, the stopwatch will be emulated using the scheduler's notion of absolute time.
            </summary>
      <param name="scheduler">Scheduler to obtain a stopwatch for.</param>
      <returns>New stopwatch object; started at the time of the request.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
      <remarks>The resulting stopwatch object can have non-monotonic behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.AsLongRunning(System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns the ISchedulerLongRunning implementation of the specified scheduler, or null if no such implementation is available.
            </summary>
      <param name="scheduler">Scheduler to get the ISchedulerLongRunning implementation for.</param>
      <returns>The scheduler's ISchedulerLongRunning implementation if available; null otherwise.</returns>
      <remarks>
            This helper method is made available for query operator authors in order to discover scheduler services by using the required
            IServiceProvider pattern, which allows for interception or redefinition of scheduler services.
            </remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.AsStopwatchProvider(System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns the IStopwatchProvider implementation of the specified scheduler, or null if no such implementation is available.
            </summary>
      <param name="scheduler">Scheduler to get the IStopwatchProvider implementation for.</param>
      <returns>The scheduler's IStopwatchProvider implementation if available; null otherwise.</returns>
      <remarks>
        <para>
            This helper method is made available for query operator authors in order to discover scheduler services by using the required
            IServiceProvider pattern, which allows for interception or redefinition of scheduler services.
            </para>
        <para>
            Consider using <see cref="M:System.Reactive.Concurrency.Scheduler.StartStopwatch(System.Reactive.Concurrency.IScheduler)" /> in case a stopwatch is required, but use of emulation stopwatch based
            on the scheduler's clock is acceptable. Use of this method is recommended for best-effort use of the stopwatch provider
            scheduler service, where the caller falls back to not using stopwatches if this facility wasn't found.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.AsPeriodic(System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns the IStopwatchProvider implementation of the specified scheduler, or null if no such implementation is available.
            </summary>
      <param name="scheduler">Scheduler to get the IStopwatchProvider implementation for.</param>
      <returns>The scheduler's IStopwatchProvider implementation if available; null otherwise.</returns>
      <remarks>
        <para>
            This helper method is made available for query operator authors in order to discover scheduler services by using the required
            IServiceProvider pattern, which allows for interception or redefinition of scheduler services.
            </para>
        <para>
            Consider using the Scheduler.SchedulePeriodic extension methods for IScheduler in case periodic scheduling is required and
            emulation of periodic behavior using other scheduler services is desirable. Use of this method is recommended for best-effort
            use of the periodic scheduling service, where the caller falls back to not using periodic scheduling if this facility wasn't
            found.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.Normalize(System.TimeSpan)">
      <summary>
            Normalizes the specified TimeSpan value to a positive value.
            </summary>
      <param name="timeSpan">The TimeSpan value to normalize.</param>
      <returns>The specified TimeSpan value if it is zero or positive; otherwise, TimeSpan.Zero.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.Action{System.Action})">
      <summary>
            Schedules an action to be executed recursively.
            </summary>
      <param name="scheduler">Scheduler to execute the recursive action on.</param>
      <param name="action">Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.Schedule``1(System.Reactive.Concurrency.IScheduler,``0,System.Action{``0,System.Action{``0}})">
      <summary>
            Schedules an action to be executed recursively.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="scheduler">Scheduler to execute the recursive action on.</param>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in recursive invocation state.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.TimeSpan,System.Action{System.Action{System.TimeSpan}})">
      <summary>
            Schedules an action to be executed recursively after a specified relative due time.
            </summary>
      <param name="scheduler">Scheduler to execute the recursive action on.</param>
      <param name="action">Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action at the specified relative time.</param>
      <param name="dueTime">Relative time after which to execute the action for the first time.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.Schedule``1(System.Reactive.Concurrency.IScheduler,``0,System.TimeSpan,System.Action{``0,System.Action{``0,System.TimeSpan}})">
      <summary>
            Schedules an action to be executed recursively after a specified relative due time.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="scheduler">Scheduler to execute the recursive action on.</param>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in the recursive due time and invocation state.</param>
      <param name="dueTime">Relative time after which to execute the action for the first time.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.DateTimeOffset,System.Action{System.Action{System.DateTimeOffset}})">
      <summary>
            Schedules an action to be executed recursively at a specified absolute due time.
            </summary>
      <param name="scheduler">Scheduler to execute the recursive action on.</param>
      <param name="action">Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action at the specified absolute time.</param>
      <param name="dueTime">Absolute time at which to execute the action for the first time.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.Schedule``1(System.Reactive.Concurrency.IScheduler,``0,System.DateTimeOffset,System.Action{``0,System.Action{``0,System.DateTimeOffset}})">
      <summary>
            Schedules an action to be executed recursively at a specified absolute due time.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="scheduler">Scheduler to execute the recursive action on.</param>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in the recursive due time and invocation state.</param>
      <param name="dueTime">Absolute time at which to execute the action for the first time.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.Action)">
      <summary>
            Schedules an action to be executed.
            </summary>
      <param name="scheduler">Scheduler to execute the action on.</param>
      <param name="action">Action to execute.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.TimeSpan,System.Action)">
      <summary>
            Schedules an action to be executed after the specified relative due time.
            </summary>
      <param name="scheduler">Scheduler to execute the action on.</param>
      <param name="action">Action to execute.</param>
      <param name="dueTime">Relative time after which to execute the action.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.Schedule(System.Reactive.Concurrency.IScheduler,System.DateTimeOffset,System.Action)">
      <summary>
            Schedules an action to be executed at the specified absolute due time.
            </summary>
      <param name="scheduler">Scheduler to execute the action on.</param>
      <param name="action">Action to execute.</param>
      <param name="dueTime">Absolute time at which to execute the action.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Scheduler.ScheduleLongRunning(System.Reactive.Concurrency.ISchedulerLongRunning,System.Action{System.Reactive.Disposables.ICancelable})">
      <summary>
            Schedules an action to be executed.
            </summary>
      <param name="scheduler">Scheduler to execute the action on.</param>
      <param name="action">Action to execute.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
    </member>
    <member name="P:System.Reactive.Concurrency.Scheduler.Now">
      <summary>
            Gets the current time according to the local machine's system clock.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.Scheduler.Immediate">
      <summary>
            Gets a scheduler that schedules work immediately on the current thread.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.Scheduler.CurrentThread">
      <summary>
            Gets a scheduler that schedules work as soon as possible on the current thread.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.Scheduler.Default">
      <summary>
            Gets a scheduler that schedules work on the platform's default scheduler.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.Scheduler.ThreadPool">
      <summary>
            Gets a scheduler that schedules work on the thread pool.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.Scheduler.NewThread">
      <summary>
            Gets a scheduler that schedules work on a new thread using default thread creation options.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.Scheduler.TaskPool">
      <summary>
            Gets a scheduler that schedules work on Task Parallel Library (TPL) task pool using the default TaskScheduler.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.LocalScheduler">
      <summary>
            Abstract base class for machine-local schedulers, using the local system clock for time-based operations.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.LocalScheduler.WorkItem">
      <summary>
            Represents a work item in the absolute time scheduler.
            </summary>
      <remarks>
            This type is very similar to ScheduledItem, but we need a different Invoke signature to allow customization
            of the target scheduler (e.g. when called in a recursive scheduling context, see ExecuteNextShortTermWorkItem).
            </remarks>
    </member>
    <member name="T:System.Reactive.Concurrency.LocalScheduler.WorkItem`1">
      <summary>
            Represents a work item that closes over scheduler invocation state. Subtyping is
            used to have a common type for the scheduler queues.
            </summary>
    </member>
    <member name="F:System.Reactive.Concurrency.LocalScheduler.MAXERRORRATIO">
      <summary>
            Maximum error ratio for timer drift. We've seen machines with 10s drift on a
            daily basis, which is in the order 10E-4, so we allow for extra margin here.
            This value is used to calculate early arrival for the long term queue timer
            that will reevaluate work for the short term queue.
            
            Example:  -------------------------------...---------------------*-----$
                                                                             ^     ^
                                                                             |     |
                                                                           early  due
                                                                           0.999  1.0
                                                                           
            We also make the gap between early and due at least LONGTOSHORT so we have
            enough time to transition work to short term and as a courtesy to the
            destination scheduler to manage its queues etc.
            </summary>
    </member>
    <member name="F:System.Reactive.Concurrency.LocalScheduler.s_gate">
      <summary>
            Gate to protect queues and to synchronize scheduling decisions and system clock
            change management.
            </summary>
    </member>
    <member name="F:System.Reactive.Concurrency.LocalScheduler.s_longTerm">
      <summary>
            Long term work queue. Contains work that's due beyond SHORTTERM, computed at the
            time of enqueueing.
            </summary>
    </member>
    <member name="F:System.Reactive.Concurrency.LocalScheduler.s_nextLongTermTimer">
      <summary>
            Disposable resource for the long term timer that will reevaluate and dispatch the
            first item in the long term queue. A serial disposable is used to make "dispose
            current and assign new" logic easier. The disposable itself is never disposed.
            </summary>
    </member>
    <member name="F:System.Reactive.Concurrency.LocalScheduler.s_nextLongTermWorkItem">
      <summary>
            Item at the head of the long term queue for which the current long term timer is
            running. Used to detect changes in the queue and decide whether we should replace
            or can continue using the current timer (because no earlier long term work was
            added to the queue).
            </summary>
    </member>
    <member name="F:System.Reactive.Concurrency.LocalScheduler.s_shortTerm">
      <summary>
            Short term work queue. Contains work that's due soon, computed at the time of
            enqueueing or upon reevaluation of the long term queue causing migration of work
            items. This queue is kept in order to be able to relocate short term items back
            to the long term queue in case a system clock change occurs.
            </summary>
    </member>
    <member name="F:System.Reactive.Concurrency.LocalScheduler.s_shortTermWork">
      <summary>
            Set of disposable handles to all of the current short term work Schedule calls,
            allowing those to be cancelled upon a system clock change.
            </summary>
    </member>
    <member name="F:System.Reactive.Concurrency.LocalScheduler.SHORTTERM">
      <summary>
            Threshold where an item is considered to be short term work or gets moved from
            long term to short term.
            </summary>
    </member>
    <member name="F:System.Reactive.Concurrency.LocalScheduler.LONGTOSHORT">
      <summary>
            Minimum threshold for the long term timer to fire before the queue is reevaluated
            for short term work. This value is chosen to be less than SHORTTERM in order to
            ensure the timer fires and has work to transition to the short term queue.
            </summary>
    </member>
    <member name="F:System.Reactive.Concurrency.LocalScheduler.RETRYSHORT">
      <summary>
            Threshold used to determine when a short term timer has fired too early compared
            to the absolute due time. This provides a last chance protection against early
            completion of scheduled work, which can happen in case of time adjustment in the
            operating system (cf. GetSystemTimeAdjustment).
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.LocalScheduler.Enqueue``1(System.Reactive.Concurrency.IScheduler,``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Enqueues absolute time scheduled work in the timer queue or the short term work list.
            </summary>
      <param name="scheduler">Scheduler to run the work on. Typically "this" from the caller's perspective (LocalScheduler.Schedule), but parameter kept because we have a single (static) timer queue across all of Rx local schedulers.</param>
      <param name="state">State to pass to the action.</param>
      <param name="dueTime">Absolute time to run the work on. The timer queue is responsible to execute the work close to the specified time, also accounting for system clock changes.</param>
      <param name="action">Action to run, potentially recursing into the scheduler.</param>
      <returns>Disposable object to prevent the work from running.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.LocalScheduler.ScheduleShortTermWork(System.Reactive.Concurrency.LocalScheduler.WorkItem)">
      <summary>
            Schedule work that's due in the short term. This leads to relative scheduling calls to the
            underlying scheduler for short TimeSpan values. If the system clock changes in the meantime,
            the short term work is attempted to be cancelled and reevaluated.
            </summary>
      <param name="item">Work item to schedule in the short term. The caller is responsible to determine the work is indeed short term.</param>
    </member>
    <member name="M:System.Reactive.Concurrency.LocalScheduler.ExecuteNextShortTermWorkItem(System.Reactive.Concurrency.IScheduler,System.IDisposable)">
      <summary>
            Callback to process the next short term work item.
            </summary>
      <param name="scheduler">Recursive scheduler supplied by the underlying scheduler.</param>
      <param name="cancel">Disposable used to identify the work the timer was triggered for (see code for usage).</param>
      <returns>Empty disposable. Recursive work cancellation is wired through the original WorkItem.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.LocalScheduler.ScheduleLongTermWork(System.Reactive.Concurrency.LocalScheduler.WorkItem)">
      <summary>
            Schedule work that's due on the long term. This leads to the work being queued up for
            eventual transitioning to the short term work list.
            </summary>
      <param name="item">Work item to schedule on the long term. The caller is responsible to determine the work is indeed long term.</param>
    </member>
    <member name="M:System.Reactive.Concurrency.LocalScheduler.UpdateLongTermProcessingTimer">
      <summary>
            Updates the long term timer which is responsible to transition work from the head of the
            long term queue to the short term work list.
            </summary>
      <remarks>Should be called under the scheduler lock.</remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.LocalScheduler.EvaluateLongTermQueue(System.Object)">
      <summary>
            Evaluates the long term queue, transitioning short term work to the short term list,
            and adjusting the new long term processing timer accordingly.
            </summary>
      <param name="state">Ignored.</param>
    </member>
    <member name="M:System.Reactive.Concurrency.LocalScheduler.SystemClockChanged(System.Object,System.Reactive.PlatformServices.SystemClockChangedEventArgs)">
      <summary>
            Callback invoked when a system clock change is observed in order to adjust and reevaluate
            the internal scheduling queues.
            </summary>
      <param name="args">Currently not used.</param>
      <param name="sender">Currently not used.</param>
    </member>
    <member name="M:System.Reactive.Concurrency.LocalScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.LocalScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed after dueTime.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <param name="dueTime">Relative time after which to execute the action.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.LocalScheduler.Schedule``1(``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed at dueTime.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <param name="dueTime">Absolute time at which to execute the action.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.LocalScheduler.StartStopwatch">
      <summary>
            Starts a new stopwatch object.
            </summary>
      <returns>New stopwatch object; started at the time of the request.</returns>
      <remarks>
            Platform-specific scheduler implementations should reimplement IStopwatchProvider to provide a more
            efficient IStopwatch implementation (if available).
            </remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.LocalScheduler.GetService(System.Type)">
      <summary>
            Discovers scheduler services by interface type. The base class implementation returns
            requested services for each scheduler interface implemented by the derived class. For
            more control over service discovery, derived types can override this method.
            </summary>
      <param name="serviceType">Scheduler service interface type to discover.</param>
      <returns>Object implementing the requested service, if available; null otherwise.</returns>
    </member>
    <member name="P:System.Reactive.Concurrency.LocalScheduler.Now">
      <summary>
            Gets the scheduler's notion of current time.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.CurrentThreadScheduler">
      <summary>
            Represents an object that schedules units of work on the current thread.
            </summary>
      <seealso cref="P:System.Reactive.Concurrency.Scheduler.CurrentThread">Singleton instance of this type exposed through this static property.</seealso>
    </member>
    <member name="M:System.Reactive.Concurrency.CurrentThreadScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed after dueTime.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <param name="dueTime">Relative time after which to execute the action.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="P:System.Reactive.Concurrency.CurrentThreadScheduler.Instance">
      <summary>
            Gets the singleton instance of the current thread scheduler.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.CurrentThreadScheduler.ScheduleRequired">
      <summary>
            Gets a value that indicates whether the caller must call a Schedule method.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.CurrentThreadScheduler.IsScheduleRequired">
      <summary>
            Gets a value that indicates whether the caller must call a Schedule method.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.ImmediateScheduler">
      <summary>
            Represents an object that schedules units of work to run immediately on the current thread.
            </summary>
      <seealso cref="P:System.Reactive.Concurrency.Scheduler.Immediate">Singleton instance of this type exposed through this static property.</seealso>
    </member>
    <member name="M:System.Reactive.Concurrency.ImmediateScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.ImmediateScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed after dueTime.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <param name="dueTime">Relative time after which to execute the action.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="P:System.Reactive.Concurrency.ImmediateScheduler.Instance">
      <summary>
            Gets the singleton instance of the immediate scheduler.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.ScheduledItem`1">
      <summary>
            Abstract base class for scheduled work items.
            </summary>
      <typeparam name="TAbsolute">Absolute time representation type.</typeparam>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`1.#ctor(`0,System.Collections.Generic.IComparer{`0})">
      <summary>
            Creates a new scheduled work item to run at the specified time.
            </summary>
      <param name="dueTime">Absolute time at which the work item has to be executed.</param>
      <param name="comparer">Comparer used to compare work items based on their scheduled time.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`1.Invoke">
      <summary>
            Invokes the work item.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`1.InvokeCore">
      <summary>
            Implement this method to perform the work item invocation, returning a disposable object for deep cancellation.
            </summary>
      <returns>Disposable object used to cancel the work item and/or derived work items.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`1.CompareTo(System.Reactive.Concurrency.ScheduledItem{`0})">
      <summary>
            Compares the work item with another work item based on absolute time values.
            </summary>
      <param name="other">Work item to compare the current work item to.</param>
      <returns>Relative ordering between this and the specified work item.</returns>
      <remarks>The inequality operators are overloaded to provide results consistent with the IComparable implementation. Equality operators implement traditional reference equality semantics.</remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`1.op_LessThan(System.Reactive.Concurrency.ScheduledItem{`0},System.Reactive.Concurrency.ScheduledItem{`0})">
      <summary>
            Determines whether one specified ScheduledItem&lt;TAbsolute&gt; object is due before a second specified ScheduledItem&lt;TAbsolute&gt; object.
            </summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>true if the DueTime value of left is earlier than the DueTime value of right; otherwise, false.</returns>
      <remarks>This operator provides results consistent with the IComparable implementation.</remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`1.op_LessThanOrEqual(System.Reactive.Concurrency.ScheduledItem{`0},System.Reactive.Concurrency.ScheduledItem{`0})">
      <summary>
            Determines whether one specified ScheduledItem&lt;TAbsolute&gt; object is due before or at the same of a second specified ScheduledItem&lt;TAbsolute&gt; object.
            </summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>true if the DueTime value of left is earlier than or simultaneous with the DueTime value of right; otherwise, false.</returns>
      <remarks>This operator provides results consistent with the IComparable implementation.</remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`1.op_GreaterThan(System.Reactive.Concurrency.ScheduledItem{`0},System.Reactive.Concurrency.ScheduledItem{`0})">
      <summary>
            Determines whether one specified ScheduledItem&lt;TAbsolute&gt; object is due after a second specified ScheduledItem&lt;TAbsolute&gt; object.
            </summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>true if the DueTime value of left is later than the DueTime value of right; otherwise, false.</returns>
      <remarks>This operator provides results consistent with the IComparable implementation.</remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`1.op_GreaterThanOrEqual(System.Reactive.Concurrency.ScheduledItem{`0},System.Reactive.Concurrency.ScheduledItem{`0})">
      <summary>
            Determines whether one specified ScheduledItem&lt;TAbsolute&gt; object is due after or at the same time of a second specified ScheduledItem&lt;TAbsolute&gt; object.
            </summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>true if the DueTime value of left is later than or simultaneous with the DueTime value of right; otherwise, false.</returns>
      <remarks>This operator provides results consistent with the IComparable implementation.</remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`1.op_Equality(System.Reactive.Concurrency.ScheduledItem{`0},System.Reactive.Concurrency.ScheduledItem{`0})">
      <summary>
            Determines whether two specified ScheduledItem&lt;TAbsolute, TValue&gt; objects are equal.
            </summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>true if both ScheduledItem&lt;TAbsolute, TValue&gt; are equal; otherwise, false.</returns>
      <remarks>This operator does not provide results consistent with the IComparable implementation. Instead, it implements reference equality.</remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`1.op_Inequality(System.Reactive.Concurrency.ScheduledItem{`0},System.Reactive.Concurrency.ScheduledItem{`0})">
      <summary>
            Determines whether two specified ScheduledItem&lt;TAbsolute, TValue&gt; objects are inequal.
            </summary>
      <param name="left">The first object to compare.</param>
      <param name="right">The second object to compare.</param>
      <returns>true if both ScheduledItem&lt;TAbsolute, TValue&gt; are inequal; otherwise, false.</returns>
      <remarks>This operator does not provide results consistent with the IComparable implementation. Instead, it implements reference equality.</remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`1.Equals(System.Object)">
      <summary>
            Determines whether a ScheduledItem&lt;TAbsolute&gt; object is equal to the specified object.
            </summary>
      <param name="obj">The object to compare to the current ScheduledItem&lt;TAbsolute&gt; object.</param>
      <returns>true if the obj parameter is a ScheduledItem&lt;TAbsolute&gt; object and is equal to the current ScheduledItem&lt;TAbsolute&gt; object; otherwise, false.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`1.GetHashCode">
      <summary>
            Returns the hash code for the current ScheduledItem&lt;TAbsolute&gt; object.
            </summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`1.Cancel">
      <summary>
            Cancels the work item by disposing the resource returned by InvokeCore as soon as possible.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.ScheduledItem`1.DueTime">
      <summary>
            Gets the absolute time at which the item is due for invocation.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.ScheduledItem`1.IsCanceled">
      <summary>
            Gets whether the work item has received a cancellation request.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.ScheduledItem`2">
      <summary>
            Represents a scheduled work item based on the materialization of an IScheduler.Schedule method call.
            </summary>
      <typeparam name="TAbsolute">Absolute time representation type.</typeparam>
      <typeparam name="TValue">Type of the state passed to the scheduled action.</typeparam>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`2.#ctor(System.Reactive.Concurrency.IScheduler,`1,System.Func{System.Reactive.Concurrency.IScheduler,`1,System.IDisposable},`0,System.Collections.Generic.IComparer{`0})">
      <summary>
            Creates a materialized work item.
            </summary>
      <param name="scheduler">Recursive scheduler to invoke the scheduled action with.</param>
      <param name="state">State to pass to the scheduled action.</param>
      <param name="action">Scheduled action.</param>
      <param name="dueTime">Time at which to run the scheduled action.</param>
      <param name="comparer">Comparer used to compare work items based on their scheduled time.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`2.#ctor(System.Reactive.Concurrency.IScheduler,`1,System.Func{System.Reactive.Concurrency.IScheduler,`1,System.IDisposable},`0)">
      <summary>
            Creates a materialized work item.
            </summary>
      <param name="scheduler">Recursive scheduler to invoke the scheduled action with.</param>
      <param name="state">State to pass to the scheduled action.</param>
      <param name="action">Scheduled action.</param>
      <param name="dueTime">Time at which to run the scheduled action.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.ScheduledItem`2.InvokeCore">
      <summary>
            Invokes the scheduled action with the supplied recursive scheduler and state.
            </summary>
      <returns>Cancellation resource returned by the scheduled action.</returns>
    </member>
    <member name="T:System.Reactive.Concurrency.SchedulerQueue`1">
      <summary>
            Efficient scheduler queue that maintains scheduled items sorted by absolute time.
            </summary>
      <typeparam name="TAbsolute">Absolute time representation type.</typeparam>
      <remarks>This type is not thread safe; users should ensure proper synchronization.</remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.SchedulerQueue`1.#ctor">
      <summary>
            Creates a new scheduler queue with a default initial capacity.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.SchedulerQueue`1.#ctor(System.Int32)">
      <summary>
            Creats a new scheduler queue with the specified initial capacity.
            </summary>
      <param name="capacity">Initial capacity of the scheduler queue.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than zero.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.SchedulerQueue`1.Enqueue(System.Reactive.Concurrency.ScheduledItem{`0})">
      <summary>
            Enqueues the specified work item to be scheduled.
            </summary>
      <param name="scheduledItem">Work item to be scheduled.</param>
    </member>
    <member name="M:System.Reactive.Concurrency.SchedulerQueue`1.Remove(System.Reactive.Concurrency.ScheduledItem{`0})">
      <summary>
            Removes the specified work item from the scheduler queue.
            </summary>
      <param name="scheduledItem">Work item to be removed from the scheduler queue.</param>
      <returns>true if the item was found; false otherwise.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.SchedulerQueue`1.Dequeue">
      <summary>
            Dequeues the next work item from the scheduler queue.
            </summary>
      <returns>Next work item in the scheduler queue (removed).</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.SchedulerQueue`1.Peek">
      <summary>
            Peeks the next work item in the scheduler queue.
            </summary>
      <returns>Next work item in the scheduler queue (not removed).</returns>
    </member>
    <member name="P:System.Reactive.Concurrency.SchedulerQueue`1.Count">
      <summary>
            Gets the number of scheduled items in the scheduler queue.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.Synchronization">
      <summary>
            Provides basic synchronization and scheduling services for observable sequences.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.Synchronization.SubscribeOn``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Wraps the source sequence in order to run its subscription and unsubscription logic on the specified scheduler.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="scheduler">Scheduler to perform subscription and unsubscription actions on.</param>
      <returns>The source sequence whose subscriptions and unsubscriptions happen on the specified scheduler.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
            Only the side-effects of subscribing to the source sequence and disposing subscriptions to the source sequence are run on the specified scheduler.
            In order to invoke observer callbacks on the specified scheduler, e.g. to offload callback processing to a dedicated thread, use <see cref="M:System.Reactive.Concurrency.Synchronization.ObserveOn``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)" />.
            </remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.Synchronization.SubscribeOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)">
      <summary>
            Wraps the source sequence in order to run its subscription and unsubscription logic on the specified synchronization context.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="context">Synchronization context to perform subscription and unsubscription actions on.</param>
      <returns>The source sequence whose subscriptions and unsubscriptions happen on the specified synchronization context.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="context" /> is null.</exception>
      <remarks>
            Only the side-effects of subscribing to the source sequence and disposing subscriptions to the source sequence are run on the specified synchronization context.
            In order to invoke observer callbacks on the specified synchronization context, e.g. to post callbacks to a UI thread represented by the synchronization context, use <see cref="M:System.Reactive.Concurrency.Synchronization.ObserveOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)" />.
            </remarks>
    </member>
    <member name="M:System.Reactive.Concurrency.Synchronization.ObserveOn``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Wraps the source sequence in order to run its observer callbacks on the specified scheduler.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="scheduler">Scheduler to notify observers on.</param>
      <returns>The source sequence whose observations happen on the specified scheduler.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Synchronization.ObserveOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)">
      <summary>
            Wraps the source sequence in order to run its observer callbacks on the specified synchronization context.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="context">Synchronization context to notify observers on.</param>
      <returns>The source sequence whose observations happen on the specified synchronization context.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Synchronization.Synchronize``1(System.IObservable{``0})">
      <summary>
            Wraps the source sequence in order to ensure observer callbacks are properly serialized.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <returns>The source sequence whose outgoing calls to observers are synchronized.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.Synchronization.Synchronize``1(System.IObservable{``0},System.Object)">
      <summary>
            Wraps the source sequence in order to ensure observer callbacks are synchronized using the specified gate object.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="gate">Gate object to synchronize each observer call on.</param>
      <returns>The source sequence whose outgoing calls to observers are synchronized on the given gate object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="gate" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.IProducer`1">
      <summary>
            Interface with variance annotation; allows for better type checking when detecting capabilities in SubscribeSafe.
            </summary>
      <typeparam name="TSource">Type of the resulting sequence's elements.</typeparam>
    </member>
    <member name="T:System.Reactive.Producer`1">
      <summary>
            Base class for implementation of query operators, providing performance benefits over the use of Observable.Create.
            </summary>
      <typeparam name="TSource">Type of the resulting sequence's elements.</typeparam>
    </member>
    <member name="M:System.Reactive.Producer`1.Subscribe(System.IObserver{`0})">
      <summary>
            Publicly visible Subscribe method.
            </summary>
      <param name="observer">Observer to send notifications on. The implementation of a producer must ensure the correct message grammar on the observer.</param>
      <returns>IDisposable to cancel the subscription. This causes the underlying sink to be notified of unsubscription, causing it to prevent further messages from being sent to the observer.</returns>
    </member>
    <member name="M:System.Reactive.Producer`1.Run(System.IObserver{`0},System.IDisposable,System.Action{System.IDisposable})">
      <summary>
            Core implementation of the query operator, called upon a new subscription to the producer object.
            </summary>
      <param name="observer">Observer to send notifications on. The implementation of a producer must ensure the correct message grammar on the observer.</param>
      <param name="cancel">The subscription disposable object returned from the Run call, passed in such that it can be forwarded to the sink, allowing it to dispose the subscription upon sending a final message (or prematurely for other reasons).</param>
      <param name="setSink">Callback to communicate the sink object to the subscriber, allowing consumers to tunnel a Dispose call into the sink, which can stop the processing.</param>
      <returns>Disposable representing all the resources and/or subscriptions the operator uses to process events.</returns>
      <remarks>The <paramref name="observer">observer</paramref> passed in to this method is not protected using auto-detach behavior upon an OnError or OnCompleted call. The implementation must ensure proper resource disposal and enforce the message grammar.</remarks>
    </member>
    <member name="T:System.Reactive.Sink`1">
      <summary>
            Base class for implementation of query operators, providing a lightweight sink that can be disposed to mute the outgoing observer.
            </summary>
      <typeparam name="TSource">Type of the resulting sequence's elements.</typeparam>
      <remarks>Implementations of sinks are responsible to enforce the message grammar on the associated observer. Upon sending a terminal message, a pairing Dispose call should be made to trigger cancellation of related resources and to mute the outgoing observer.</remarks>
    </member>
    <member name="T:System.Reactive.Concurrency.SynchronizationContextScheduler">
      <summary>
            Represents an object that schedules units of work on a provided <seealso cref="T:System.Threading.SynchronizationContext" />.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.SynchronizationContextScheduler.#ctor(System.Threading.SynchronizationContext)">
      <summary>
            Creates an object that schedules units of work on the provided <see cref="T:System.Threading.SynchronizationContext" />.
            </summary>
      <param name="context">Synchronization context to schedule units of work on.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.SynchronizationContextScheduler.#ctor(System.Threading.SynchronizationContext,System.Boolean)">
      <summary>
            Creates an object that schedules units of work on the provided <see cref="T:System.Threading.SynchronizationContext" />.
            </summary>
      <param name="context">Synchronization context to schedule units of work on.</param>
      <param name="alwaysPost">Configures whether scheduling always posts to the synchronization context, regardless whether the caller is on the same synchronization context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.SynchronizationContextScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.SynchronizationContextScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed after dueTime.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <param name="dueTime">Relative time after which to execute the action.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Concurrency.DefaultScheduler">
      <summary>
            Represents an object that schedules units of work on the platform's default scheduler.
            </summary>
      <seealso cref="P:System.Reactive.Concurrency.Scheduler.Default">Singleton instance of this type exposed through this static property.</seealso>
    </member>
    <member name="M:System.Reactive.Concurrency.DefaultScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.DefaultScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed after dueTime, using a System.Threading.Timer object.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <param name="dueTime">Relative time after which to execute the action.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.DefaultScheduler.SchedulePeriodic``1(``0,System.TimeSpan,System.Func{``0,``0})">
      <summary>
            Schedules a periodic piece of work, using a System.Threading.Timer object.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">Initial state passed to the action upon the first iteration.</param>
      <param name="period">Period for running the work periodically.</param>
      <param name="action">Action to be executed, potentially updating the state.</param>
      <returns>The disposable object used to cancel the scheduled recurring action (best effort).</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="period" /> is less than TimeSpan.Zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.DefaultScheduler.GetService(System.Type)">
      <summary>
            Discovers scheduler services by interface type.
            </summary>
      <param name="serviceType">Scheduler service interface type to discover.</param>
      <returns>Object implementing the requested service, if available; null otherwise.</returns>
    </member>
    <member name="P:System.Reactive.Concurrency.DefaultScheduler.Instance">
      <summary>
            Gets the singleton instance of the default scheduler.
            </summary>
    </member>
    <member name="T:System.Reactive.Disposables.AnonymousDisposable">
      <summary>
            Represents an Action-based disposable.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.AnonymousDisposable.#ctor(System.Action)">
      <summary>
            Constructs a new disposable with the given action used for disposal.
            </summary>
      <param name="dispose">Disposal action which will be run upon calling Dispose.</param>
    </member>
    <member name="M:System.Reactive.Disposables.AnonymousDisposable.Dispose">
      <summary>
            Calls the disposal action if and only if the current instance hasn't been disposed yet.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.AnonymousDisposable.IsDisposed">
      <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
    </member>
    <member name="T:System.Reactive.Disposables.BooleanDisposable">
      <summary>
            Represents a disposable resource that can be checked for disposal status.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.BooleanDisposable.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.BooleanDisposable" /> class.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.BooleanDisposable.Dispose">
      <summary>
            Sets the status to disposed, which can be observer through the <see cref="P:System.Reactive.Disposables.BooleanDisposable.IsDisposed" /> property.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.BooleanDisposable.IsDisposed">
      <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
    </member>
    <member name="T:System.Reactive.Disposables.CancellationDisposable">
      <summary>
            Represents a disposable resource that has an associated <seealso cref="T:System.Threading.CancellationToken" /> that will be set to the cancellation requested state upon disposal.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.CancellationDisposable.#ctor(System.Threading.CancellationTokenSource)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.CancellationDisposable" /> class that uses an existing <seealso cref="T:System.Threading.CancellationTokenSource" />.
            </summary>
      <param name="cts">
        <seealso cref="T:System.Threading.CancellationTokenSource" /> used for cancellation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cts" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Disposables.CancellationDisposable.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.CancellationDisposable" /> class that uses a new <seealso cref="T:System.Threading.CancellationTokenSource" />.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.CancellationDisposable.Dispose">
      <summary>
            Cancels the underlying <seealso cref="T:System.Threading.CancellationTokenSource" />.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.CancellationDisposable.Token">
      <summary>
            Gets the <see cref="T:System.Threading.CancellationToken" /> used by this CancellationDisposable.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.CancellationDisposable.IsDisposed">
      <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
    </member>
    <member name="T:System.Reactive.Disposables.CompositeDisposable">
      <summary>
            Represents a group of disposable resources that are disposed together.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.CompositeDisposable.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.CompositeDisposable" /> class with no disposables contained by it initially.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.CompositeDisposable.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.CompositeDisposable" /> class with the specified number of disposables.
            </summary>
      <param name="capacity">The number of disposables that the new CompositeDisposable can initially store.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than zero.</exception>
    </member>
    <member name="M:System.Reactive.Disposables.CompositeDisposable.#ctor(System.IDisposable[])">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.CompositeDisposable" /> class from a group of disposables.
            </summary>
      <param name="disposables">Disposables that will be disposed together.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="disposables" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Disposables.CompositeDisposable.#ctor(System.Collections.Generic.IEnumerable{System.IDisposable})">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.CompositeDisposable" /> class from a group of disposables.
            </summary>
      <param name="disposables">Disposables that will be disposed together.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="disposables" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Disposables.CompositeDisposable.Add(System.IDisposable)">
      <summary>
            Adds a disposable to the CompositeDisposable or disposes the disposable if the CompositeDisposable is disposed.
            </summary>
      <param name="item">Disposable to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Disposables.CompositeDisposable.Remove(System.IDisposable)">
      <summary>
            Removes and disposes the first occurrence of a disposable from the CompositeDisposable.
            </summary>
      <param name="item">Disposable to remove.</param>
      <returns>true if found; false otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Disposables.CompositeDisposable.Dispose">
      <summary>
            Disposes all disposables in the group and removes them from the group.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.CompositeDisposable.Clear">
      <summary>
            Removes and disposes all disposables from the CompositeDisposable, but does not dispose the CompositeDisposable.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.CompositeDisposable.Contains(System.IDisposable)">
      <summary>
            Determines whether the CompositeDisposable contains a specific disposable.
            </summary>
      <param name="item">Disposable to search for.</param>
      <returns>true if the disposable was found; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Disposables.CompositeDisposable.CopyTo(System.IDisposable[],System.Int32)">
      <summary>
            Copies the disposables contained in the CompositeDisposable to an array, starting at a particular array index.
            </summary>
      <param name="array">Array to copy the contained disposables to.</param>
      <param name="arrayIndex">Target index at which to copy the first disposable of the group.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than zero. -or - <paramref name="arrayIndex" /> is larger than or equal to the array length.</exception>
    </member>
    <member name="M:System.Reactive.Disposables.CompositeDisposable.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the CompositeDisposable.
            </summary>
      <returns>An enumerator to iterate over the disposables.</returns>
    </member>
    <member name="P:System.Reactive.Disposables.CompositeDisposable.Count">
      <summary>
            Gets the number of disposables contained in the CompositeDisposable.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.CompositeDisposable.IsReadOnly">
      <summary>
            Always returns false.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.CompositeDisposable.IsDisposed">
      <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
    </member>
    <member name="T:System.Reactive.Disposables.ContextDisposable">
      <summary>
            Represents a disposable resource whose disposal invocation will be posted to the specified <seealso cref="T:System.Threading.SynchronizationContext" />.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.ContextDisposable.#ctor(System.Threading.SynchronizationContext,System.IDisposable)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.ContextDisposable" /> class that uses the specified <see cref="T:System.Threading.SynchronizationContext" /> on which to dispose the specified disposable resource.
            </summary>
      <param name="context">Context to perform disposal on.</param>
      <param name="disposable">Disposable whose Dispose operation to run on the given synchronization context.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> or <paramref name="disposable" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Disposables.ContextDisposable.Dispose">
      <summary>
            Disposes the underlying disposable on the provided <see cref="T:System.Threading.SynchronizationContext" />.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.ContextDisposable.Context">
      <summary>
            Gets the provided <see cref="T:System.Threading.SynchronizationContext" />.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.ContextDisposable.IsDisposed">
      <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
    </member>
    <member name="T:System.Reactive.Disposables.DefaultDisposable">
      <summary>
            Represents a disposable that does nothing on disposal.
            </summary>
    </member>
    <member name="F:System.Reactive.Disposables.DefaultDisposable.Instance">
      <summary>
            Singleton default disposable.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.DefaultDisposable.Dispose">
      <summary>
            Does nothing.
            </summary>
    </member>
    <member name="T:System.Reactive.Disposables.Disposable">
      <summary>
            Provides a set of static methods for creating Disposables.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.Disposable.Create(System.Action)">
      <summary>
            Creates a disposable object that invokes the specified action when disposed.
            </summary>
      <param name="dispose">Action to run during the first call to <see cref="M:System.IDisposable.Dispose" />. The action is guaranteed to be run at most once.</param>
      <returns>The disposable object that runs the given action upon disposal.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dispose" /> is null.</exception>
    </member>
    <member name="P:System.Reactive.Disposables.Disposable.Empty">
      <summary>
            Gets the disposable that does nothing when disposed.
            </summary>
    </member>
    <member name="T:System.Reactive.Disposables.MultipleAssignmentDisposable">
      <summary>
            Represents a disposable resource whose underlying disposable resource can be swapped for another disposable resource.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.MultipleAssignmentDisposable.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.MultipleAssignmentDisposable" /> class with no current underlying disposable.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.MultipleAssignmentDisposable.Dispose">
      <summary>
            Disposes the underlying disposable as well as all future replacements.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.MultipleAssignmentDisposable.IsDisposed">
      <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.MultipleAssignmentDisposable.Disposable">
      <summary>
            Gets or sets the underlying disposable. After disposal, the result of getting this property is undefined.
            </summary>
      <remarks>If the MutableDisposable has already been disposed, assignment to this property causes immediate disposal of the given disposable object.</remarks>
    </member>
    <member name="T:System.Reactive.Disposables.RefCountDisposable">
      <summary>
            Represents a disposable resource that only disposes its underlying disposable resource when all <see cref="M:System.Reactive.Disposables.RefCountDisposable.GetDisposable">dependent disposable objects</see> have been disposed.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.RefCountDisposable.#ctor(System.IDisposable)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.RefCountDisposable" /> class with the specified disposable.
            </summary>
      <param name="disposable">Underlying disposable.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="disposable" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Disposables.RefCountDisposable.GetDisposable">
      <summary>
            Returns a dependent disposable that when disposed decreases the refcount on the underlying disposable.
            </summary>
      <returns>A dependent disposable contributing to the reference count that manages the underlying disposable's lifetime.</returns>
    </member>
    <member name="M:System.Reactive.Disposables.RefCountDisposable.Dispose">
      <summary>
            Disposes the underlying disposable only when all dependent disposables have been disposed.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.RefCountDisposable.IsDisposed">
      <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
    </member>
    <member name="T:System.Reactive.Disposables.ScheduledDisposable">
      <summary>
            Represents a disposable resource whose disposal invocation will be scheduled on the specified <seealso cref="T:System.Reactive.Concurrency.IScheduler" />.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.ScheduledDisposable.#ctor(System.Reactive.Concurrency.IScheduler,System.IDisposable)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.ScheduledDisposable" /> class that uses an <see cref="T:System.Reactive.Concurrency.IScheduler" /> on which to dispose the disposable.
            </summary>
      <param name="scheduler">Scheduler where the disposable resource will be disposed on.</param>
      <param name="disposable">Disposable resource to dispose on the given scheduler.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="disposable" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Disposables.ScheduledDisposable.Dispose">
      <summary>
            Disposes the wrapped disposable on the provided scheduler.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.ScheduledDisposable.Scheduler">
      <summary>
            Gets the scheduler where the disposable resource will be disposed on.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.ScheduledDisposable.Disposable">
      <summary>
            Gets the underlying disposable. After disposal, the result is undefined.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.ScheduledDisposable.IsDisposed">
      <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
    </member>
    <member name="T:System.Reactive.Disposables.SerialDisposable">
      <summary>
            Represents a disposable resource whose underlying disposable resource can be replaced by another disposable resource, causing automatic disposal of the previous underlying disposable resource.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.SerialDisposable.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.SerialDisposable" /> class.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.SerialDisposable.Dispose">
      <summary>
            Disposes the underlying disposable as well as all future replacements.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.SerialDisposable.IsDisposed">
      <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.SerialDisposable.Disposable">
      <summary>
            Gets or sets the underlying disposable.
            </summary>
      <remarks>If the SerialDisposable has already been disposed, assignment to this property causes immediate disposal of the given disposable object. Assigning this property disposes the previous disposable object.</remarks>
    </member>
    <member name="T:System.Reactive.Disposables.SingleAssignmentDisposable">
      <summary>
            Represents a disposable resource which only allows a single assignment of its underlying disposable resource.
            If an underlying disposable resource has already been set, future attempts to set the underlying disposable resource will throw an <see cref="T:System.InvalidOperationException" />.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.SingleAssignmentDisposable.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Disposables.SingleAssignmentDisposable" /> class.
            </summary>
    </member>
    <member name="M:System.Reactive.Disposables.SingleAssignmentDisposable.Dispose">
      <summary>
            Disposes the underlying disposable.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.SingleAssignmentDisposable.IsDisposed">
      <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.SingleAssignmentDisposable.Disposable">
      <summary>
            Gets or sets the underlying disposable. After disposal, the result of getting this property is undefined.
            </summary>
      <exception cref="T:System.InvalidOperationException">Thrown if the SingleAssignmentDisposable has already been assigned to.</exception>
    </member>
    <member name="T:System.Reactive.PlatformServices.IExceptionServices">
      <summary>
            (Infrastructure) Services to rethrow exceptions.
            </summary>
      <remarks>
            This type is used by the Rx infrastructure and not meant for public consumption or implementation.
            No guarantees are made about forward compatibility of the type's functionality and its usage.
            </remarks>
    </member>
    <member name="M:System.Reactive.PlatformServices.IExceptionServices.Rethrow(System.Exception)">
      <summary>
            Rethrows the specified exception.
            </summary>
      <param name="exception">Exception to rethrow.</param>
    </member>
    <member name="T:System.Reactive.PlatformServices.HostLifecycleService">
      <summary>
            (Infrastructure) Provides access to the host's lifecycle management services.
            </summary>
    </member>
    <member name="M:System.Reactive.PlatformServices.HostLifecycleService.AddRef">
      <summary>
            Adds a reference to the host lifecycle manager, causing it to be sending notifications.
            </summary>
    </member>
    <member name="M:System.Reactive.PlatformServices.HostLifecycleService.Release">
      <summary>
            Removes a reference to the host lifecycle manager, causing it to stop sending notifications
            if the removed reference was the last one.
            </summary>
    </member>
    <member name="E:System.Reactive.PlatformServices.HostLifecycleService.Suspending">
      <summary>
            Event that gets raised when the host suspends the application.
            </summary>
    </member>
    <member name="E:System.Reactive.PlatformServices.HostLifecycleService.Resuming">
      <summary>
            Event that gets raised when the host resumes the application.
            </summary>
    </member>
    <member name="T:System.Reactive.PlatformServices.IHostLifecycleNotifications">
      <summary>
            (Infrastructure) Provides notifications about the host's lifecycle events.
            </summary>
    </member>
    <member name="E:System.Reactive.PlatformServices.IHostLifecycleNotifications.Suspending">
      <summary>
            Event that gets raised when the host suspends.
            </summary>
    </member>
    <member name="E:System.Reactive.PlatformServices.IHostLifecycleNotifications.Resuming">
      <summary>
            Event that gets raised when the host resumes.
            </summary>
    </member>
    <member name="T:System.Reactive.PlatformServices.HostSuspendingEventArgs">
      <summary>
            (Infrastructure) Event arguments for host suspension events.
            </summary>
    </member>
    <member name="T:System.Reactive.PlatformServices.HostResumingEventArgs">
      <summary>
            (Infrastructure) Event arguments for host resumption events.
            </summary>
    </member>
    <member name="T:System.Reactive.PlatformServices.IPlatformEnlightenmentProvider">
      <summary>
            (Infrastructure) Interface for enlightenment providers.
            </summary>
      <remarks>
            This type is used by the Rx infrastructure and not meant for public consumption or implementation.
            No guarantees are made about forward compatibility of the type's functionality and its usage.
            </remarks>
    </member>
    <member name="M:System.Reactive.PlatformServices.IPlatformEnlightenmentProvider.GetService``1(System.Object[])">
      <summary>
            (Infastructure) Tries to gets the specified service.
            </summary>
      <typeparam name="T">Service type.</typeparam>
      <param name="args">Optional set of arguments.</param>
      <returns>Service instance or null if not found.</returns>
    </member>
    <member name="T:System.Reactive.PlatformServices.PlatformEnlightenmentProvider">
      <summary>
            (Infrastructure) Provider for platform-specific framework enlightenments.
            </summary>
      <remarks>
            This type is used by the Rx infrastructure and not meant for public consumption or implementation.
            </remarks>
    </member>
    <member name="P:System.Reactive.PlatformServices.PlatformEnlightenmentProvider.Current">
      <summary>
            (Infrastructure) Gets the current enlightenment provider. If none is loaded yet, accessing this property triggers provider resolution.
            </summary>
      <remarks>
            This member is used by the Rx infrastructure and not meant for public consumption or implementation.
            </remarks>
    </member>
    <member name="T:System.Reactive.PlatformServices.SystemClock">
      <summary>
            (Infrastructure) Provides access to local system clock services.
            </summary>
      <remarks>
            This type is used by the Rx infrastructure and not meant for public consumption or implementation.
            No guarantees are made about forward compatibility of the type's functionality and its usage.
            </remarks>
    </member>
    <member name="M:System.Reactive.PlatformServices.SystemClock.AddRef">
      <summary>
            Adds a reference to the system clock monitor, causing it to be sending notifications.
            </summary>
      <exception cref="T:System.NotSupportedException">Thrown when the system doesn't support sending clock change notifications.</exception>
    </member>
    <member name="M:System.Reactive.PlatformServices.SystemClock.Release">
      <summary>
            Removes a reference to the system clock monitor, causing it to stop sending notifications
            if the removed reference was the last one.
            </summary>
    </member>
    <member name="P:System.Reactive.PlatformServices.SystemClock.UtcNow">
      <summary>
            Gets the local system clock time.
            </summary>
    </member>
    <member name="E:System.Reactive.PlatformServices.SystemClock.SystemClockChanged">
      <summary>
            Event that gets raised when a system clock change is detected, if there's any interest as indicated by AddRef calls.
            </summary>
    </member>
    <member name="T:System.Reactive.PlatformServices.ISystemClock">
      <summary>
            (Infrastructure) Provides access to the local system clock.
            </summary>
      <remarks>
            This type is used by the Rx infrastructure and not meant for public consumption or implementation.
            No guarantees are made about forward compatibility of the type's functionality and its usage.
            </remarks>
    </member>
    <member name="P:System.Reactive.PlatformServices.ISystemClock.UtcNow">
      <summary>
            Gets the current time.
            </summary>
    </member>
    <member name="T:System.Reactive.PlatformServices.INotifySystemClockChanged">
      <summary>
            (Infrastructure) Provides a mechanism to notify local schedulers about system clock changes.
            </summary>
      <remarks>
            This type is used by the Rx infrastructure and not meant for public consumption or implementation.
            No guarantees are made about forward compatibility of the type's functionality and its usage.
            </remarks>
    </member>
    <member name="E:System.Reactive.PlatformServices.INotifySystemClockChanged.SystemClockChanged">
      <summary>
            Event that gets raised when a system clock change is detected.
            </summary>
    </member>
    <member name="T:System.Reactive.PlatformServices.SystemClockChangedEventArgs">
      <summary>
            (Infrastructure) Event arguments for system clock change notifications.
            </summary>
      <remarks>
            This type is used by the Rx infrastructure and not meant for public consumption or implementation.
            No guarantees are made about forward compatibility of the type's functionality and its usage.
            </remarks>
    </member>
    <member name="M:System.Reactive.PlatformServices.SystemClockChangedEventArgs.#ctor">
      <summary>
            Creates a new system clock notification object with unknown old and new times.
            </summary>
    </member>
    <member name="M:System.Reactive.PlatformServices.SystemClockChangedEventArgs.#ctor(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>
            Creates a new system clock notification object with the specified old and new times.
            </summary>
      <param name="oldTime">Time before the system clock changed, or DateTimeOffset.MinValue if not known.</param>
      <param name="newTime">Time after the system clock changed, or DateTimeOffset.MaxValue if not known.</param>
    </member>
    <member name="P:System.Reactive.PlatformServices.SystemClockChangedEventArgs.OldTime">
      <summary>
            Gets the time before the system clock changed, or DateTimeOffset.MinValue if not known.
            </summary>
    </member>
    <member name="P:System.Reactive.PlatformServices.SystemClockChangedEventArgs.NewTime">
      <summary>
            Gets the time after the system clock changed, or DateTimeOffset.MaxValue if not known.
            </summary>
    </member>
    <member name="T:System.Reactive.PlatformServices.DefaultSystemClock">
      <summary>
            (Infrastructure) Provides access to the local system clock.
            </summary>
    </member>
    <member name="P:System.Reactive.PlatformServices.DefaultSystemClock.UtcNow">
      <summary>
            Gets the current time.
            </summary>
    </member>
    <member name="T:System.Reactive.PlatformServices.PeriodicTimerSystemClockMonitor">
      <summary>
            (Infrastructure) Monitors for system clock changes based on a periodic timer.
            </summary>
    </member>
    <member name="M:System.Reactive.PlatformServices.PeriodicTimerSystemClockMonitor.#ctor(System.TimeSpan)">
      <summary>
            Creates a new monitor for system clock changes with the specified polling frequency.
            </summary>
      <param name="period">Polling frequency for system clock changes.</param>
    </member>
    <member name="E:System.Reactive.PlatformServices.PeriodicTimerSystemClockMonitor.SystemClockChanged">
      <summary>
            Event that gets raised when a system clock change is detected.
            </summary>
    </member>
    <member name="T:System.Reactive.NotificationKind">
      <summary>
            Indicates the type of a notification.
            </summary>
    </member>
    <member name="F:System.Reactive.NotificationKind.OnNext">
      <summary>
            Represents an OnNext notification.
            </summary>
    </member>
    <member name="F:System.Reactive.NotificationKind.OnError">
      <summary>
            Represents an OnError notification.
            </summary>
    </member>
    <member name="F:System.Reactive.NotificationKind.OnCompleted">
      <summary>
            Represents an OnCompleted notification.
            </summary>
    </member>
    <member name="T:System.Reactive.Notification`1">
      <summary>
            Represents a notification to an observer.
            </summary>
      <typeparam name="T">The type of the elements received by the observer.</typeparam>
    </member>
    <member name="T:System.Reactive.Notification`1.OnNextNotification">
      <summary>
            Represents an OnNext notification to an observer.
            </summary>
    </member>
    <member name="M:System.Reactive.Notification`1.OnNextNotification.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
    </member>
    <member name="M:System.Reactive.Notification`1.OnNextNotification.ToString">
      <summary>
            Returns a string representation of this instance.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.OnNextNotification.Value">
      <summary>
            Returns the value of an OnNext notification.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.OnNextNotification.Exception">
      <summary>
            Returns null.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.OnNextNotification.HasValue">
      <summary>
            Returns true.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.OnNextNotification.Kind">
      <summary>
            Returns NotificationKind.OnNext.
            </summary>
    </member>
    <member name="T:System.Reactive.Notification`1.OnErrorNotification">
      <summary>
            Represents an OnError notification to an observer.
            </summary>
    </member>
    <member name="M:System.Reactive.Notification`1.OnErrorNotification.#ctor(System.Exception)">
      <summary>
            Constructs a notification of an exception.
            </summary>
    </member>
    <member name="M:System.Reactive.Notification`1.OnErrorNotification.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
    </member>
    <member name="M:System.Reactive.Notification`1.OnErrorNotification.ToString">
      <summary>
            Returns a string representation of this instance.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.OnErrorNotification.Value">
      <summary>
            Throws the exception.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.OnErrorNotification.Exception">
      <summary>
            Returns the exception.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.OnErrorNotification.HasValue">
      <summary>
            Returns false.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.OnErrorNotification.Kind">
      <summary>
            Returns NotificationKind.OnError.
            </summary>
    </member>
    <member name="T:System.Reactive.Notification`1.OnCompletedNotification">
      <summary>
            Represents an OnCompleted notification to an observer.
            </summary>
    </member>
    <member name="M:System.Reactive.Notification`1.OnCompletedNotification.#ctor">
      <summary>
            Constructs a notification of the end of a sequence.
            </summary>
    </member>
    <member name="M:System.Reactive.Notification`1.OnCompletedNotification.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
    </member>
    <member name="M:System.Reactive.Notification`1.OnCompletedNotification.ToString">
      <summary>
            Returns a string representation of this instance.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.OnCompletedNotification.Value">
      <summary>
            Throws an InvalidOperationException.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.OnCompletedNotification.Exception">
      <summary>
            Returns null.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.OnCompletedNotification.HasValue">
      <summary>
            Returns false.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.OnCompletedNotification.Kind">
      <summary>
            Returns NotificationKind.OnCompleted.
            </summary>
    </member>
    <member name="M:System.Reactive.Notification`1.#ctor">
      <summary>
            Default constructor used by derived types.
            </summary>
    </member>
    <member name="M:System.Reactive.Notification`1.Equals(System.Reactive.Notification{`0})">
      <summary>
            Determines whether the current Notification&lt;T&gt; object has the same observer message payload as a specified Notification&lt;T&gt; value.
            </summary>
      <param name="other">An object to compare to the current Notification&lt;T&gt; object.</param>
      <returns>true if both Notification&lt;T&gt; objects have the same observer message payload; otherwise, false.</returns>
      <remarks>
            Equality of Notification&lt;T&gt; objects is based on the equality of the observer message payload they represent, including the notification Kind and the Value or Exception (if any).
            This means two Notification&lt;T&gt; objects can be equal even though they don't represent the same observer method call, but have the same Kind and have equal parameters passed to the observer method.
            In case one wants to determine whether two Notification&lt;T&gt; objects represent the same observer method call, use Object.ReferenceEquals identity equality instead.
            </remarks>
    </member>
    <member name="M:System.Reactive.Notification`1.op_Equality(System.Reactive.Notification{`0},System.Reactive.Notification{`0})">
      <summary>
            Determines whether the two specified Notification&lt;T&gt; objects have the same observer message payload.
            </summary>
      <param name="left">The first Notification&lt;T&gt; to compare, or null.</param>
      <param name="right">The second Notification&lt;T&gt; to compare, or null.</param>
      <returns>true if the first Notification&lt;T&gt; value has the same observer message payload as the second Notification&lt;T&gt; value; otherwise, false.</returns>
      <remarks>
            Equality of Notification&lt;T&gt; objects is based on the equality of the observer message payload they represent, including the notification Kind and the Value or Exception (if any).
            This means two Notification&lt;T&gt; objects can be equal even though they don't represent the same observer method call, but have the same Kind and have equal parameters passed to the observer method.
            In case one wants to determine whether two Notification&lt;T&gt; objects represent the same observer method call, use Object.ReferenceEquals identity equality instead.
            </remarks>
    </member>
    <member name="M:System.Reactive.Notification`1.op_Inequality(System.Reactive.Notification{`0},System.Reactive.Notification{`0})">
      <summary>
            Determines whether the two specified Notification&lt;T&gt; objects have a different observer message payload.
            </summary>
      <param name="left">The first Notification&lt;T&gt; to compare, or null.</param>
      <param name="right">The second Notification&lt;T&gt; to compare, or null.</param>
      <returns>true if the first Notification&lt;T&gt; value has a different observer message payload as the second Notification&lt;T&gt; value; otherwise, false.</returns>
      <remarks>
            Equality of Notification&lt;T&gt; objects is based on the equality of the observer message payload they represent, including the notification Kind and the Value or Exception (if any).
            This means two Notification&lt;T&gt; objects can be equal even though they don't represent the same observer method call, but have the same Kind and have equal parameters passed to the observer method.
            In case one wants to determine whether two Notification&lt;T&gt; objects represent a different observer method call, use Object.ReferenceEquals identity equality instead.
            </remarks>
    </member>
    <member name="M:System.Reactive.Notification`1.Equals(System.Object)">
      <summary>
            Determines whether the specified System.Object is equal to the current Notification&lt;T&gt;.
            </summary>
      <param name="obj">The System.Object to compare with the current Notification&lt;T&gt;.</param>
      <returns>true if the specified System.Object is equal to the current Notification&lt;T&gt;; otherwise, false.</returns>
      <remarks>
            Equality of Notification&lt;T&gt; objects is based on the equality of the observer message payload they represent, including the notification Kind and the Value or Exception (if any).
            This means two Notification&lt;T&gt; objects can be equal even though they don't represent the same observer method call, but have the same Kind and have equal parameters passed to the observer method.
            In case one wants to determine whether two Notification&lt;T&gt; objects represent the same observer method call, use Object.ReferenceEquals identity equality instead.
            </remarks>
    </member>
    <member name="M:System.Reactive.Notification`1.Accept(System.IObserver{`0})">
      <summary>
            Invokes the observer's method corresponding to the notification.
            </summary>
      <param name="observer">Observer to invoke the notification on.</param>
    </member>
    <member name="M:System.Reactive.Notification`1.Accept``1(System.Reactive.IObserver{`0,``0})">
      <summary>
            Invokes the observer's method corresponding to the notification and returns the produced result.
            </summary>
      <typeparam name="TResult">The type of the result returned from the observer's notification handlers.</typeparam>
      <param name="observer">Observer to invoke the notification on.</param>
      <returns>Result produced by the observation.</returns>
    </member>
    <member name="M:System.Reactive.Notification`1.Accept(System.Action{`0},System.Action{System.Exception},System.Action)">
      <summary>
            Invokes the delegate corresponding to the notification.
            </summary>
      <param name="onNext">Delegate to invoke for an OnNext notification.</param>
      <param name="onError">Delegate to invoke for an OnError notification.</param>
      <param name="onCompleted">Delegate to invoke for an OnCompleted notification.</param>
    </member>
    <member name="M:System.Reactive.Notification`1.Accept``1(System.Func{`0,``0},System.Func{System.Exception,``0},System.Func{``0})">
      <summary>
            Invokes the delegate corresponding to the notification and returns the produced result.
            </summary>
      <typeparam name="TResult">The type of the result returned from the notification handler delegates.</typeparam>
      <param name="onNext">Delegate to invoke for an OnNext notification.</param>
      <param name="onError">Delegate to invoke for an OnError notification.</param>
      <param name="onCompleted">Delegate to invoke for an OnCompleted notification.</param>
      <returns>Result produced by the observation.</returns>
    </member>
    <member name="M:System.Reactive.Notification`1.ToObservable">
      <summary>
            Returns an observable sequence with a single notification, using the immediate scheduler.
            </summary>
      <returns>The observable sequence that surfaces the behavior of the notification upon subscription.</returns>
    </member>
    <member name="M:System.Reactive.Notification`1.ToObservable(System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence with a single notification.
            </summary>
      <param name="scheduler">Scheduler to send out the notification calls on.</param>
      <returns>The observable sequence that surfaces the behavior of the notification upon subscription.</returns>
    </member>
    <member name="P:System.Reactive.Notification`1.Value">
      <summary>
            Returns the value of an OnNext notification or throws an exception.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.HasValue">
      <summary>
            Returns a value that indicates whether the notification has a value.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.Exception">
      <summary>
            Returns the exception of an OnError notification or returns null.
            </summary>
    </member>
    <member name="P:System.Reactive.Notification`1.Kind">
      <summary>
            Gets the kind of notification that is represented.
            </summary>
    </member>
    <member name="T:System.Reactive.Notification">
      <summary>
            Provides a set of static methods for constructing notifications.
            </summary>
    </member>
    <member name="M:System.Reactive.Notification.CreateOnNext``1(``0)">
      <summary>
            Creates an object that represents an OnNext notification to an observer.
            </summary>
      <typeparam name="T">The type of the elements received by the observer. Upon dematerialization of the notifications into an observable sequence, this type is used as the element type for the sequence.</typeparam>
      <param name="value">The value contained in the notification.</param>
      <returns>The OnNext notification containing the value.</returns>
    </member>
    <member name="M:System.Reactive.Notification.CreateOnError``1(System.Exception)">
      <summary>
            Creates an object that represents an OnError notification to an observer.
            </summary>
      <typeparam name="T">The type of the elements received by the observer. Upon dematerialization of the notifications into an observable sequence, this type is used as the element type for the sequence.</typeparam>
      <param name="error">The exception contained in the notification.</param>
      <returns>The OnError notification containing the exception.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="error" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Notification.CreateOnCompleted``1">
      <summary>
            Creates an object that represents an OnCompleted notification to an observer.
            </summary>
      <typeparam name="T">The type of the elements received by the observer. Upon dematerialization of the notifications into an observable sequence, this type is used as the element type for the sequence.</typeparam>
      <returns>The OnCompleted notification.</returns>
    </member>
    <member name="T:System.Reactive.Unit">
      <summary>
            Represents a type with a single value. This type is often used to denote the successful completion of a void-returning method (C#) or a Sub procedure (Visual Basic).
            </summary>
    </member>
    <member name="M:System.Reactive.Unit.Equals(System.Reactive.Unit)">
      <summary>
            Determines whether the specified Unit values is equal to the current Unit. Because Unit has a single value, this always returns true.
            </summary>
      <param name="other">An object to compare to the current Unit value.</param>
      <returns>Because Unit has a single value, this always returns true.</returns>
    </member>
    <member name="M:System.Reactive.Unit.Equals(System.Object)">
      <summary>
            Determines whether the specified System.Object is equal to the current Unit.
            </summary>
      <param name="obj">The System.Object to compare with the current Unit.</param>
      <returns>true if the specified System.Object is a Unit value; otherwise, false.</returns>
    </member>
    <member name="M:System.Reactive.Unit.GetHashCode">
      <summary>
            Returns the hash code for the current Unit value.
            </summary>
      <returns>A hash code for the current Unit value.</returns>
    </member>
    <member name="M:System.Reactive.Unit.ToString">
      <summary>
            Returns a string representation of the current Unit value.
            </summary>
      <returns>String representation of the current Unit value.</returns>
    </member>
    <member name="M:System.Reactive.Unit.op_Equality(System.Reactive.Unit,System.Reactive.Unit)">
      <summary>
            Determines whether the two specified Unit values are equal. Because Unit has a single value, this always returns true.
            </summary>
      <param name="first">The first Unit value to compare.</param>
      <param name="second">The second Unit value to compare.</param>
      <returns>Because Unit has a single value, this always returns true.</returns>
    </member>
    <member name="M:System.Reactive.Unit.op_Inequality(System.Reactive.Unit,System.Reactive.Unit)">
      <summary>
            Determines whether the two specified Unit values are not equal. Because Unit has a single value, this always returns false.
            </summary>
      <param name="first">The first Unit value to compare.</param>
      <param name="second">The second Unit value to compare.</param>
      <returns>Because Unit has a single value, this always returns false.</returns>
    </member>
    <member name="P:System.Reactive.Unit.Default">
      <summary>
            Gets the single unit value.
            </summary>
    </member>
    <member name="T:System.Reactive.Strings_Core">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Core.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Core.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Core.CANT_OBTAIN_SCHEDULER">
      <summary>
              Looks up a localized string similar to Using the Scheduler.{0} property is no longer supported due to refactoring of the API surface and elimination of platform-specific dependencies. Please include System.Reactive.PlatformServices for your target platform and use the {0}Scheduler type instead..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Core.COMPLETED_NO_VALUE">
      <summary>
              Looks up a localized string similar to OnCompleted notification doesn't have a value..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Core.DISPOSABLE_ALREADY_ASSIGNED">
      <summary>
              Looks up a localized string similar to Disposable has already been assigned..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Core.FAILED_CLOCK_MONITORING">
      <summary>
              Looks up a localized string similar to Failed to start monitoring system clock changes..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Core.HEAP_EMPTY">
      <summary>
              Looks up a localized string similar to Heap is empty..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Core.REENTRANCY_DETECTED">
      <summary>
              Looks up a localized string similar to Reentrancy has been detected..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Core.OBSERVER_TERMINATED">
      <summary>
              Looks up a localized string similar to Observer has already terminated..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Core.SCHEDULER_OPERATION_ALREADY_AWAITED">
      <summary>
              Looks up a localized string similar to This scheduler operation has already been awaited..
            </summary>
    </member>
    <member name="T:System.Reactive.NamespaceDoc">
      <summary>
            The <b>System.Reactive</b> namespace contains interfaces and classes used throughout the Reactive Extensions library.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.NamespaceDoc">
      <summary>
            The <b>System.Reactive.Concurrency</b> namespace contains interfaces and classes that provide the scheduler infrastructure used by Reactive Extensions to construct and
            process event streams. Schedulers are used to parameterize the concurrency introduced by query operators, provide means to virtualize time, to process historical data,
            and to write unit tests for functionality built using Reactive Extensions constructs.
            </summary>
    </member>
    <member name="T:System.Reactive.Disposables.NamespaceDoc">
      <summary>
            The <b>System.Reactive.Disposables</b> namespace contains interfaces and classes that provide a compositional set of constructs used to deal with resource and subscription
            management in Reactive Extensions. Those types are used extensively within the implementation of Reactive Extensions and are useful when writing custom query operators or
            schedulers.
            </summary>
    </member>
    <member name="T:System.Reactive.Linq.NamespaceDoc">
      <summary>
            The <b>System.Reactive.Linq</b> namespace contains interfaces and classes that support expressing queries over observable sequences, using Language Integrated Query (LINQ).
            Query operators are made available as extension methods for IObservable&lt;T&gt; and IQbservable&lt;T&gt; defined on the Observable and Qbservable classes, respectively.
            </summary>
    </member>
    <member name="T:System.Reactive.Subjects.NamespaceDoc">
      <summary>
            The <b>System.Reactive.Subjects</b> namespace contains interfaces and classes to represent subjects, which are objects implementing both IObservable&lt;T&gt; and IObserver&lt;T&gt;.
            Subjects are often used as sources of events, allowing one party to raise events and allowing another party to write queries over the event stream. Because of their ability to
            have multiple registered observers, subjects are also used as a facility to provide multicast behavior for event streams in queries.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.ISchedulerPeriodic">
      <summary>
            Scheduler with support for running periodic tasks.
            This type of scheduler can be used to run timers more efficiently instead of using recursive scheduling.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.ISchedulerPeriodic.SchedulePeriodic``1(``0,System.TimeSpan,System.Func{``0,``0})">
      <summary>
            Schedules a periodic piece of work.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">Initial state passed to the action upon the first iteration.</param>
      <param name="period">Period for running the work periodically.</param>
      <param name="action">Action to be executed, potentially updating the state.</param>
      <returns>The disposable object used to cancel the scheduled recurring action (best effort).</returns>
    </member>
    <member name="T:System.Reactive.Concurrency.IStopwatchProvider">
      <summary>
            Provider for IStopwatch objects.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.IStopwatchProvider.StartStopwatch">
      <summary>
            Starts a new stopwatch object.
            </summary>
      <returns>New stopwatch object; started at the time of the request.</returns>
    </member>
    <member name="T:System.Reactive.Concurrency.IScheduledItem`1">
      <summary>
            Represents a work item that has been scheduled.
            </summary>
      <typeparam name="TAbsolute">Absolute time representation type.</typeparam>
    </member>
    <member name="M:System.Reactive.Concurrency.IScheduledItem`1.Invoke">
      <summary>
            Invokes the work item.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.IScheduledItem`1.DueTime">
      <summary>
            Gets the absolute time at which the item is due for invocation.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.IScheduler">
      <summary>
            Represents an object that schedules units of work.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.IScheduler.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.IScheduler.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed after dueTime.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <param name="dueTime">Relative time after which to execute the action.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.IScheduler.Schedule``1(``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed at dueTime.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <param name="dueTime">Absolute time at which to execute the action.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
    </member>
    <member name="P:System.Reactive.Concurrency.IScheduler.Now">
      <summary>
            Gets the scheduler's notion of current time.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.ISchedulerLongRunning">
      <summary>
            Scheduler with support for starting long-running tasks.
            This type of scheduler can be used to run loops more efficiently instead of using recursive scheduling.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.ISchedulerLongRunning.ScheduleLongRunning``1(``0,System.Action{``0,System.Reactive.Disposables.ICancelable})">
      <summary>
            Schedules a long-running piece of work.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <remarks>
        <para>
          <b>Notes to implementers</b>
        </para>
            The returned disposable object should not prevent the work from starting, but only set the cancellation flag passed to the specified action.
            </remarks>
    </member>
    <member name="T:System.Reactive.Concurrency.IStopwatch">
      <summary>
            Abstraction for a stopwatch to compute time relative to a starting point.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.IStopwatch.Elapsed">
      <summary>
            Gets the time elapsed since the stopwatch object was obtained.
            </summary>
    </member>
    <member name="T:System.Reactive.Disposables.ICancelable">
      <summary>
            Disposable resource with dipsosal state tracking.
            </summary>
    </member>
    <member name="P:System.Reactive.Disposables.ICancelable.IsDisposed">
      <summary>
            Gets a value that indicates whether the object is disposed.
            </summary>
    </member>
    <member name="T:System.Reactive.IEventPattern`2">
      <summary>
            Represents a .NET event invocation consisting of the strongly typed object that raised the event and the data that was generated by the event.
            </summary>
      <typeparam name="TSender">
            The type of the sender that raised the event.
            This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.
            </typeparam>
      <typeparam name="TEventArgs">
            The type of the event data generated by the event.
            This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.
            </typeparam>
    </member>
    <member name="P:System.Reactive.IEventPattern`2.Sender">
      <summary>
            Gets the sender object that raised the event.
            </summary>
    </member>
    <member name="P:System.Reactive.IEventPattern`2.EventArgs">
      <summary>
            Gets the event data that was generated by the event.
            </summary>
    </member>
    <member name="T:System.Reactive.IEventPatternSource`1">
      <summary>
            Represents a data stream signaling its elements by means of an event.
            </summary>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
    </member>
    <member name="T:System.Reactive.IEventSource`1">
      <summary>
            Represents a data stream signaling its elements by means of an event.
            </summary>
      <typeparam name="T">
            The type of the event data generated by the event.
            This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.
            </typeparam>
    </member>
    <member name="T:System.Reactive.IObserver`2">
      <summary>
            Provides a mechanism for receiving push-based notifications and returning a response.
            </summary>
      <typeparam name="TValue">
            The type of the elements received by the observer.
            This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.
            </typeparam>
      <typeparam name="TResult">
            The type of the result returned from the observer's notification handlers.
            This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.
            </typeparam>
    </member>
    <member name="M:System.Reactive.IObserver`2.OnNext(`0)">
      <summary>
            Notifies the observer of a new element in the sequence.
            </summary>
      <param name="value">The new element in the sequence.</param>
      <returns>Result returned upon observation of a new element.</returns>
    </member>
    <member name="M:System.Reactive.IObserver`2.OnError(System.Exception)">
      <summary>
            Notifies the observer that an exception has occurred.
            </summary>
      <param name="exception">The exception that occurred.</param>
      <returns>Result returned upon observation of an error.</returns>
    </member>
    <member name="M:System.Reactive.IObserver`2.OnCompleted">
      <summary>
            Notifies the observer of the end of the sequence.
            </summary>
      <returns>Result returned upon observation of the sequence completion.</returns>
    </member>
    <member name="T:System.Reactive.Linq.IGroupedObservable`2">
      <summary>
            Represents an observable sequence of elements that have a common key.
            </summary>
      <typeparam name="TKey">
            The type of the key shared by all elements in the group.
            This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.
            </typeparam>
      <typeparam name="TElement">
            The type of the elements in the group.
            This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.
            </typeparam>
    </member>
    <member name="P:System.Reactive.Linq.IGroupedObservable`2.Key">
      <summary>
            Gets the common key.
            </summary>
    </member>
    <member name="T:System.Reactive.Linq.IQbservable">
      <summary>
            Provides functionality to evaluate queries against a specific data source wherein the type of the data is not specified.
            </summary>
    </member>
    <member name="P:System.Reactive.Linq.IQbservable.ElementType">
      <summary>
            Gets the type of the element(s) that are returned when the expression tree associated with this instance of IQbservable is executed.
            </summary>
    </member>
    <member name="P:System.Reactive.Linq.IQbservable.Expression">
      <summary>
            Gets the expression tree that is associated with the instance of IQbservable.
            </summary>
    </member>
    <member name="P:System.Reactive.Linq.IQbservable.Provider">
      <summary>
            Gets the query provider that is associated with this data source.
            </summary>
    </member>
    <member name="T:System.Reactive.Linq.IQbservable`1">
      <summary>
            Provides functionality to evaluate queries against a specific data source wherein the type of the data is known.
            </summary>
      <typeparam name="T">
            The type of the data in the data source.
            This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.
            </typeparam>
    </member>
    <member name="T:System.Reactive.Linq.IQbservableProvider">
      <summary>
            Defines methods to create and execute queries that are described by an IQbservable object.
            </summary>
    </member>
    <member name="M:System.Reactive.Linq.IQbservableProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>
            Constructs an IQbservable&gt;TResult&lt; object that can evaluate the query represented by a specified expression tree.
            </summary>
      <typeparam name="TResult">The type of the elements of the System.Reactive.Linq.IQbservable&lt;T&gt; that is returned.</typeparam>
      <param name="expression">Expression tree representing the query.</param>
      <returns>IQbservable object that can evaluate the given query expression.</returns>
    </member>
    <member name="T:System.Reactive.Subjects.IConnectableObservable`1">
      <summary>
            Represents an observable wrapper that can be connected and disconnected from its underlying observable sequence.
            </summary>
      <typeparam name="T">
            The type of the elements in the sequence.
            This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.
            </typeparam>
    </member>
    <member name="M:System.Reactive.Subjects.IConnectableObservable`1.Connect">
      <summary>
            Connects the observable wrapper to its source. All subscribed observers will receive values from the underlying observable sequence as long as the connection is established.
            </summary>
      <returns>Disposable used to disconnect the observable wrapper from its source, causing subscribed observer to stop receiving values from the underlying observable sequence.</returns>
    </member>
    <member name="T:System.Reactive.Subjects.ISubject`2">
      <summary>
            Represents an object that is both an observable sequence as well as an observer.
            </summary>
      <typeparam name="TSource">
            The type of the elements received by the subject.
            This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.
            </typeparam>
      <typeparam name="TResult">
            The type of the elements produced by the subject.
            This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.
            </typeparam>
    </member>
    <member name="T:System.Reactive.Subjects.ISubject`1">
      <summary>
            Represents an object that is both an observable sequence as well as an observer.
            </summary>
      <typeparam name="T">The type of the elements processed by the subject.</typeparam>
    </member>
    <member name="T:System.Reactive.Joins.NamespaceDoc">
      <summary>
            The <b>System.Reactive.Joins</b> namespace contains classes used to express join patterns over observable sequences using fluent method syntax.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.VirtualTimeSchedulerExtensions">
      <summary>
            Provides a set of extension methods for virtual time scheduling.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerExtensions.ScheduleRelative``2(System.Reactive.Concurrency.VirtualTimeSchedulerBase{``0,``1},``1,System.Action)">
      <summary>
            Schedules an action to be executed at dueTime.
            </summary>
      <typeparam name="TAbsolute">Absolute time representation type.</typeparam>
      <typeparam name="TRelative">Relative time representation type.</typeparam>
      <param name="scheduler">Scheduler to execute the action on.</param>
      <param name="dueTime">Relative time after which to execute the action.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerExtensions.ScheduleAbsolute``2(System.Reactive.Concurrency.VirtualTimeSchedulerBase{``0,``1},``0,System.Action)">
      <summary>
            Schedules an action to be executed at dueTime.
            </summary>
      <typeparam name="TAbsolute">Absolute time representation type.</typeparam>
      <typeparam name="TRelative">Relative time representation type.</typeparam>
      <param name="scheduler">Scheduler to execute the action on.</param>
      <param name="dueTime">Absolute time at which to execute the action.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="action" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Linq.LocalQueryMethodImplementationTypeAttribute">
      <summary>
            Attribute applied to static classes providing expression tree forms of query methods,
            mapping those to the corresponding methods for local query execution on the specified
            target class type.
            </summary>
    </member>
    <member name="M:System.Reactive.Linq.LocalQueryMethodImplementationTypeAttribute.#ctor(System.Type)">
      <summary>
            Creates a new mapping to the specified local execution query method implementation type.
            </summary>
      <param name="targetType">Type with query methods for local execution.</param>
    </member>
    <member name="P:System.Reactive.Linq.LocalQueryMethodImplementationTypeAttribute.TargetType">
      <summary>
            Gets the type with the implementation of local query methods.
            </summary>
    </member>
    <member name="T:System.Reactive.Linq.Observable">
      <summary>
            Provides a set of static methods for writing in-memory queries over observable sequences.
            </summary>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ForEachAsync``1(System.IObservable{``0},System.Action{``0})">
      <summary>
            Invokes an action for each element in the observable sequence, and returns a Task object that will get signaled when the sequence terminates.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <returns>Task that signals the termination of the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> is null.</exception>
      <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ForEachAsync``1(System.IObservable{``0},System.Action{``0},System.Threading.CancellationToken)">
      <summary>
            Invokes an action for each element in the observable sequence, and returns a Task object that will get signaled when the sequence terminates.
            The loop can be quit prematurely by setting the specified cancellation token.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <param name="cancellationToken">Cancellation token used to stop the loop.</param>
      <returns>Task that signals the termination of the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> is null.</exception>
      <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ForEachAsync``1(System.IObservable{``0},System.Action{``0,System.Int32})">
      <summary>
            Invokes an action for each element in the observable sequence, incorporating the element's index, and returns a Task object that will get signaled when the sequence terminates.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <returns>Task that signals the termination of the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> is null.</exception>
      <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ForEachAsync``1(System.IObservable{``0},System.Action{``0,System.Int32},System.Threading.CancellationToken)">
      <summary>
            Invokes an action for each element in the observable sequence, incorporating the element's index, and returns a Task object that will get signaled when the sequence terminates.
            The loop can be quit prematurely by setting the specified cancellation token.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <param name="cancellationToken">Cancellation token used to stop the loop.</param>
      <returns>Task that signals the termination of the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> is null.</exception>
      <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Case``2(System.Func{``0},System.Collections.Generic.IDictionary{``0,System.IObservable{``1}},System.IObservable{``1})">
      <summary>
            Uses <paramref name="selector" /> to determine which source in <paramref name="sources" /> to return, choosing <paramref name="defaultSource" /> if no match is found.
            </summary>
      <typeparam name="TValue">The type of the value returned by the selector function, used to look up the resulting source.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="selector">Selector function invoked to determine the source to lookup in the <paramref name="sources" /> dictionary.</param>
      <param name="sources">Dictionary of sources to select from based on the <paramref name="selector" /> invocation result.</param>
      <param name="defaultSource">Default source to select in case no matching source in <paramref name="sources" /> is found.</param>
      <returns>The observable sequence retrieved from the <paramref name="sources" /> dictionary based on the <paramref name="selector" /> invocation result, or <paramref name="defaultSource" /> if no match is found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> or <paramref name="sources" /> or <paramref name="defaultSource" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Case``2(System.Func{``0},System.Collections.Generic.IDictionary{``0,System.IObservable{``1}},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Uses <paramref name="selector" /> to determine which source in <paramref name="sources" /> to return, choosing an empty sequence on the specified scheduler if no match is found.
            </summary>
      <typeparam name="TValue">The type of the value returned by the selector function, used to look up the resulting source.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="selector">Selector function invoked to determine the source to lookup in the <paramref name="sources" /> dictionary.</param>
      <param name="sources">Dictionary of sources to select from based on the <paramref name="selector" /> invocation result.</param>
      <param name="scheduler">Scheduler to generate an empty sequence on in case no matching source in <paramref name="sources" /> is found.</param>
      <returns>The observable sequence retrieved from the <paramref name="sources" /> dictionary based on the <paramref name="selector" /> invocation result, or an empty sequence if no match is found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> or <paramref name="sources" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Case``2(System.Func{``0},System.Collections.Generic.IDictionary{``0,System.IObservable{``1}})">
      <summary>
            Uses <paramref name="selector" /> to determine which source in <paramref name="sources" /> to return, choosing an empty sequence if no match is found.
            </summary>
      <typeparam name="TValue">The type of the value returned by the selector function, used to look up the resulting source.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="selector">Selector function invoked to determine the source to lookup in the <paramref name="sources" /> dictionary.</param>
      <param name="sources">Dictionary of sources to select from based on the <paramref name="selector" /> invocation result.</param>
      <returns>The observable sequence retrieved from the <paramref name="sources" /> dictionary based on the <paramref name="selector" /> invocation result, or an empty sequence if no match is found.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> or <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.DoWhile``1(System.IObservable{``0},System.Func{System.Boolean})">
      <summary>
            Repeats the given <paramref name="source" /> as long as the specified <paramref name="condition" /> holds, where the <paramref name="condition" /> is evaluated after each repeated <paramref name="source" /> completed.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source to repeat as long as the <paramref name="condition" /> function evaluates to true.</param>
      <param name="condition">Condition that will be evaluated upon the completion of an iteration through the <paramref name="source" />, to determine whether repetition of the source is required.</param>
      <returns>The observable sequence obtained by concatenating the <paramref name="source" /> sequence as long as the <paramref name="condition" /> holds.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="condition" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.For``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.IObservable{``1}})">
      <summary>
            Concatenates the observable sequences obtained by running the <paramref name="resultSelector" /> for each element in the given enumerable <paramref name="source" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the enumerable source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the observable result sequence.</typeparam>
      <param name="source">Enumerable source for which each element will be mapped onto an observable source that will be concatenated in the result sequence.</param>
      <param name="resultSelector">Function to select an observable source for each element in the <paramref name="source" />.</param>
      <returns>The observable sequence obtained by concatenating the sources returned by <paramref name="resultSelector" /> for each element in the <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.If``1(System.Func{System.Boolean},System.IObservable{``0},System.IObservable{``0})">
      <summary>
            If the specified <paramref name="condition" /> evaluates true, select the <paramref name="thenSource" /> sequence. Otherwise, select the <paramref name="elseSource" /> sequence.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="condition">Condition evaluated to decide which sequence to return.</param>
      <param name="thenSource">Sequence returned in case <paramref name="condition" /> evaluates true.</param>
      <param name="elseSource">Sequence returned in case <paramref name="condition" /> evaluates false.</param>
      <returns>
        <paramref name="thenSource" /> if <paramref name="condition" /> evaluates true; <paramref name="elseSource" /> otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> or <paramref name="thenSource" /> or <paramref name="elseSource" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.If``1(System.Func{System.Boolean},System.IObservable{``0})">
      <summary>
            If the specified <paramref name="condition" /> evaluates true, select the <paramref name="thenSource" /> sequence. Otherwise, return an empty sequence.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="condition">Condition evaluated to decide which sequence to return.</param>
      <param name="thenSource">Sequence returned in case <paramref name="condition" /> evaluates true.</param>
      <returns>
        <paramref name="thenSource" /> if <paramref name="condition" /> evaluates true; an empty sequence otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> or <paramref name="thenSource" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.If``1(System.Func{System.Boolean},System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            If the specified <paramref name="condition" /> evaluates true, select the <paramref name="thenSource" /> sequence. Otherwise, return an empty sequence generated on the specified scheduler.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="condition">Condition evaluated to decide which sequence to return.</param>
      <param name="thenSource">Sequence returned in case <paramref name="condition" /> evaluates true.</param>
      <param name="scheduler">Scheduler to generate an empty sequence on in case <paramref name="condition" /> evaluates false.</param>
      <returns>
        <paramref name="thenSource" /> if <paramref name="condition" /> evaluates true; an empty sequence otherwise.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> or <paramref name="thenSource" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.While``1(System.Func{System.Boolean},System.IObservable{``0})">
      <summary>
            Repeats the given <paramref name="source" /> as long as the specified <paramref name="condition" /> holds, where the <paramref name="condition" /> is evaluated before each repeated <paramref name="source" /> is subscribed to.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source to repeat as long as the <paramref name="condition" /> function evaluates to true.</param>
      <param name="condition">Condition that will be evaluated before subscription to the <paramref name="source" />, to determine whether repetition of the source is required.</param>
      <returns>The observable sequence obtained by concatenating the <paramref name="source" /> sequence as long as the <paramref name="condition" /> holds.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> or <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``5(System.Func{``0,``1,``2,``3,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``4})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``6(System.Func{``0,``1,``2,``3,``4,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``5})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``7(System.Func{``0,``1,``2,``3,``4,``5,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``6})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``8(System.Func{``0,``1,``2,``3,``4,``5,``6,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``7})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``8})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``9})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``10})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``11})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``12})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``13})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``14})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the begin delegate.</typeparam>
      <typeparam name="TResult">The type of the result returned by the end delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``4(System.Func{``0,``1,``2,``3,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``5(System.Func{``0,``1,``2,``3,``4,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``6(System.Func{``0,``1,``2,``3,``4,``5,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``7(System.Func{``0,``1,``2,``3,``4,``5,``6,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsyncPattern``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Converts a Begin/End invoke function pair into an asynchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the begin delegate.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the begin delegate.</typeparam>
      <param name="begin">The delegate that begins the asynchronous operation.</param>
      <param name="end">The delegate that ends the asynchronous operation.</param>
      <returns>Function that can be used to start the asynchronous operation and retrieve the result (represented as a Unit value) as an observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="begin" /> or <paramref name="end" /> is null.</exception>
      <remarks>Each invocation of the resulting function will cause the asynchronous operation to be started. Subscription to the resulting sequence has no observable side-effect, and each subscription will produce the asynchronous operation's result.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Start``1(System.Func{``0})">
      <summary>
            Invokes the specified function asynchronously, surfacing the result through an observable sequence.
            </summary>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to run asynchronously.</param>
      <returns>An observable sequence exposing the function's result value, or an exception.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
      <remarks>
        <list type="bullet">
          <item>
            <description>The function is called immediately, not during the subscription of the resulting sequence.</description>
          </item>
          <item>
            <description>Multiple subscriptions to the resulting sequence can observe the function's result.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Start``1(System.Func{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Invokes the specified function asynchronously on the specified scheduler, surfacing the result through an observable sequence
            </summary>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to run asynchronously.</param>
      <param name="scheduler">Scheduler to run the function on.</param>
      <returns>An observable sequence exposing the function's result value, or an exception.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
        <list type="bullet">
          <item>
            <description>The function is called immediately, not during the subscription of the resulting sequence.</description>
          </item>
          <item>
            <description>Multiple subscriptions to the resulting sequence can observe the function's result.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.StartAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
      <summary>
            Invokes the asynchronous function, surfacing the result through an observable sequence.
            </summary>
      <typeparam name="TResult">The type of the result returned by the asynchronous function.</typeparam>
      <param name="functionAsync">Asynchronous function to run.</param>
      <returns>An observable sequence exposing the function's result value, or an exception.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="functionAsync" /> is null.</exception>
      <remarks>
        <list type="bullet">
          <item>
            <description>The function is started immediately, not during the subscription of the resulting sequence.</description>
          </item>
          <item>
            <description>Multiple subscriptions to the resulting sequence can observe the function's result.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.StartAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
      <summary>
            Invokes the asynchronous function, surfacing the result through an observable sequence.
            The CancellationToken is shared by all subscriptions on the resulting observable sequence. See the remarks section for more information.
            </summary>
      <typeparam name="TResult">The type of the result returned by the asynchronous function.</typeparam>
      <param name="functionAsync">Asynchronous function to run.</param>
      <returns>An observable sequence exposing the function's result value, or an exception.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="functionAsync" /> is null.</exception>
      <remarks>
        <list type="bullet">
          <item>
            <description>The function is started immediately, not during the subscription of the resulting sequence.</description>
          </item>
          <item>
            <description>Multiple subscriptions to the resulting sequence can observe the function's result.</description>
          </item>
          <item>
            <description>
            If any subscription to the resulting sequence is disposed, the CancellationToken is set. The observer associated to the disposed
            subscription won't see the TaskCanceledException, but other observers will. You can protect against this using the Catch operator.
            Be careful when handing out the resulting sequence because of this behavior. The most common use is to have a single subscription
            to the resulting sequence, which controls the CancellationToken state. Alternatively, you can control subscription behavior using
            multicast operators.
            </description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Start(System.Action)">
      <summary>
            Invokes the action asynchronously, surfacing the result through an observable sequence.
            </summary>
      <param name="action">Action to run asynchronously.</param>
      <returns>An observable sequence exposing a Unit value upon completion of the action, or an exception.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
      <remarks>
        <list type="bullet">
          <item>
            <description>The action is called immediately, not during the subscription of the resulting sequence.</description>
          </item>
          <item>
            <description>Multiple subscriptions to the resulting sequence can observe the action's outcome.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Start(System.Action,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Invokes the action asynchronously on the specified scheduler, surfacing the result through an observable sequence.
            </summary>
      <param name="action">Action to run asynchronously.</param>
      <param name="scheduler">Scheduler to run the action on.</param>
      <returns>An observable sequence exposing a Unit value upon completion of the action, or an exception.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
        <list type="bullet">
          <item>
            <description>The action is called immediately, not during the subscription of the resulting sequence.</description>
          </item>
          <item>
            <description>Multiple subscriptions to the resulting sequence can observe the action's outcome.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.StartAsync(System.Func{System.Threading.Tasks.Task})">
      <summary>
            Invokes the asynchronous action, surfacing the result through an observable sequence.
            </summary>
      <param name="actionAsync">Asynchronous action to run.</param>
      <returns>An observable sequence exposing a Unit value upon completion of the action, or an exception.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="actionAsync" /> is null.</exception>
      <remarks>
        <list type="bullet">
          <item>
            <description>The action is started immediately, not during the subscription of the resulting sequence.</description>
          </item>
          <item>
            <description>Multiple subscriptions to the resulting sequence can observe the action's outcome.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.StartAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
      <summary>
            Invokes the asynchronous action, surfacing the result through an observable sequence.
            The CancellationToken is shared by all subscriptions on the resulting observable sequence. See the remarks section for more information.
            </summary>
      <param name="actionAsync">Asynchronous action to run.</param>
      <returns>An observable sequence exposing a Unit value upon completion of the action, or an exception.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="actionAsync" /> is null.</exception>
      <remarks>
        <list type="bullet">
          <item>
            <description>The action is started immediately, not during the subscription of the resulting sequence.</description>
          </item>
          <item>
            <description>Multiple subscriptions to the resulting sequence can observe the action's outcome.</description>
          </item>
          <item>
            <description>
            If any subscription to the resulting sequence is disposed, the CancellationToken is set. The observer associated to the disposed
            subscription won't see the TaskCanceledException, but other observers will. You can protect against this using the Catch operator.
            Be careful when handing out the resulting sequence because of this behavior. The most common use is to have a single subscription
            to the resulting sequence, which controls the CancellationToken state. Alternatively, you can control subscription behavior using
            multicast operators.
            </description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsync``1(System.Func{System.Threading.Tasks.Task{``0}})">
      <summary>
            Converts to asynchronous function into an observable sequence. Each subscription to the resulting sequence causes the function to be started.
            </summary>
      <typeparam name="TResult">The type of the result returned by the asynchronous function.</typeparam>
      <param name="functionAsync">Asynchronous function to convert.</param>
      <returns>An observable sequence exposing the result of invoking the function, or an exception.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="functionAsync" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
      <summary>
            Converts to asynchronous function into an observable sequence. Each subscription to the resulting sequence causes the function to be started.
            The CancellationToken passed to the asynchronous function is tied to the observable sequence's subscription that triggered the function's invocation and can be used for best-effort cancellation.
            </summary>
      <typeparam name="TResult">The type of the result returned by the asynchronous function.</typeparam>
      <param name="functionAsync">Asynchronous function to convert.</param>
      <returns>An observable sequence exposing the result of invoking the function, or an exception.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="functionAsync" /> is null.</exception>
      <remarks>When a subscription to the resulting sequence is disposed, the CancellationToken that was fed to the asynchronous function will be signaled.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsync(System.Func{System.Threading.Tasks.Task})">
      <summary>
            Converts to asynchronous action into an observable sequence. Each subscription to the resulting sequence causes the action to be started.
            </summary>
      <param name="actionAsync">Asynchronous action to convert.</param>
      <returns>An observable sequence exposing a Unit value upon completion of the action, or an exception.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="actionAsync" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
      <summary>
            Converts to asynchronous action into an observable sequence. Each subscription to the resulting sequence causes the action to be started.
            The CancellationToken passed to the asynchronous action is tied to the observable sequence's subscription that triggered the action's invocation and can be used for best-effort cancellation.
            </summary>
      <param name="actionAsync">Asynchronous action to convert.</param>
      <returns>An observable sequence exposing a Unit value upon completion of the action, or an exception.</returns>
      <remarks>When a subscription to the resulting sequence is disposed, the CancellationToken that was fed to the asynchronous function will be signaled.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="actionAsync" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``1(System.Func{``0})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``1(System.Func{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``2(System.Func{``0,``1})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``2(System.Func{``0,``1},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``3(System.Func{``0,``1,``2})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``3(System.Func{``0,``1,``2},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``4(System.Func{``0,``1,``2,``3})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``4(System.Func{``0,``1,``2,``3},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``5(System.Func{``0,``1,``2,``3,``4})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``5(System.Func{``0,``1,``2,``3,``4},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``6(System.Func{``0,``1,``2,``3,``4,``5})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``6(System.Func{``0,``1,``2,``3,``4,``5},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the function.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the function.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the function.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the function.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the function.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the function.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the function.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the function.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the function.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``15(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the function.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the function.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the function.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the function.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the function.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the function.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the function.</typeparam>
      <typeparam name="TArg15">The type of the fifteenth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``16(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the function.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the function.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the function.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the function.</typeparam>
      <typeparam name="TArg15">The type of the fifteenth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the function.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the function.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the function.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the function.</typeparam>
      <typeparam name="TArg15">The type of the fifteenth argument passed to the function.</typeparam>
      <typeparam name="TArg16">The type of the sixteenth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the function.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the function.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the function.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the function.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the function.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the function.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the function.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the function.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the function.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the function.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the function.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the function.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the function.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the function.</typeparam>
      <typeparam name="TArg15">The type of the fifteenth argument passed to the function.</typeparam>
      <typeparam name="TArg16">The type of the sixteenth argument passed to the function.</typeparam>
      <typeparam name="TResult">The type of the result returned by the function.</typeparam>
      <param name="function">Function to convert to an asynchronous function.</param>
      <param name="scheduler">Scheduler to invoke the original function on.</param>
      <returns>Asynchronous function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync(System.Action)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync(System.Action,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``1(System.Action{``0})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``1(System.Action{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``2(System.Action{``0,``1})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``2(System.Action{``0,``1},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``3(System.Action{``0,``1,``2})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``3(System.Action{``0,``1,``2},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``4(System.Action{``0,``1,``2,``3})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``4(System.Action{``0,``1,``2,``3},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``5(System.Action{``0,``1,``2,``3,``4})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``5(System.Action{``0,``1,``2,``3,``4},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``6(System.Action{``0,``1,``2,``3,``4,``5})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``6(System.Action{``0,``1,``2,``3,``4,``5},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``7(System.Action{``0,``1,``2,``3,``4,``5,``6})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``7(System.Action{``0,``1,``2,``3,``4,``5,``6},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``10(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``11(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the action.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``12(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the action.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the action.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the action.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``13(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the action.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the action.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the action.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the action.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the action.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``14(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the action.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the action.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the action.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the action.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the action.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the action.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the action.</typeparam>
      <typeparam name="TArg15">The type of the fifteenth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``15(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the action.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the action.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the action.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the action.</typeparam>
      <typeparam name="TArg15">The type of the fifteenth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the default scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the action.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the action.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the action.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the action.</typeparam>
      <typeparam name="TArg15">The type of the fifteenth argument passed to the action.</typeparam>
      <typeparam name="TArg16">The type of the sixteenth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToAsync``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts the function into an asynchronous action. Each invocation of the resulting asynchronous action causes an invocation of the original synchronous action on the specified scheduler.
            </summary>
      <typeparam name="TArg1">The type of the first argument passed to the action.</typeparam>
      <typeparam name="TArg2">The type of the second argument passed to the action.</typeparam>
      <typeparam name="TArg3">The type of the third argument passed to the action.</typeparam>
      <typeparam name="TArg4">The type of the fourth argument passed to the action.</typeparam>
      <typeparam name="TArg5">The type of the fifth argument passed to the action.</typeparam>
      <typeparam name="TArg6">The type of the sixth argument passed to the action.</typeparam>
      <typeparam name="TArg7">The type of the seventh argument passed to the action.</typeparam>
      <typeparam name="TArg8">The type of the eighth argument passed to the action.</typeparam>
      <typeparam name="TArg9">The type of the ninth argument passed to the action.</typeparam>
      <typeparam name="TArg10">The type of the tenth argument passed to the action.</typeparam>
      <typeparam name="TArg11">The type of the eleventh argument passed to the action.</typeparam>
      <typeparam name="TArg12">The type of the twelfth argument passed to the action.</typeparam>
      <typeparam name="TArg13">The type of the thirteenth argument passed to the action.</typeparam>
      <typeparam name="TArg14">The type of the fourteenth argument passed to the action.</typeparam>
      <typeparam name="TArg15">The type of the fifteenth argument passed to the action.</typeparam>
      <typeparam name="TArg16">The type of the sixteenth argument passed to the action.</typeparam>
      <param name="action">Action to convert to an asynchronous action.</param>
      <param name="scheduler">Scheduler to invoke the original action on.</param>
      <returns>Asynchronous action.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern(System.Action{System.EventHandler},System.Action{System.EventHandler})">
      <summary>
            Converts a .NET event, conforming to the standard .NET event pattern based on <see cref="T:System.EventHandler" />, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addHandler" /> or <paramref name="removeHandler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEventPattern, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEventPattern, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern(System.Action{System.EventHandler},System.Action{System.EventHandler},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts a .NET event, conforming to the standard .NET event pattern based on <see cref="T:System.EventHandler" />, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addHandler" /> or <paramref name="removeHandler" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEventPattern that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``2(System.Action{``0},System.Action{``0})">
      <summary>
            Converts a .NET event, conforming to the standard .NET event pattern based on a supplied event delegate type, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TDelegate">The delegate type of the event to be converted.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addHandler" /> or <paramref name="removeHandler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEventPattern, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEventPattern, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``2(System.Action{``0},System.Action{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts a .NET event, conforming to the standard .NET event pattern based on a supplied event delegate type, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TDelegate">The delegate type of the event to be converted.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addHandler" /> or <paramref name="removeHandler" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEventPattern that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``2(System.Func{System.EventHandler{``1},``0},System.Action{``0},System.Action{``0})">
      <summary>
            Converts a .NET event, conforming to the standard .NET event pattern based on <see cref="T:System.EventHandler`1" />, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TDelegate">The delegate type of the event to be converted.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="conversion">A function used to convert the given event handler to a delegate compatible with the underlying .NET event. The resulting delegate is used in calls to the addHandler and removeHandler action parameters.</param>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversion" /> or <paramref name="addHandler" /> or <paramref name="removeHandler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEventPattern, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEventPattern, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``2(System.Func{System.EventHandler{``1},``0},System.Action{``0},System.Action{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts a .NET event, conforming to the standard .NET event pattern based on <see cref="T:System.EventHandler`1" />, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TDelegate">The delegate type of the event to be converted.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="conversion">A function used to convert the given event handler to a delegate compatible with the underlying .NET event. The resulting delegate is used in calls to the addHandler and removeHandler action parameters.</param>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversion" /> or <paramref name="addHandler" /> or <paramref name="removeHandler" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEventPattern that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``3(System.Action{``0},System.Action{``0})">
      <summary>
            Converts a .NET event, conforming to the standard .NET event pattern based on a supplied event delegate type with a strongly typed sender parameter, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TDelegate">The delegate type of the event to be converted.</typeparam>
      <typeparam name="TSender">The type of the sender that raises the event.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addHandler" /> or <paramref name="removeHandler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEventPattern, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEventPattern, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``3(System.Action{``0},System.Action{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts a .NET event, conforming to the standard .NET event pattern based on a supplied event delegate type with a strongly typed sender parameter, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TDelegate">The delegate type of the event to be converted.</typeparam>
      <typeparam name="TSender">The type of the sender that raises the event.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addHandler" /> or <paramref name="removeHandler" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEventPattern that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}})">
      <summary>
            Converts a .NET event, conforming to the standard .NET event pattern based on <see cref="T:System.EventHandler`1" />, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEventPattern, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEventPattern, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts a .NET event, conforming to the standard .NET event pattern based on <see cref="T:System.EventHandler`1" />, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEventPattern that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern(System.Object,System.String)">
      <summary>
            Converts an instance .NET event, conforming to the standard .NET event pattern with an <see cref="T:System.EventArgs" /> parameter, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            Reflection is used to discover the event based on the target object type and the specified event name.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <param name="target">Object instance that exposes the event to convert.</param>
      <param name="eventName">Name of the event to convert.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> or <paramref name="eventName" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The event could not be found. -or- The event does not conform to the standard .NET event pattern.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEventPattern, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEventPattern, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern(System.Object,System.String,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts an instance .NET event, conforming to the standard .NET event pattern with an <see cref="T:System.EventArgs" /> parameter, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            Reflection is used to discover the event based on the target object type and the specified event name.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <param name="target">Object instance that exposes the event to convert.</param>
      <param name="eventName">Name of the event to convert.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> or <paramref name="eventName" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The event could not be found. -or- The event does not conform to the standard .NET event pattern.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEventPattern that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``1(System.Object,System.String)">
      <summary>
            Converts an instance .NET event, conforming to the standard .NET event pattern with strongly typed event arguments, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            Reflection is used to discover the event based on the target object type and the specified event name.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="target">Object instance that exposes the event to convert.</param>
      <param name="eventName">Name of the event to convert.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> or <paramref name="eventName" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The event could not be found. -or- The event does not conform to the standard .NET event pattern. -or- The event's second argument type is not assignable to TEventArgs.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEventPattern, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEventPattern, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``1(System.Object,System.String,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts an instance .NET event, conforming to the standard .NET event pattern with strongly typed event arguments, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            Reflection is used to discover the event based on the target object type and the specified event name.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="target">Object instance that exposes the event to convert.</param>
      <param name="eventName">Name of the event to convert.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> or <paramref name="eventName" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The event could not be found. -or- The event does not conform to the standard .NET event pattern. -or- The event's second argument type is not assignable to TEventArgs.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEventPattern that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``2(System.Object,System.String)">
      <summary>
            Converts an instance .NET event, conforming to the standard .NET event pattern with a strongly typed sender and strongly typed event arguments, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            Reflection is used to discover the event based on the target object type and the specified event name.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TSender">The type of the sender that raises the event.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="target">Object instance that exposes the event to convert.</param>
      <param name="eventName">Name of the event to convert.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> or <paramref name="eventName" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The event could not be found. -or- The event does not conform to the standard .NET event pattern. -or- The event's first argument type is not assignable to TSender. -or- The event's second argument type is not assignable to TEventArgs.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEventPattern, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEventPattern, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``2(System.Object,System.String,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts an instance .NET event, conforming to the standard .NET event pattern with a strongly typed sender and strongly typed event arguments, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            Reflection is used to discover the event based on the target object type and the specified event name.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TSender">The type of the sender that raises the event.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="target">Object instance that exposes the event to convert.</param>
      <param name="eventName">Name of the event to convert.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> or <paramref name="eventName" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The event could not be found. -or- The event does not conform to the standard .NET event pattern. -or- The event's first argument type is not assignable to TSender. -or- The event's second argument type is not assignable to TEventArgs.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEventPattern that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern(System.Type,System.String)">
      <summary>
            Converts a static .NET event, conforming to the standard .NET event pattern with an <see cref="T:System.EventArgs" /> parameter, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            Reflection is used to discover the event based on the specified type and the specified event name.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <param name="type">Type that exposes the static event to convert.</param>
      <param name="eventName">Name of the event to convert.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="eventName" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The event could not be found. -or- The event does not conform to the standard .NET event pattern.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEventPattern, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEventPattern, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern(System.Type,System.String,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts a static .NET event, conforming to the standard .NET event pattern with an <see cref="T:System.EventArgs" /> parameter, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            Reflection is used to discover the event based on the specified type and the specified event name.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <param name="type">Type that exposes the static event to convert.</param>
      <param name="eventName">Name of the event to convert.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="eventName" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The event could not be found. -or- The event does not conform to the standard .NET event pattern.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEventPattern that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``1(System.Type,System.String)">
      <summary>
            Converts a static .NET event, conforming to the standard .NET event pattern with strongly typed event arguments, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            Reflection is used to discover the event based on the specified type and the specified event name.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="type">Type that exposes the static event to convert.</param>
      <param name="eventName">Name of the event to convert.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="eventName" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The event could not be found. -or- The event does not conform to the standard .NET event pattern. -or- The event's second argument type is not assignable to TEventArgs.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEventPattern, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEventPattern, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``1(System.Type,System.String,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts a static .NET event, conforming to the standard .NET event pattern with strongly typed event arguments, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            Reflection is used to discover the event based on the specified type and the specified event name.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="type">Type that exposes the static event to convert.</param>
      <param name="eventName">Name of the event to convert.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="eventName" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The event could not be found. -or- The event does not conform to the standard .NET event pattern. -or- The event's second argument type is not assignable to TEventArgs.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEventPattern that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``2(System.Type,System.String)">
      <summary>
            Converts a static .NET event, conforming to the standard .NET event pattern with a strongly typed sender and strongly typed event arguments, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            Reflection is used to discover the event based on the specified type and the specified event name.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TSender">The type of the sender that raises the event.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="type">Type that exposes the static event to convert.</param>
      <param name="eventName">Name of the event to convert.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="eventName" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The event could not be found. -or- The event does not conform to the standard .NET event pattern. -or- The event's first argument type is not assignable to TSender. -or- The event's second argument type is not assignable to TEventArgs.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEventPattern, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEventPattern, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEventPattern``2(System.Type,System.String,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts a static .NET event, conforming to the standard .NET event pattern with a strongly typed sender and strongly typed event arguments, to an observable sequence.
            Each event invocation is surfaced through an OnNext message in the resulting sequence.
            Reflection is used to discover the event based on the specified type and the specified event name.
            For conversion of events that don't conform to the standard .NET event pattern, use any of the FromEvent overloads instead.
            </summary>
      <typeparam name="TSender">The type of the sender that raises the event.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="type">Type that exposes the static event to convert.</param>
      <param name="eventName">Name of the event to convert.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains data representations of invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="eventName" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The event could not be found. -or- The event does not conform to the standard .NET event pattern. -or- The event's first argument type is not assignable to TSender. -or- The event's second argument type is not assignable to TEventArgs.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEventPattern calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEventPattern that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEvent``2(System.Func{System.Action{``1},``0},System.Action{``0},System.Action{``0})">
      <summary>
            Converts a .NET event to an observable sequence, using a conversion function to obtain the event delegate. Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events conforming to the standard .NET event pattern, use any of the FromEventPattern overloads instead.
            </summary>
      <typeparam name="TDelegate">The delegate type of the event to be converted.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="conversion">A function used to convert the given event handler to a delegate compatible with the underlying .NET event. The resulting delegate is used in calls to the addHandler and removeHandler action parameters.</param>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <returns>The observable sequence that contains the event argument objects passed to the invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversion" /> or <paramref name="addHandler" /> or <paramref name="removeHandler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEvent, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEvent, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEvent calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEvent``2(System.Func{System.Action{``1},``0},System.Action{``0},System.Action{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts a .NET event to an observable sequence, using a conversion function to obtain the event delegate. Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events conforming to the standard .NET event pattern, use any of the FromEventPattern overloads instead.
            </summary>
      <typeparam name="TDelegate">The delegate type of the event to be converted.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="conversion">A function used to convert the given event handler to a delegate compatible with the underlying .NET event. The resulting delegate is used in calls to the addHandler and removeHandler action parameters.</param>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains the event argument objects passed to the invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversion" /> or <paramref name="addHandler" /> or <paramref name="removeHandler" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEvent calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEvent that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEvent``2(System.Action{``0},System.Action{``0})">
      <summary>
            Converts a .NET event to an observable sequence, using a supplied event delegate type. Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events conforming to the standard .NET event pattern, use any of the FromEventPattern overloads instead.
            </summary>
      <typeparam name="TDelegate">The delegate type of the event to be converted.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <returns>The observable sequence that contains the event argument objects passed to the invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addHandler" /> or <paramref name="removeHandler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEvent, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEvent, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEvent calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEvent``2(System.Action{``0},System.Action{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts a .NET event to an observable sequence, using a supplied event delegate type. Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events conforming to the standard .NET event pattern, use any of the FromEventPattern overloads instead.
            </summary>
      <typeparam name="TDelegate">The delegate type of the event to be converted.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains the event argument objects passed to the invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addHandler" /> or <paramref name="removeHandler" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEvent calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEvent that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEvent``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}})">
      <summary>
            Converts a generic Action-based .NET event to an observable sequence. Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events conforming to the standard .NET event pattern, use any of the FromEventPattern overloads instead.
            </summary>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <returns>The observable sequence that contains the event argument objects passed to the invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addHandler" /> or <paramref name="removeHandler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEvent, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEvent, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEvent calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEvent``1(System.Action{System.Action{``0}},System.Action{System.Action{``0}},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts a generic Action-based .NET event to an observable sequence. Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events conforming to the standard .NET event pattern, use any of the FromEventPattern overloads instead.
            </summary>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains the event argument objects passed to the invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addHandler" /> or <paramref name="removeHandler" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEvent calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEvent that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEvent(System.Action{System.Action},System.Action{System.Action})">
      <summary>
            Converts an Action-based .NET event to an observable sequence. Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events conforming to the standard .NET event pattern, use any of the FromEventPattern overloads instead.
            </summary>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <returns>The observable sequence that contains the event argument objects passed to the invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addHandler" /> or <paramref name="removeHandler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            The current <see cref="T:System.Threading.SynchronizationContext" /> is captured during the call to FromEvent, and is used to post add and remove handler invocations.
            This behavior ensures add and remove handler operations for thread-affine events are accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            If no SynchronizationContext is present at the point of calling FromEvent, add and remove handler invocations are made synchronously on the thread
            making the Subscribe or Dispose call, respectively.
            </para>
        <para>
            It's recommended to lift FromEvent calls outside event stream query expressions due to the free-threaded nature of Reactive Extensions. Doing so
            makes the captured SynchronizationContext predictable. This best practice also reduces clutter of bridging code inside queries, making the query expressions
            more concise and easier to understand.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FromEvent(System.Action{System.Action},System.Action{System.Action},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts an Action-based .NET event to an observable sequence. Each event invocation is surfaced through an OnNext message in the resulting sequence.
            For conversion of events conforming to the standard .NET event pattern, use any of the FromEventPattern overloads instead.
            </summary>
      <param name="addHandler">Action that attaches the given event handler to the underlying .NET event.</param>
      <param name="removeHandler">Action that detaches the given event handler from the underlying .NET event.</param>
      <param name="scheduler">The scheduler to run the add and remove event handler logic on.</param>
      <returns>The observable sequence that contains the event argument objects passed to the invocations of the underlying .NET event.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addHandler" /> or <paramref name="removeHandler" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
        <para>
            Add and remove handler invocations are made whenever the number of observers grows beyond zero.
            As such, an event handler may be shared by multiple simultaneously active observers, using a subject for multicasting.
            </para>
        <para>
            Add and remove handler invocations are run on the specified scheduler. This behavior allows add and remove handler operations for thread-affine events to be
            accessed from the same context, as required by some UI frameworks.
            </para>
        <para>
            It's recommended to lift FromEvent calls outside event stream query expressions. This best practice reduces clutter of bridging code inside queries,
            making the query expressions more concise and easier to understand. This has additional benefits for overloads of FromEvent that omit the IScheduler
            parameter. For more information, see the remarks section on those overloads.
            </para>
      </remarks>
      <seealso cref="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Aggregate``2(System.IObservable{``0},``1,System.Func{``1,``0,``1})">
      <summary>
            Applies an accumulator function over an observable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value.
            For aggregation behavior with incremental intermediate results, see <see cref="M:System.Reactive.Linq.Observable.Scan``2(System.IObservable{``0},``1,System.Func{``1,``0,``1})" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TAccumulate">The type of the result of the aggregation.</typeparam>
      <param name="source">An observable sequence to aggregate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="accumulator">An accumulator function to be invoked on each element.</param>
      <returns>An observable sequence containing a single element with the final accumulator value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="accumulator" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Aggregate``3(System.IObservable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>
            Applies an accumulator function over an observable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value,
            and the specified result selector function is used to select the result value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <typeparam name="TResult">The type of the resulting value.</typeparam>
      <param name="source">An observable sequence to aggregate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="accumulator">An accumulator function to be invoked on each element.</param>
      <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
      <returns>An observable sequence containing a single element with the final accumulator value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="accumulator" /> or <paramref name="resultSelector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Aggregate``1(System.IObservable{``0},System.Func{``0,``0,``0})">
      <summary>
            Applies an accumulator function over an observable sequence, returning the result of the aggregation as a single element in the result sequence.
            For aggregation behavior with incremental intermediate results, see <see cref="M:System.Reactive.Linq.Observable.Scan``1(System.IObservable{``0},System.Func{``0,``0,``0})" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence and the result of the aggregation.</typeparam>
      <param name="source">An observable sequence to aggregate over.</param>
      <param name="accumulator">An accumulator function to be invoked on each element.</param>
      <returns>An observable sequence containing a single element with the final accumulator value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="accumulator" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.All``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Determines whether all elements of an observable sequence satisfy a condition.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence whose elements to apply the predicate to.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <returns>An observable sequence containing a single element determining whether all elements in the source sequence pass the test in the specified predicate.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Any``1(System.IObservable{``0})">
      <summary>
            Determines whether an observable sequence contains any elements.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to check for non-emptiness.</param>
      <returns>An observable sequence containing a single element determining whether the source sequence contains any elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Any``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Determines whether any element of an observable sequence satisfies a condition.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence whose elements to apply the predicate to.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <returns>An observable sequence containing a single element determining whether any elements in the source sequence pass the test in the specified predicate.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Double})">
      <summary>
            Computes the average of an observable sequence of <see cref="T:System.Double" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the average of.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Single})">
      <summary>
            Computes the average of an observable sequence of <see cref="T:System.Single" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to calculate the average of.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Decimal})">
      <summary>
            Computes the average of an observable sequence of <see cref="T:System.Decimal" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to calculate the average of.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the elements in the source sequence is larger than <see cref="M:System.Decimal.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Int32})">
      <summary>
            Computes the average of an observable sequence of <see cref="T:System.Int32" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to calculate the average of.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Int64})">
      <summary>
            Computes the average of an observable sequence of <see cref="T:System.Int64" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to calculate the average of.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Nullable{System.Double}})">
      <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Double" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to calculate the average of.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Nullable{System.Single}})">
      <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Single" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to calculate the average of.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Nullable{System.Decimal}})">
      <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Decimal" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the average of.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the elements in the source sequence is larger than <see cref="M:System.Decimal.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Nullable{System.Int32}})">
      <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Int32" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the average of.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average(System.IObservable{System.Nullable{System.Int64}})">
      <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Int64" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the average of.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Decimal})">
      <summary>
            Computes the average of an observable sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the projected values for the elements in the source sequence is larger than <see cref="M:System.Decimal.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Double})">
      <summary>
            Computes the average of an observable sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Single})">
      <summary>
            Computes the average of an observable sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Int32})">
      <summary>
            Computes the average of an observable sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the projected values for the elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Int64})">
      <summary>
            Computes the average of an observable sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the projected values for the elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the projected values for the elements in the source sequence is larger than <see cref="M:System.Decimal.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the projected values for the elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Average``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
            Computes the average of an observable sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the projected values for the elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Contains``1(System.IObservable{``0},``0)">
      <summary>
            Determines whether an observable sequence contains a specified element by using the default equality comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence in which to locate a value.</param>
      <param name="value">The value to locate in the source sequence.</param>
      <returns>An observable sequence containing a single element determining whether the source sequence contains an element that has the specified value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Contains``1(System.IObservable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Determines whether an observable sequence contains a specified element by using a specified System.Collections.Generic.IEqualityComparer&lt;T&gt;.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence in which to locate a value.</param>
      <param name="value">The value to locate in the source sequence.</param>
      <param name="comparer">An equality comparer to compare elements.</param>
      <returns>An observable sequence containing a single element determining whether the source sequence contains an element that has the specified value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Count``1(System.IObservable{``0})">
      <summary>
            Returns an observable sequence containing an <see cref="T:System.Int32" /> that represents the total number of elements in an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence that contains elements to be counted.</param>
      <returns>An observable sequence containing a single element with the number of elements in the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The number of elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Count``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns an observable sequence containing an <see cref="T:System.Int32" /> that represents how many elements in the specified observable sequence satisfy a condition.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence that contains elements to be counted.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <returns>An observable sequence containing a single element with a number that represents how many elements in the input sequence satisfy the condition in the predicate function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ElementAt``1(System.IObservable{``0},System.Int32)">
      <summary>
            Returns the element at a specified index in a sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to return the element from.</param>
      <param name="index">The zero-based index of the element to retrieve.</param>
      <returns>An observable sequence that produces the element at the specified position in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">(Asynchronous) <paramref name="index" /> is greater than or equal to the number of elements in the source sequence.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ElementAtOrDefault``1(System.IObservable{``0},System.Int32)">
      <summary>
            Returns the element at a specified index in a sequence or a default value if the index is out of range.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to return the element from.</param>
      <param name="index">The zero-based index of the element to retrieve.</param>
      <returns>An observable sequence that produces the element at the specified position in the source sequence, or a default value if the index is outside the bounds of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FirstAsync``1(System.IObservable{``0})">
      <summary>
            Returns the first element of an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>Sequence containing the first element in the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FirstAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the first element of an observable sequence that satisfies the condition in the predicate.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
      <returns>Sequence containing the first element in the observable sequence that satisfies the condition in the predicate.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) No element satisfies the condition in the predicate. -or- The source sequence is empty.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FirstOrDefaultAsync``1(System.IObservable{``0})">
      <summary>
            Returns the first element of an observable sequence, or a default value if no such element exists.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>Sequence containing the first element in the observable sequence, or a default value if no such element exists.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.FirstOrDefaultAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the first element of an observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
      <returns>Sequence containing the first element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.IsEmpty``1(System.IObservable{``0})">
      <summary>
            Determines whether an observable sequence is empty.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to check for emptiness.</param>
      <returns>An observable sequence containing a single element determining whether the source sequence is empty.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.LastAsync``1(System.IObservable{``0})">
      <summary>
            Returns the last element of an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>Sequence containing the last element in the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence is empty.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.LastAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the last element of an observable sequence that satisfies the condition in the predicate.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
      <returns>Sequence containing the last element in the observable sequence that satisfies the condition in the predicate.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) No element satisfies the condition in the predicate. -or- The source sequence is empty.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.LastOrDefaultAsync``1(System.IObservable{``0})">
      <summary>
            Returns the last element of an observable sequence, or a default value if no such element exists.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>Sequence containing the last element in the observable sequence, or a default value if no such element exists.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.LastOrDefaultAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the last element of an observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
      <returns>Sequence containing the last element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.LongCount``1(System.IObservable{``0})">
      <summary>
            Returns an observable sequence containing an <see cref="T:System.Int64" /> that represents the total number of elements in an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence that contains elements to be counted.</param>
      <returns>An observable sequence containing a single element with the number of elements in the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The number of elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.LongCount``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns an observable sequence containing an <see cref="T:System.Int64" /> that represents how many elements in the specified observable sequence satisfy a condition.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence that contains elements to be counted.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <returns>An observable sequence containing a single element with a number that represents how many elements in the input sequence satisfy the condition in the predicate function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0})">
      <summary>
            Returns the maximum element in an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to determine the maximum element of.</param>
      <returns>An observable sequence containing a single element with the maximum element in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Returns the maximum value in an observable sequence according to the specified comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to determine the maximum element of.</param>
      <param name="comparer">Comparer used to compare elements.</param>
      <returns>An observable sequence containing a single element with the maximum element in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Double})">
      <summary>
            Returns the maximum value in an observable sequence of <see cref="T:System.Double" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to determine the maximum value of.</param>
      <returns>An observable sequence containing a single element with the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Single})">
      <summary>
            Returns the maximum value in an observable sequence of <see cref="T:System.Single" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to determine the maximum value of.</param>
      <returns>An observable sequence containing a single element with the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Decimal})">
      <summary>
            Returns the maximum value in an observable sequence of <see cref="T:System.Decimal" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to determine the maximum value of.</param>
      <returns>An observable sequence containing a single element with the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Int32})">
      <summary>
            Returns the maximum value in an observable sequence of <see cref="T:System.Int32" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to determine the maximum value of.</param>
      <returns>An observable sequence containing a single element with the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Int64})">
      <summary>
            Returns the maximum value in an observable sequence of <see cref="T:System.Int64" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to determine the maximum value of.</param>
      <returns>An observable sequence containing a single element with the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Nullable{System.Double}})">
      <summary>
            Returns the maximum value in an observable sequence of nullable <see cref="T:System.Double" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to determine the maximum value of.</param>
      <returns>An observable sequence containing a single element with the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Nullable{System.Single}})">
      <summary>
            Returns the maximum value in an observable sequence of nullable <see cref="T:System.Single" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to determine the maximum value of.</param>
      <returns>An observable sequence containing a single element with the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Nullable{System.Decimal}})">
      <summary>
            Returns the maximum value in an observable sequence of nullable <see cref="T:System.Decimal" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the maximum value of.</param>
      <returns>An observable sequence containing a single element with the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Nullable{System.Int32}})">
      <summary>
            Returns the maximum value in an observable sequence of nullable <see cref="T:System.Int32" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to determine the maximum value of.</param>
      <returns>An observable sequence containing a single element with the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max(System.IObservable{System.Nullable{System.Int64}})">
      <summary>
            Returns the maximum value in an observable sequence of nullable <see cref="T:System.Int64" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to determine the maximum value of.</param>
      <returns>An observable sequence containing a single element with the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the maximum value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the objects derived from the elements in the source sequence to determine the maximum of.</typeparam>
      <param name="source">An observable sequence to determine the mimimum element of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value that corresponds to the maximum element in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the maximum value according to the specified comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the objects derived from the elements in the source sequence to determine the maximum of.</typeparam>
      <param name="source">An observable sequence to determine the mimimum element of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <param name="comparer">Comparer used to compare elements.</param>
      <returns>An observable sequence containing a single element with the value that corresponds to the maximum element in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Double})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Double" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Double" /> that corresponds to the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Single})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Single" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Single" /> that corresponds to the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Decimal})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Decimal" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Decimal" /> that corresponds to the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Int32})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int32" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Int32" /> that corresponds to the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Int64})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int64" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Int64" /> that corresponds to the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Double" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Nullable&lt;System.Double&gt;" /> that corresponds to the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Single" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Nullable&lt;System.Single&gt;" /> that corresponds to the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Decimal" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Nullable&lt;System.Decimal&gt;" /> that corresponds to the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int32" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Nullable&lt;System.Int32&gt;" /> that corresponds to the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Max``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int64" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Nullable&lt;System.Int64&gt;" /> that corresponds to the maximum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.MaxBy``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Returns the elements in an observable sequence with the maximum key value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to get the maximum elements for.</param>
      <param name="keySelector">Key selector function.</param>
      <returns>An observable sequence containing a list of zero or more elements that have a maximum key value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.MaxBy``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
            Returns the elements in an observable sequence with the maximum key value according to the specified comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to get the maximum elements for.</param>
      <param name="keySelector">Key selector function.</param>
      <param name="comparer">Comparer used to compare key values.</param>
      <returns>An observable sequence containing a list of zero or more elements that have a maximum key value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0})">
      <summary>
            Returns the minimum element in an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to determine the mimimum element of.</param>
      <returns>An observable sequence containing a single element with the minimum element in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
            Returns the minimum element in an observable sequence according to the specified comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to determine the mimimum element of.</param>
      <param name="comparer">Comparer used to compare elements.</param>
      <returns>An observable sequence containing a single element with the minimum element in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Double})">
      <summary>
            Returns the minimum value in an observable sequence of <see cref="T:System.Double" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to determine the minimum value of.</param>
      <returns>An observable sequence containing a single element with the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Single})">
      <summary>
            Returns the minimum value in an observable sequence of <see cref="T:System.Single" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to determine the minimum value of.</param>
      <returns>An observable sequence containing a single element with the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Decimal})">
      <summary>
            Returns the minimum value in an observable sequence of <see cref="T:System.Decimal" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to determine the minimum value of.</param>
      <returns>An observable sequence containing a single element with the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Int32})">
      <summary>
            Returns the minimum value in an observable sequence of <see cref="T:System.Int32" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to determine the minimum value of.</param>
      <returns>An observable sequence containing a single element with the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Int64})">
      <summary>
            Returns the minimum value in an observable sequence of <see cref="T:System.Int64" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to determine the minimum value of.</param>
      <returns>An observable sequence containing a single element with the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Nullable{System.Double}})">
      <summary>
            Returns the minimum value in an observable sequence of nullable <see cref="T:System.Double" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to determine the minimum value of.</param>
      <returns>An observable sequence containing a single element with the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Nullable{System.Single}})">
      <summary>
            Returns the minimum value in an observable sequence of nullable <see cref="T:System.Single" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to determine the minimum value of.</param>
      <returns>An observable sequence containing a single element with the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Nullable{System.Decimal}})">
      <summary>
            Returns the minimum value in an observable sequence of nullable <see cref="T:System.Decimal" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the minimum value of.</param>
      <returns>An observable sequence containing a single element with the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Nullable{System.Int32}})">
      <summary>
            Returns the minimum value in an observable sequence of nullable <see cref="T:System.Int32" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to determine the minimum value of.</param>
      <returns>An observable sequence containing a single element with the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min(System.IObservable{System.Nullable{System.Int64}})">
      <summary>
            Returns the minimum value in an observable sequence of nullable <see cref="T:System.Int64" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to determine the minimum value of.</param>
      <returns>An observable sequence containing a single element with the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the minimum value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the objects derived from the elements in the source sequence to determine the minimum of.</typeparam>
      <param name="source">An observable sequence to determine the mimimum element of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value that corresponds to the minimum element in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the minimum value according to the specified comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the objects derived from the elements in the source sequence to determine the minimum of.</typeparam>
      <param name="source">An observable sequence to determine the mimimum element of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <param name="comparer">Comparer used to compare elements.</param>
      <returns>An observable sequence containing a single element with the value that corresponds to the minimum element in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Double})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Double" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Double" /> that corresponds to the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Single})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Single" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Single" /> that corresponds to the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Decimal})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Decimal" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Decimal" /> that corresponds to the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Int32})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int32" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Int32" /> that corresponds to the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Int64})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int64" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Int64" /> that corresponds to the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Double" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Nullable&lt;System.Double&gt;" /> that corresponds to the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Single" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Nullable&lt;System.Single&gt;" /> that corresponds to the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Decimal" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Nullable&lt;System.Decimal&gt;" /> that corresponds to the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int32" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Nullable&lt;System.Int32&gt;" /> that corresponds to the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Min``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
            Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int64" /> value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the value of type <see cref="T:System.Nullable&lt;System.Int64&gt;" /> that corresponds to the minimum value in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.MinBy``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Returns the elements in an observable sequence with the minimum key value.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to get the minimum elements for.</param>
      <param name="keySelector">Key selector function.</param>
      <returns>An observable sequence containing a list of zero or more elements that have a minimum key value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.MinBy``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
            Returns the elements in an observable sequence with the minimum key value according to the specified comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to get the minimum elements for.</param>
      <param name="keySelector">Key selector function.</param>
      <param name="comparer">Comparer used to compare key values.</param>
      <returns>An observable sequence containing a list of zero or more elements that have a minimum key value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SequenceEqual``1(System.IObservable{``0},System.IObservable{``0})">
      <summary>
            Determines whether two sequences are equal by comparing the elements pairwise.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="first">First observable sequence to compare.</param>
      <param name="second">Second observable sequence to compare.</param>
      <returns>An observable sequence that contains a single element which indicates whether both sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SequenceEqual``1(System.IObservable{``0},System.IObservable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Determines whether two sequences are equal by comparing the elements pairwise using a specified equality comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="first">First observable sequence to compare.</param>
      <param name="second">Second observable sequence to compare.</param>
      <param name="comparer">Comparer used to compare elements of both sequences.</param>
      <returns>An observable sequence that contains a single element which indicates whether both sequences are of equal length and their corresponding elements are equal according to the specified equality comparer.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SequenceEqual``1(System.IObservable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Determines whether an observable and enumerable sequence are equal by comparing the elements pairwise.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="first">First observable sequence to compare.</param>
      <param name="second">Second observable sequence to compare.</param>
      <returns>An observable sequence that contains a single element which indicates whether both sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SequenceEqual``1(System.IObservable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Determines whether an observable and enumerable sequence are equal by comparing the elements pairwise using a specified equality comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="first">First observable sequence to compare.</param>
      <param name="second">Second observable sequence to compare.</param>
      <param name="comparer">Comparer used to compare elements of both sequences.</param>
      <returns>An observable sequence that contains a single element which indicates whether both sequences are of equal length and their corresponding elements are equal according to the specified equality comparer.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SingleAsync``1(System.IObservable{``0})">
      <summary>
            Returns the only element of an observable sequence, and reports an exception if there is not exactly one element in the observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>Sequence containing the single element in the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence contains more than one element. -or- The source sequence is empty.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SingleAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the only element of an observable sequence that satisfies the condition in the predicate, and reports an exception if there is not exactly one element in the observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
      <returns>Sequence containing the single element in the observable sequence that satisfies the condition in the predicate.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) No element satisfies the condition in the predicate. -or- More than one element satisfies the condition in the predicate. -or- The source sequence is empty.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SingleOrDefaultAsync``1(System.IObservable{``0})">
      <summary>
            Returns the only element of an observable sequence, or a default value if the observable sequence is empty; this method reports an exception if there is more than one element in the observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>Sequence containing the single element in the observable sequence, or a default value if no such element exists.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The source sequence contains more than one element.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SingleOrDefaultAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the only element of an observable sequence that matches the predicate, or a default value if no such element exists; this method reports an exception if there is more than one element in the observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
      <returns>Sequence containing the single element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">(Asynchronous) The sequence contains more than one element that satisfies the condition in the predicate.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Double})">
      <summary>
            Computes the sum of a sequence of <see cref="T:System.Double" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the sum of.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Single})">
      <summary>
            Computes the sum of a sequence of <see cref="T:System.Single" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to calculate the sum of.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Decimal})">
      <summary>
            Computes the sum of a sequence of <see cref="T:System.Decimal" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the elements in the source sequence is larger than <see cref="M:System.Decimal.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Int32})">
      <summary>
            Computes the sum of a sequence of <see cref="T:System.Int32" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the elements in the source sequence is larger than <see cref="M:System.Int32.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Int64})">
      <summary>
            Computes the sum of a sequence of <see cref="T:System.Int64" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Double}})">
      <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to calculate the sum of.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Single}})">
      <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to calculate the sum of.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Decimal}})">
      <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the sum of.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the elements in the source sequence is larger than <see cref="M:System.Decimal.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Int32}})">
      <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the sum of.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the elements in the source sequence is larger than <see cref="M:System.Int32.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Int64}})">
      <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.
            </summary>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the sum of.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Double})">
      <summary>
            Computes the sum of a sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Single})">
      <summary>
            Computes the sum of a sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Decimal})">
      <summary>
            Computes the sum of a sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the projected values for the elements in the source sequence is larger than <see cref="M:System.Decimal.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Int32})">
      <summary>
            Computes the sum of a sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the projected values for the elements in the source sequence is larger than <see cref="M:System.Int32.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Int64})">
      <summary>
            Computes the sum of a sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the projected values for the elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the projected values for the elements in the source sequence is larger than <see cref="M:System.Decimal.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the projected values for the elements in the source sequence is larger than <see cref="M:System.Int32.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sum``1(System.IObservable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence containing a single element with the sum of the values in the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">(Asynchronous) The sum of the projected values for the elements in the source sequence is larger than <see cref="M:System.Int64.MaxValue" />.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToArray``1(System.IObservable{``0})">
      <summary>
            Creates an array from an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">The source observable sequence to get an array of elements for.</param>
      <returns>An observable sequence containing a single element with an array containing all the elements of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToDictionary``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Creates a dictionary from an observable sequence according to a specified key selector function.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the dictionary key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to create a dictionary for.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <returns>An observable sequence containing a single element with a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToDictionary``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Creates a dictionary from an observable sequence according to a specified key selector function, and a comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the dictionary key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to create a dictionary for.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An equality comparer to compare keys.</param>
      <returns>An observable sequence containing a single element with a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToDictionary``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>
            Creates a dictionary from an observable sequence according to a specified key selector function, and an element selector function.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the dictionary key computed for each element in the source sequence.</typeparam>
      <typeparam name="TElement">The type of the dictionary value computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to create a dictionary for.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <returns>An observable sequence containing a single element with a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToDictionary``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Creates a dictionary from an observable sequence according to a specified key selector function, a comparer, and an element selector function.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the dictionary key computed for each element in the source sequence.</typeparam>
      <typeparam name="TElement">The type of the dictionary value computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to create a dictionary for.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <param name="comparer">An equality comparer to compare keys.</param>
      <returns>An observable sequence containing a single element with a dictionary mapping unique key values onto the corresponding source sequence's element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToList``1(System.IObservable{``0})">
      <summary>
            Creates a list from an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">The source observable sequence to get a list of elements for.</param>
      <returns>An observable sequence containing a single element with a list containing all the elements of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToLookup``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Creates a lookup from an observable sequence according to a specified key selector function.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the lookup key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to create a lookup for.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <returns>An observable sequence containing a single element with a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToLookup``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Creates a lookup from an observable sequence according to a specified key selector function, and a comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the lookup key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to create a lookup for.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An equality comparer to compare keys.</param>
      <returns>An observable sequence containing a single element with a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToLookup``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>
            Creates a lookup from an observable sequence according to a specified key selector function, and an element selector function.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the lookup key computed for each element in the source sequence.</typeparam>
      <typeparam name="TElement">The type of the lookup value computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to create a lookup for.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <returns>An observable sequence containing a single element with a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToLookup``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Creates a lookup from an observable sequence according to a specified key selector function, a comparer, and an element selector function.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the lookup key computed for each element in the source sequence.</typeparam>
      <typeparam name="TElement">The type of the lookup value computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to create a lookup for.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <param name="comparer">An equality comparer to compare keys.</param>
      <returns>An observable sequence containing a single element with a lookup mapping unique key values onto the corresponding source sequence's elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>The return type of this operator differs from the corresponding operator on IEnumerable in order to retain asynchronous behavior.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Multicast``2(System.IObservable{``0},System.Reactive.Subjects.ISubject{``0,``1})">
      <summary>
            Multicasts the source sequence notifications through the specified subject to the resulting connectable observable. Upon connection of the
            connectable observable, the subject is subscribed to the source exactly one, and messages are forwarded to the observers registered with
            the connectable observable. For specializations with fixed subject types, see Publish, PublishLast, and Replay.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="source">Source sequence whose elements will be pushed into the specified subject.</param>
      <param name="subject">Subject to push source elements into.</param>
      <returns>A connectable observable sequence that upon connection causes the source sequence to push results into the specified subject.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="subject" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Multicast``3(System.IObservable{``0},System.Func{System.Reactive.Subjects.ISubject{``0,``1}},System.Func{System.IObservable{``1},System.IObservable{``2}})">
      <summary>
            Multicasts the source sequence notifications through an instantiated subject into all uses of the sequence within a selector function. Each
            subscription to the resulting sequence causes a separate multicast invocation, exposing the sequence resulting from the selector function's
            invocation. For specializations with fixed subject types, see Publish, PublishLast, and Replay.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TIntermediate">The type of the elements produced by the intermediate subject.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="source">Source sequence which will be multicasted in the specified selector function.</param>
      <param name="subjectSelector">Factory function to create an intermediate subject through which the source sequence's elements will be multicast to the selector function.</param>
      <param name="selector">Selector function which can use the multicasted source sequence subject to the policies enforced by the created subject.</param>
      <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="subjectSelector" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Publish``1(System.IObservable{``0})">
      <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence.
            This operator is a specialization of Multicast using a regular <see cref="T:System.Reactive.Subjects.Subject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>Subscribers will receive all notifications of the source from the time of the subscription on.</remarks>
      <seealso cref="T:System.Reactive.Subjects.Subject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Publish``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}})">
      <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence.
            This operator is a specialization of Multicast using a regular <see cref="T:System.Reactive.Subjects.Subject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all notifications of the source from the time of the subscription on.</param>
      <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <seealso cref="T:System.Reactive.Subjects.Subject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Publish``1(System.IObservable{``0},``0)">
      <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence and starts with initialValue.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.BehaviorSubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="initialValue">Initial value received by observers upon subscription.</param>
      <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>Subscribers will receive immediately receive the initial value, followed by all notifications of the source from the time of the subscription on.</remarks>
      <seealso cref="T:System.Reactive.Subjects.BehaviorSubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Publish``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},``0)">
      <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence and starts with initialValue.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.BehaviorSubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive immediately receive the initial value, followed by all notifications of the source from the time of the subscription on.</param>
      <param name="initialValue">Initial value received by observers upon subscription.</param>
      <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <seealso cref="T:System.Reactive.Subjects.BehaviorSubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.PublishLast``1(System.IObservable{``0})">
      <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.AsyncSubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>Subscribers will only receive the last notification of the source.</remarks>
      <seealso cref="T:System.Reactive.Subjects.AsyncSubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.PublishLast``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}})">
      <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.AsyncSubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will only receive the last notification of the source.</param>
      <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <seealso cref="T:System.Reactive.Subjects.AsyncSubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.RefCount``1(System.Reactive.Subjects.IConnectableObservable{``0})">
      <summary>
            Returns an observable sequence that stays connected to the source as long as there is at least one subscription to the observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Connectable observable sequence.</param>
      <returns>An observable sequence that stays connected to the source as long as there is at least one subscription to the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0})">
      <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying all notifications.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>Subscribers will receive all the notifications of the source.</remarks>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying all notifications.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="scheduler">Scheduler where connected observers will be invoked on.</param>
      <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>Subscribers will receive all the notifications of the source.</remarks>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}})">
      <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying all notifications.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all the notifications of the source.</param>
      <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying all notifications.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all the notifications of the source.</param>
      <param name="scheduler">Scheduler where connected observers within the selector function will be invoked on.</param>
      <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> or <paramref name="scheduler" /> is null.</exception>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="window">Maximum time length of the replay buffer.</param>
      <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="window" /> is less than TimeSpan.Zero.</exception>
      <remarks>Subscribers will receive all the notifications of the source subject to the specified replay buffer trimming policy.</remarks>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.TimeSpan)">
      <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all the notifications of the source subject to the specified replay buffer trimming policy.</param>
      <param name="window">Maximum time length of the replay buffer.</param>
      <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="window" /> is less than TimeSpan.Zero.</exception>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="window">Maximum time length of the replay buffer.</param>
      <param name="scheduler">Scheduler where connected observers will be invoked on.</param>
      <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="window" /> is less than TimeSpan.Zero.</exception>
      <remarks>Subscribers will receive all the notifications of the source subject to the specified replay buffer trimming policy.</remarks>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all the notifications of the source subject to the specified replay buffer trimming policy.</param>
      <param name="window">Maximum time length of the replay buffer.</param>
      <param name="scheduler">Scheduler where connected observers within the selector function will be invoked on.</param>
      <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="window" /> is less than TimeSpan.Zero.</exception>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.Int32,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying bufferSize notifications.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="bufferSize">Maximum element count of the replay buffer.</param>
      <param name="scheduler">Scheduler where connected observers will be invoked on.</param>
      <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is less than zero.</exception>
      <remarks>Subscribers will receive all the notifications of the source subject to the specified replay buffer trimming policy.</remarks>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum element count for the replay buffer.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all the notifications of the source subject to the specified replay buffer trimming policy.</param>
      <param name="bufferSize">Maximum element count of the replay buffer.</param>
      <param name="scheduler">Scheduler where connected observers within the selector function will be invoked on.</param>
      <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is less than zero.</exception>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.Int32)">
      <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum element count for the replay buffer.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="bufferSize">Maximum element count of the replay buffer.</param>
      <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is less than zero.</exception>
      <remarks>Subscribers will receive all the notifications of the source subject to the specified replay buffer trimming policy.</remarks>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32)">
      <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum element count for the replay buffer.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all the notifications of the source subject to the specified replay buffer trimming policy.</param>
      <param name="bufferSize">Maximum element count of the replay buffer.</param>
      <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is less than zero.</exception>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.Int32,System.TimeSpan)">
      <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length and element count for the replay buffer.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="bufferSize">Maximum element count of the replay buffer.</param>
      <param name="window">Maximum time length of the replay buffer.</param>
      <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="window" /> is less than TimeSpan.Zero.</exception>
      <remarks>Subscribers will receive all the notifications of the source subject to the specified replay buffer trimming policy.</remarks>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32,System.TimeSpan)">
      <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length and element count for the replay buffer.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all the notifications of the source subject to the specified replay buffer trimming policy.</param>
      <param name="bufferSize">Maximum element count of the replay buffer.</param>
      <param name="window">Maximum time length of the replay buffer.</param>
      <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="window" /> is less than TimeSpan.Zero.</exception>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``1(System.IObservable{``0},System.Int32,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length and element count for the replay buffer.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="bufferSize">Maximum element count of the replay buffer.</param>
      <param name="window">Maximum time length of the replay buffer.</param>
      <param name="scheduler">Scheduler where connected observers will be invoked on.</param>
      <returns>A connectable observable sequence that shares a single subscription to the underlying sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="window" /> is less than TimeSpan.Zero.</exception>
      <remarks>Subscribers will receive all the notifications of the source subject to the specified replay buffer trimming policy.</remarks>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length and element count for the replay buffer.
            This operator is a specialization of Multicast using a <see cref="T:System.Reactive.Subjects.ReplaySubject`1" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
      <param name="source">Source sequence whose elements will be multicasted through a single shared subscription.</param>
      <param name="selector">Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all the notifications of the source subject to the specified replay buffer trimming policy.</param>
      <param name="bufferSize">Maximum element count of the replay buffer.</param>
      <param name="window">Maximum time length of the replay buffer.</param>
      <param name="scheduler">Scheduler where connected observers within the selector function will be invoked on.</param>
      <returns>An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="window" /> is less than TimeSpan.Zero.</exception>
      <seealso cref="T:System.Reactive.Subjects.ReplaySubject`1" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Chunkify``1(System.IObservable{``0})">
      <summary>
            Produces an enumerable sequence of consecutive (possibly empty) chunks of the source sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>The enumerable sequence that returns consecutive (possibly empty) chunks upon each iteration.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Collect``2(System.IObservable{``0},System.Func{``1},System.Func{``1,``0,``1})">
      <summary>
            Produces an enumerable sequence that returns elements collected/aggregated from the source sequence between consecutive iterations.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements produced by the merge operation during collection.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="newCollector">Factory to create a new collector object.</param>
      <param name="merge">Merges a sequence element with the current collector.</param>
      <returns>The enumerable sequence that returns collected/aggregated elements from the source sequence upon each iteration.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="newCollector" /> or <paramref name="merge" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Collect``2(System.IObservable{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1})">
      <summary>
            Produces an enumerable sequence that returns elements collected/aggregated from the source sequence between consecutive iterations.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements produced by the merge operation during collection.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="getInitialCollector">Factory to create the initial collector object.</param>
      <param name="merge">Merges a sequence element with the current collector.</param>
      <param name="getNewCollector">Factory to replace the current collector by a new collector.</param>
      <returns>The enumerable sequence that returns collected/aggregated elements from the source sequence upon each iteration.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="getInitialCollector" /> or <paramref name="merge" /> or <paramref name="getNewCollector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.First``1(System.IObservable{``0})">
      <summary>
            Returns the first element of an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>The first element in the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
      <seealso cref="M:System.Reactive.Linq.Observable.FirstAsync``1(System.IObservable{``0})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.First``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the first element of an observable sequence that satisfies the condition in the predicate.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
      <returns>The first element in the observable sequence that satisfies the condition in the predicate.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in the predicate. -or- The source sequence is empty.</exception>
      <seealso cref="M:System.Reactive.Linq.Observable.FirstAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FirstOrDefault``1(System.IObservable{``0})">
      <summary>
            Returns the first element of an observable sequence, or a default value if no such element exists.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>The first element in the observable sequence, or a default value if no such element exists.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <seealso cref="M:System.Reactive.Linq.Observable.FirstOrDefaultAsync``1(System.IObservable{``0})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.FirstOrDefault``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the first element of an observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
      <returns>The first element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <seealso cref="M:System.Reactive.Linq.Observable.FirstOrDefaultAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.ForEach``1(System.IObservable{``0},System.Action{``0})">
      <summary>
            Invokes an action for each element in the observable sequence, and blocks until the sequence is terminated.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> is null.</exception>
      <remarks>Because of its blocking nature, this operator is mainly used for testing.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ForEach``1(System.IObservable{``0},System.Action{``0,System.Int32})">
      <summary>
            Invokes an action for each element in the observable sequence, incorporating the element's index, and blocks until the sequence is terminated.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> is null.</exception>
      <remarks>Because of its blocking nature, this operator is mainly used for testing.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.GetEnumerator``1(System.IObservable{``0})">
      <summary>
            Returns an enumerator that enumerates all values of the observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to get an enumerator for.</param>
      <returns>The enumerator that can be used to enumerate over the elements in the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Last``1(System.IObservable{``0})">
      <summary>
            Returns the last element of an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>The last element in the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
      <seealso cref="M:System.Reactive.Linq.Observable.LastAsync``1(System.IObservable{``0})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Last``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the last element of an observable sequence that satisfies the condition in the predicate.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
      <returns>The last element in the observable sequence that satisfies the condition in the predicate.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in the predicate. -or- The source sequence is empty.</exception>
      <seealso cref="M:System.Reactive.Linq.Observable.LastAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.LastOrDefault``1(System.IObservable{``0})">
      <summary>
            Returns the last element of an observable sequence, or a default value if no such element exists.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>The last element in the observable sequence, or a default value if no such element exists.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <seealso cref="M:System.Reactive.Linq.Observable.LastOrDefaultAsync``1(System.IObservable{``0})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.LastOrDefault``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the last element of an observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
      <returns>The last element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <seealso cref="M:System.Reactive.Linq.Observable.LastOrDefaultAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Latest``1(System.IObservable{``0})">
      <summary>
            Returns an enumerable sequence whose enumeration returns the latest observed element in the source observable sequence.
            Enumerators on the resulting sequence will never produce the same element repeatedly, and will block until the next element becomes available.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>The enumerable sequence that returns the last sampled element upon each iteration and subsequently blocks until the next element in the observable source sequence becomes available.</returns>
    </member>
    <member name="M:System.Reactive.Linq.Observable.MostRecent``1(System.IObservable{``0},``0)">
      <summary>
            Returns an enumerable sequence whose enumeration returns the most recently observed element in the source observable sequence, using the specified initial value in case no element has been sampled yet.
            Enumerators on the resulting sequence never block and can produce the same element repeatedly.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="initialValue">Initial value that will be yielded by the enumerable sequence if no element has been sampled yet.</param>
      <returns>The enumerable sequence that returns the last sampled element upon each iteration.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Next``1(System.IObservable{``0})">
      <summary>
            Returns an enumerable sequence whose enumeration blocks until the next element in the source observable sequence becomes available.
            Enumerators on the resulting sequence will block until the next element becomes available.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>The enumerable sequence that blocks upon each iteration until the next element in the observable source sequence becomes available.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Single``1(System.IObservable{``0})">
      <summary>
            Returns the only element of an observable sequence, and throws an exception if there is not exactly one element in the observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>The single element in the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The source sequence contains more than one element. -or- The source sequence is empty.</exception>
      <seealso cref="M:System.Reactive.Linq.Observable.SingleAsync``1(System.IObservable{``0})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Single``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the only element of an observable sequence that satisfies the condition in the predicate, and throws an exception if there is not exactly one element matching the predicate in the observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
      <returns>The single element in the observable sequence that satisfies the condition in the predicate.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in the predicate. -or- More than one element satisfies the condition in the predicate. -or- The source sequence is empty.</exception>
      <seealso cref="M:System.Reactive.Linq.Observable.SingleAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.SingleOrDefault``1(System.IObservable{``0})">
      <summary>
            Returns the only element of an observable sequence, or a default value if the observable sequence is empty; this method throws an exception if there is more than one element in the observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>The single element in the observable sequence, or a default value if no such element exists.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The source sequence contains more than one element.</exception>
      <seealso cref="M:System.Reactive.Linq.Observable.SingleOrDefaultAsync``1(System.IObservable{``0})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.SingleOrDefault``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the only element of an observable sequence that satisfies the condition in the predicate, or a default value if no such element exists; this method throws an exception if there is more than one element matching the predicate in the observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <param name="predicate">A predicate function to evaluate for elements in the source sequence.</param>
      <returns>The single element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The sequence contains more than one element that satisfies the condition in the predicate.</exception>
      <seealso cref="M:System.Reactive.Linq.Observable.SingleOrDefaultAsync``1(System.IObservable{``0},System.Func{``0,System.Boolean})" />
    </member>
    <member name="M:System.Reactive.Linq.Observable.Wait``1(System.IObservable{``0})">
      <summary>
            Waits for the observable sequence to complete and returns the last element of the sequence.
            If the sequence terminates with an OnError notification, the exception is throw.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source observable sequence.</param>
      <returns>The last element in the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ObserveOn``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Wraps the source sequence in order to run its observer callbacks on the specified scheduler.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="scheduler">Scheduler to notify observers on.</param>
      <returns>The source sequence whose observations happen on the specified scheduler.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
            This only invokes observer callbacks on a scheduler. In case the subscription and/or unsubscription actions have side-effects
            that require to be run on a scheduler, use <see cref="M:System.Reactive.Linq.Observable.SubscribeOn``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)" />.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ObserveOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)">
      <summary>
            Wraps the source sequence in order to run its observer callbacks on the specified synchronization context.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="context">Synchronization context to notify observers on.</param>
      <returns>The source sequence whose observations happen on the specified synchronization context.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="context" /> is null.</exception>
      <remarks>
            This only invokes observer callbacks on a synchronization context. In case the subscription and/or unsubscription actions have side-effects
            that require to be run on a synchronization context, use <see cref="M:System.Reactive.Linq.Observable.SubscribeOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)" />.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SubscribeOn``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Wraps the source sequence in order to run its subscription and unsubscription logic on the specified scheduler. This operation is not commonly used;
            see the remarks section for more information on the distinction between SubscribeOn and ObserveOn.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="scheduler">Scheduler to perform subscription and unsubscription actions on.</param>
      <returns>The source sequence whose subscriptions and unsubscriptions happen on the specified scheduler.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
            This only performs the side-effects of subscription and unsubscription on the specified scheduler. In order to invoke observer
            callbacks on a scheduler, use <see cref="M:System.Reactive.Linq.Observable.ObserveOn``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)" />.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SubscribeOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)">
      <summary>
            Wraps the source sequence in order to run its subscription and unsubscription logic on the specified synchronization context. This operation is not commonly used;
            see the remarks section for more information on the distinction between SubscribeOn and ObserveOn.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="context">Synchronization context to perform subscription and unsubscription actions on.</param>
      <returns>The source sequence whose subscriptions and unsubscriptions happen on the specified synchronization context.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="context" /> is null.</exception>
      <remarks>
            This only performs the side-effects of subscription and unsubscription on the specified synchronization context. In order to invoke observer
            callbacks on a synchronization context, use <see cref="M:System.Reactive.Linq.Observable.ObserveOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)" />.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Synchronize``1(System.IObservable{``0})">
      <summary>
            Synchronizes the observable sequence such that observer notifications cannot be delivered concurrently.
            This overload is useful to "fix" an observable sequence that exhibits concurrent callbacks on individual observers, which is invalid behavior for the query processor.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <returns>The source sequence whose outgoing calls to observers are synchronized.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>
            It's invalid behavior - according to the observer grammar - for a sequence to exhibit concurrent callbacks on a given observer.
            This operator can be used to "fix" a source that doesn't conform to this rule.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Synchronize``1(System.IObservable{``0},System.Object)">
      <summary>
            Synchronizes the observable sequence such that observer notifications cannot be delivered concurrently, using the specified gate object.
            This overload is useful when writing n-ary query operators, in order to prevent concurrent callbacks from different sources by synchronizing on a common gate object.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="gate">Gate object to synchronize each observer call on.</param>
      <returns>The source sequence whose outgoing calls to observers are synchronized on the given gate object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="gate" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Subscribe``1(System.Collections.Generic.IEnumerable{``0},System.IObserver{``0})">
      <summary>
            Subscribes an observer to an enumerable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Enumerable sequence to subscribe to.</param>
      <param name="observer">Observer that will receive notifications from the enumerable sequence.</param>
      <returns>Disposable object that can be used to unsubscribe the observer from the enumerable</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="observer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Subscribe``1(System.Collections.Generic.IEnumerable{``0},System.IObserver{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Subscribes an observer to an enumerable sequence, using the specified scheduler to run the enumeration loop.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Enumerable sequence to subscribe to.</param>
      <param name="observer">Observer that will receive notifications from the enumerable sequence.</param>
      <param name="scheduler">Scheduler to perform the enumeration on.</param>
      <returns>Disposable object that can be used to unsubscribe the observer from the enumerable</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="observer" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToEnumerable``1(System.IObservable{``0})">
      <summary>
            Converts an observable sequence to an enumerable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to convert to an enumerable sequence.</param>
      <returns>The enumerable sequence containing the elements in the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToEvent(System.IObservable{System.Reactive.Unit})">
      <summary>
            Exposes an observable sequence as an object with an Action-based .NET event.
            </summary>
      <param name="source">Observable source sequence.</param>
      <returns>The event source object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToEvent``1(System.IObservable{``0})">
      <summary>
            Exposes an observable sequence as an object with an Action&lt;TSource&gt;-based .NET event.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable source sequence.</param>
      <returns>The event source object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToEventPattern``1(System.IObservable{System.Reactive.EventPattern{``0}})">
      <summary>
            Exposes an observable sequence as an object with a .NET event, conforming to the standard .NET event pattern.
            </summary>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
      <param name="source">Observable source sequence.</param>
      <returns>The event source object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Converts an enumerable sequence to an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Enumerable sequence to convert to an observable sequence.</param>
      <returns>The observable sequence whose elements are pulled from the given enumerable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Converts an enumerable sequence to an observable sequence, using the specified scheduler to run the enumeration loop.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Enumerable sequence to convert to an observable sequence.</param>
      <param name="scheduler">Scheduler to run the enumeration of the input sequence on.</param>
      <returns>The observable sequence whose elements are pulled from the given enumerable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.IDisposable})">
      <summary>
            Creates an observable sequence from a specified Subscribe method implementation.
            </summary>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="subscribe">Implementation of the resulting observable sequence's Subscribe method.</param>
      <returns>The observable sequence with the specified implementation for the Subscribe method.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subscribe" /> is null.</exception>
      <remarks>
            Use of this operator is preferred over manual implementation of the IObservable&lt;T&gt; interface. In case
            you need a type implementing IObservable&lt;T&gt; rather than an anonymous implementation, consider using
            the <see cref="T:System.Reactive.ObservableBase`1" /> abstract base class.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.Action})">
      <summary>
            Creates an observable sequence from a specified Subscribe method implementation.
            </summary>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="subscribe">Implementation of the resulting observable sequence's Subscribe method, returning an Action delegate that will be wrapped in an IDisposable.</param>
      <returns>The observable sequence with the specified implementation for the Subscribe method.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subscribe" /> is null.</exception>
      <remarks>
            Use of this operator is preferred over manual implementation of the IObservable&lt;T&gt; interface. In case
            you need a type implementing IObservable&lt;T&gt; rather than an anonymous implementation, consider using
            the <see cref="T:System.Reactive.ObservableBase`1" /> abstract base class.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task})">
      <summary>
            Creates an observable sequence from a specified cancellable asynchronous Subscribe method.
            The CancellationToken passed to the asynchronous Subscribe method is tied to the returned disposable subscription, allowing best-effort cancellation.
            </summary>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="subscribeAsync">Asynchronous method used to produce elements.</param>
      <returns>The observable sequence surfacing the elements produced by the asynchronous method.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subscribeAsync" /> is null.</exception>
      <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
      <remarks>When a subscription to the resulting sequence is disposed, the CancellationToken that was fed to the asynchronous subscribe function will be signaled.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.Threading.Tasks.Task})">
      <summary>
            Creates an observable sequence from a specified asynchronous Subscribe method.
            </summary>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="subscribeAsync">Asynchronous method used to produce elements.</param>
      <returns>The observable sequence surfacing the elements produced by the asynchronous method.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subscribeAsync" /> is null.</exception>
      <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IDisposable}})">
      <summary>
            Creates an observable sequence from a specified cancellable asynchronous Subscribe method.
            The CancellationToken passed to the asynchronous Subscribe method is tied to the returned disposable subscription, allowing best-effort cancellation.
            </summary>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="subscribeAsync">Asynchronous method used to implemented the resulting sequence's Subscribe method.</param>
      <returns>The observable sequence with the specified implementation for the Subscribe method.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subscribeAsync" /> is null.</exception>
      <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
      <remarks>When a subscription to the resulting sequence is disposed, the CancellationToken that was fed to the asynchronous subscribe function will be signaled.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.Threading.Tasks.Task{System.IDisposable}})">
      <summary>
            Creates an observable sequence from a specified asynchronous Subscribe method.
            </summary>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="subscribeAsync">Asynchronous method used to implemented the resulting sequence's Subscribe method.</param>
      <returns>The observable sequence with the specified implementation for the Subscribe method.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subscribeAsync" /> is null.</exception>
      <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Action}})">
      <summary>
            Creates an observable sequence from a specified cancellable asynchronous Subscribe method.
            The CancellationToken passed to the asynchronous Subscribe method is tied to the returned disposable subscription, allowing best-effort cancellation.
            </summary>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="subscribeAsync">Asynchronous method used to implemented the resulting sequence's Subscribe method, returning an Action delegate that will be wrapped in an IDisposable.</param>
      <returns>The observable sequence with the specified implementation for the Subscribe method.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subscribeAsync" /> is null.</exception>
      <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
      <remarks>When a subscription to the resulting sequence is disposed, the CancellationToken that was fed to the asynchronous subscribe function will be signaled.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.Threading.Tasks.Task{System.Action}})">
      <summary>
            Creates an observable sequence from a specified asynchronous Subscribe method.
            </summary>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="subscribeAsync">Asynchronous method used to implemented the resulting sequence's Subscribe method, returning an Action delegate that will be wrapped in an IDisposable.</param>
      <returns>The observable sequence with the specified implementation for the Subscribe method.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subscribeAsync" /> is null.</exception>
      <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Defer``1(System.Func{System.IObservable{``0}})">
      <summary>
            Returns an observable sequence that invokes the specified factory function whenever a new observer subscribes.
            </summary>
      <typeparam name="TResult">The type of the elements in the sequence returned by the factory function, and in the resulting sequence.</typeparam>
      <param name="observableFactory">Observable factory function to invoke for each observer that subscribes to the resulting sequence.</param>
      <returns>An observable sequence whose observers trigger an invocation of the given observable factory function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observableFactory" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Defer``1(System.Func{System.Threading.Tasks.Task{System.IObservable{``0}}})">
      <summary>
            Returns an observable sequence that starts the specified asynchronous factory function whenever a new observer subscribes.
            </summary>
      <typeparam name="TResult">The type of the elements in the sequence returned by the factory function, and in the resulting sequence.</typeparam>
      <param name="observableFactoryAsync">Asynchronous factory function to start for each observer that subscribes to the resulting sequence.</param>
      <returns>An observable sequence whose observers trigger the given asynchronous observable factory function to be started.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observableFactoryAsync" /> is null.</exception>
      <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.DeferAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IObservable{``0}}})">
      <summary>
            Returns an observable sequence that starts the specified cancellable asynchronous factory function whenever a new observer subscribes.
            The CancellationToken passed to the asynchronous factory function is tied to the returned disposable subscription, allowing best-effort cancellation.
            </summary>
      <typeparam name="TResult">The type of the elements in the sequence returned by the factory function, and in the resulting sequence.</typeparam>
      <param name="observableFactoryAsync">Asynchronous factory function to start for each observer that subscribes to the resulting sequence.</param>
      <returns>An observable sequence whose observers trigger the given asynchronous observable factory function to be started.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observableFactoryAsync" /> is null.</exception>
      <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
      <remarks>When a subscription to the resulting sequence is disposed, the CancellationToken that was fed to the asynchronous observable factory function will be signaled.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Empty``1">
      <summary>
            Returns an empty observable sequence.
            </summary>
      <typeparam name="TResult">The type used for the IObservable&lt;T&gt; type parameter of the resulting sequence.</typeparam>
      <returns>An observable sequence with no elements.</returns>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Empty``1(``0)">
      <summary>
            Returns an empty observable sequence.
            </summary>
      <typeparam name="TResult">The type used for the IObservable&lt;T&gt; type parameter of the resulting sequence.</typeparam>
      <param name="witness">Object solely used to infer the type of the <typeparamref name="TResult" /> type parameter. This parameter is typically used when creating a sequence of anonymously typed elements.</param>
      <returns>An observable sequence with no elements.</returns>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Empty``1(System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns an empty observable sequence, using the specified scheduler to send out the single OnCompleted message.
            </summary>
      <typeparam name="TResult">The type used for the IObservable&lt;T&gt; type parameter of the resulting sequence.</typeparam>
      <param name="scheduler">Scheduler to send the termination call on.</param>
      <returns>An observable sequence with no elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Empty``1(System.Reactive.Concurrency.IScheduler,``0)">
      <summary>
            Returns an empty observable sequence, using the specified scheduler to send out the single OnCompleted message.
            </summary>
      <typeparam name="TResult">The type used for the IObservable&lt;T&gt; type parameter of the resulting sequence.</typeparam>
      <param name="scheduler">Scheduler to send the termination call on.</param>
      <param name="witness">Object solely used to infer the type of the <typeparamref name="TResult" /> type parameter. This parameter is typically used when creating a sequence of anonymously typed elements.</param>
      <returns>An observable sequence with no elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1})">
      <summary>
            Generates an observable sequence by running a state-driven loop producing the sequence's elements.
            </summary>
      <typeparam name="TState">The type of the state used in the generator loop.</typeparam>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="initialState">Initial state.</param>
      <param name="condition">Condition to terminate generation (upon returning false).</param>
      <param name="iterate">Iteration step function.</param>
      <param name="resultSelector">Selector function for results produced in the sequence.</param>
      <returns>The generated sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> or <paramref name="iterate" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Generates an observable sequence by running a state-driven loop producing the sequence's elements, using the specified scheduler to send out observer messages.
            </summary>
      <typeparam name="TState">The type of the state used in the generator loop.</typeparam>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="initialState">Initial state.</param>
      <param name="condition">Condition to terminate generation (upon returning false).</param>
      <param name="iterate">Iteration step function.</param>
      <param name="resultSelector">Selector function for results produced in the sequence.</param>
      <param name="scheduler">Scheduler on which to run the generator loop.</param>
      <returns>The generated sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> or <paramref name="iterate" /> or <paramref name="resultSelector" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Never``1">
      <summary>
            Returns a non-terminating observable sequence, which can be used to denote an infinite duration (e.g. when using reactive joins).
            </summary>
      <typeparam name="TResult">The type used for the IObservable&lt;T&gt; type parameter of the resulting sequence.</typeparam>
      <returns>An observable sequence whose observers will never get called.</returns>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Never``1(``0)">
      <summary>
            Returns a non-terminating observable sequence, which can be used to denote an infinite duration (e.g. when using reactive joins).
            </summary>
      <typeparam name="TResult">The type used for the IObservable&lt;T&gt; type parameter of the resulting sequence.</typeparam>
      <param name="witness">Object solely used to infer the type of the <typeparamref name="TResult" /> type parameter. This parameter is typically used when creating a sequence of anonymously typed elements.</param>
      <returns>An observable sequence whose observers will never get called.</returns>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Range(System.Int32,System.Int32)">
      <summary>
            Generates an observable sequence of integral numbers within a specified range.
            </summary>
      <param name="start">The value of the first integer in the sequence.</param>
      <param name="count">The number of sequential integers to generate.</param>
      <returns>An observable sequence that contains a range of sequential integral numbers.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero. -or- <paramref name="start" /> + <paramref name="count" /> - 1 is larger than <see cref="M:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Range(System.Int32,System.Int32,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Generates an observable sequence of integral numbers within a specified range, using the specified scheduler to send out observer messages.
            </summary>
      <param name="start">The value of the first integer in the sequence.</param>
      <param name="count">The number of sequential integers to generate.</param>
      <param name="scheduler">Scheduler to run the generator loop on.</param>
      <returns>An observable sequence that contains a range of sequential integral numbers.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero. -or- <paramref name="start" /> + <paramref name="count" /> - 1 is larger than <see cref="M:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Repeat``1(``0)">
      <summary>
            Generates an observable sequence that repeats the given element infinitely.
            </summary>
      <typeparam name="TResult">The type of the element that will be repeated in the produced sequence.</typeparam>
      <param name="value">Element to repeat.</param>
      <returns>An observable sequence that repeats the given element infinitely.</returns>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Repeat``1(``0,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Generates an observable sequence that repeats the given element infinitely, using the specified scheduler to send out observer messages.
            </summary>
      <typeparam name="TResult">The type of the element that will be repeated in the produced sequence.</typeparam>
      <param name="value">Element to repeat.</param>
      <param name="scheduler">Scheduler to run the producer loop on.</param>
      <returns>An observable sequence that repeats the given element infinitely.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Repeat``1(``0,System.Int32)">
      <summary>
            Generates an observable sequence that repeats the given element the specified number of times.
            </summary>
      <typeparam name="TResult">The type of the element that will be repeated in the produced sequence.</typeparam>
      <param name="value">Element to repeat.</param>
      <param name="repeatCount">Number of times to repeat the element.</param>
      <returns>An observable sequence that repeats the given element the specified number of times.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="repeatCount" /> is less than zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Repeat``1(``0,System.Int32,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Generates an observable sequence that repeats the given element the specified number of times, using the specified scheduler to send out observer messages.
            </summary>
      <typeparam name="TResult">The type of the element that will be repeated in the produced sequence.</typeparam>
      <param name="value">Element to repeat.</param>
      <param name="repeatCount">Number of times to repeat the element.</param>
      <param name="scheduler">Scheduler to run the producer loop on.</param>
      <returns>An observable sequence that repeats the given element the specified number of times.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="repeatCount" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Return``1(``0)">
      <summary>
            Returns an observable sequence that contains a single element.
            </summary>
      <typeparam name="TResult">The type of the element that will be returned in the produced sequence.</typeparam>
      <param name="value">Single element in the resulting observable sequence.</param>
      <returns>An observable sequence containing the single specified element.</returns>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Return``1(``0,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that contains a single element, using the specified scheduler to send out observer messages.
            </summary>
      <typeparam name="TResult">The type of the element that will be returned in the produced sequence.</typeparam>
      <param name="value">Single element in the resulting observable sequence.</param>
      <param name="scheduler">Scheduler to send the single element on.</param>
      <returns>An observable sequence containing the single specified element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)">
      <summary>
            Returns an observable sequence that terminates with an exception.
            </summary>
      <typeparam name="TResult">The type used for the IObservable&lt;T&gt; type parameter of the resulting sequence.</typeparam>
      <param name="exception">Exception object used for the sequence's termination.</param>
      <returns>The observable sequence that terminates exceptionally with the specified exception object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Throw``1(System.Exception,``0)">
      <summary>
            Returns an observable sequence that terminates with an exception.
            </summary>
      <typeparam name="TResult">The type used for the IObservable&lt;T&gt; type parameter of the resulting sequence.</typeparam>
      <param name="exception">Exception object used for the sequence's termination.</param>
      <param name="witness">Object solely used to infer the type of the <typeparamref name="TResult" /> type parameter. This parameter is typically used when creating a sequence of anonymously typed elements.</param>
      <returns>The observable sequence that terminates exceptionally with the specified exception object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Throw``1(System.Exception,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that terminates with an exception, using the specified scheduler to send out the single OnError message.
            </summary>
      <typeparam name="TResult">The type used for the IObservable&lt;T&gt; type parameter of the resulting sequence.</typeparam>
      <param name="exception">Exception object used for the sequence's termination.</param>
      <param name="scheduler">Scheduler to send the exceptional termination call on.</param>
      <returns>The observable sequence that terminates exceptionally with the specified exception object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Throw``1(System.Exception,System.Reactive.Concurrency.IScheduler,``0)">
      <summary>
            Returns an observable sequence that terminates with an exception, using the specified scheduler to send out the single OnError message.
            </summary>
      <typeparam name="TResult">The type used for the IObservable&lt;T&gt; type parameter of the resulting sequence.</typeparam>
      <param name="exception">Exception object used for the sequence's termination.</param>
      <param name="scheduler">Scheduler to send the exceptional termination call on.</param>
      <param name="witness">Object solely used to infer the type of the <typeparamref name="TResult" /> type parameter. This parameter is typically used when creating a sequence of anonymously typed elements.</param>
      <returns>The observable sequence that terminates exceptionally with the specified exception object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Using``2(System.Func{``1},System.Func{``1,System.IObservable{``0}})">
      <summary>
            Constructs an observable sequence that depends on a resource object, whose lifetime is tied to the resulting observable sequence's lifetime.
            </summary>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <typeparam name="TResource">The type of the resource used during the generation of the resulting sequence. Needs to implement <see cref="T:System.IDisposable" />.</typeparam>
      <param name="resourceFactory">Factory function to obtain a resource object.</param>
      <param name="observableFactory">Factory function to obtain an observable sequence that depends on the obtained resource.</param>
      <returns>An observable sequence whose lifetime controls the lifetime of the dependent resource object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resourceFactory" /> or <paramref name="observableFactory" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Using``2(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IObservable{``0}}})">
      <summary>
            Constructs an observable sequence that depends on a resource object, whose lifetime is tied to the resulting observable sequence's lifetime. The resource is obtained and used through asynchronous methods.
            The CancellationToken passed to the asynchronous methods is tied to the returned disposable subscription, allowing best-effort cancellation at any stage of the resource acquisition or usage.
            </summary>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <typeparam name="TResource">The type of the resource used during the generation of the resulting sequence. Needs to implement <see cref="T:System.IDisposable" />.</typeparam>
      <param name="resourceFactoryAsync">Asynchronous factory function to obtain a resource object.</param>
      <param name="observableFactoryAsync">Asynchronous factory function to obtain an observable sequence that depends on the obtained resource.</param>
      <returns>An observable sequence whose lifetime controls the lifetime of the dependent resource object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resourceFactoryAsync" /> or <paramref name="observableFactoryAsync" /> is null.</exception>
      <remarks>This operator is especially useful in conjunction with the asynchronous programming features introduced in C# 5.0 and Visual Basic 11.</remarks>
      <remarks>When a subscription to the resulting sequence is disposed, the CancellationToken that was fed to the asynchronous resource factory and observable factory functions will be signaled.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.And``2(System.IObservable{``0},System.IObservable{``1})">
      <summary>
            Creates a pattern that matches when both observable sequences have an available element.
            </summary>
      <typeparam name="TLeft">The type of the elements in the left sequence.</typeparam>
      <typeparam name="TRight">The type of the elements in the right sequence.</typeparam>
      <param name="left">Observable sequence to match with the right sequence.</param>
      <param name="right">Observable sequence to match with the left sequence.</param>
      <returns>Pattern object that matches when both observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Then``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Matches when the observable sequence has an available element and projects the element by invoking the selector function.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source">Observable sequence to apply the selector on.</param>
      <param name="selector">Selector that will be invoked for elements in the source sequence.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.When``1(System.Reactive.Joins.Plan{``0}[])">
      <summary>
            Joins together the results from several patterns.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, obtained from the specified patterns.</typeparam>
      <param name="plans">A series of plans created by use of the Then operator on patterns.</param>
      <returns>An observable sequence with the results from matching several patterns.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="plans" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.When``1(System.Collections.Generic.IEnumerable{System.Reactive.Joins.Plan{``0}})">
      <summary>
            Joins together the results from several patterns.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, obtained from the specified patterns.</typeparam>
      <param name="plans">A series of plans created by use of the Then operator on patterns.</param>
      <returns>An observable sequence with the results form matching several patterns.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="plans" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})">
      <summary>
            Propagates the observable sequence that reacts first.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="first">First observable sequence.</param>
      <param name="second">Second observable sequence.</param>
      <returns>An observable sequence that surfaces either of the given sequences, whichever reacted first.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0}[])">
      <summary>
            Propagates the observable sequence that reacts first.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Observable sources competing to react first.</param>
      <returns>An observable sequence that surfaces any of the given sequences, whichever reacted first.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Amb``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
      <summary>
            Propagates the observable sequence that reacts first.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Observable sources competing to react first.</param>
      <returns>An observable sequence that surfaces any of the given sequences, whichever reacted first.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Buffer``2(System.IObservable{``0},System.Func{System.IObservable{``1}})">
      <summary>
            Projects each element of an observable sequence into consecutive non-overlapping buffers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the lists in the result sequence.</typeparam>
      <typeparam name="TBufferClosing">The type of the elements in the sequences indicating buffer closing events.</typeparam>
      <param name="source">Source sequence to produce buffers over.</param>
      <param name="bufferClosingSelector">A function invoked to define the boundaries of the produced buffers. A new buffer is started when the previous one is closed.</param>
      <returns>An observable sequence of buffers.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="bufferClosingSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Buffer``3(System.IObservable{``0},System.IObservable{``1},System.Func{``1,System.IObservable{``2}})">
      <summary>
            Projects each element of an observable sequence into zero or more buffers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the lists in the result sequence.</typeparam>
      <typeparam name="TBufferOpening">The type of the elements in the sequence indicating buffer opening events, also passed to the closing selector to obtain a sequence of buffer closing events.</typeparam>
      <typeparam name="TBufferClosing">The type of the elements in the sequences indicating buffer closing events.</typeparam>
      <param name="source">Source sequence to produce buffers over.</param>
      <param name="bufferOpenings">Observable sequence whose elements denote the creation of new buffers.</param>
      <param name="bufferClosingSelector">A function invoked to define the closing of each produced buffer.</param>
      <returns>An observable sequence of buffers.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="bufferOpenings" /> or <paramref name="bufferClosingSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Buffer``2(System.IObservable{``0},System.IObservable{``1})">
      <summary>
            Projects each element of an observable sequence into consecutive non-overlapping buffers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the lists in the result sequence.</typeparam>
      <typeparam name="TBufferBoundary">The type of the elements in the sequences indicating buffer boundary events.</typeparam>
      <param name="source">Source sequence to produce buffers over.</param>
      <param name="bufferBoundaries">Sequence of buffer boundary markers. The current buffer is closed and a new buffer is opened upon receiving a boundary marker.</param>
      <returns>An observable sequence of buffers.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="bufferBoundaries" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Catch``2(System.IObservable{``0},System.Func{``1,System.IObservable{``0}})">
      <summary>
            Continues an observable sequence that is terminated by an exception of the specified type with the observable sequence produced by the handler.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence and sequences returned by the exception handler function.</typeparam>
      <typeparam name="TException">The type of the exception to catch and handle. Needs to derive from <see cref="T:System.Exception" />.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="handler">Exception handler function, producing another observable sequence.</param>
      <returns>An observable sequence containing the source sequence's elements, followed by the elements produced by the handler's resulting observable sequence in case an exception occurred.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="handler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Catch``1(System.IObservable{``0},System.IObservable{``0})">
      <summary>
            Continues an observable sequence that is terminated by an exception with the next observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence and handler sequence.</typeparam>
      <param name="first">First observable sequence whose exception (if any) is caught.</param>
      <param name="second">Second observable sequence used to produce results when an error occurred in the first sequence.</param>
      <returns>An observable sequence containing the first sequence's elements, followed by the elements of the second sequence in case an exception occurred.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Catch``1(System.IObservable{``0}[])">
      <summary>
            Continues an observable sequence that is terminated by an exception with the next observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source and handler sequences.</typeparam>
      <param name="sources">Observable sequences to catch exceptions for.</param>
      <returns>An observable sequence containing elements from consecutive source sequences until a source sequence terminates successfully.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Catch``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
      <summary>
            Continues an observable sequence that is terminated by an exception with the next observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source and handler sequences.</typeparam>
      <param name="sources">Observable sequences to catch exceptions for.</param>
      <returns>An observable sequence containing elements from consecutive source sequences until a source sequence terminates successfully.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``3(System.IObservable{``0},System.IObservable{``1},System.Func{``0,``1,``2})">
      <summary>
            Merges two observable sequences into one observable sequence by using the selector function whenever one of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="first">First observable source.</param>
      <param name="second">Second observable source.</param>
      <param name="resultSelector">Function to invoke whenever either of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of both sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``4(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.Func{``0,``1,``2,``3})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``5(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.Func{``0,``1,``2,``3,``4})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``6(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.Func{``0,``1,``2,``3,``4,``5})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``7(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.Func{``0,``1,``2,``3,``4,``5,``6})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``8(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``9(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``10(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``11(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``12(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="source11">Eleventh observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="source11" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``13(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="source11">Eleventh observable source.</param>
      <param name="source12">Twelfth observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="source11" /> or <paramref name="source12" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``14(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TSource13">The type of the elements in the thirteenth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="source11">Eleventh observable source.</param>
      <param name="source12">Twelfth observable source.</param>
      <param name="source13">Thirteenth observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="source11" /> or <paramref name="source12" /> or <paramref name="source13" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``15(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.IObservable{``13},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TSource13">The type of the elements in the thirteenth source sequence.</typeparam>
      <typeparam name="TSource14">The type of the elements in the fourteenth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="source11">Eleventh observable source.</param>
      <param name="source12">Twelfth observable source.</param>
      <param name="source13">Thirteenth observable source.</param>
      <param name="source14">Fourteenth observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="source11" /> or <paramref name="source12" /> or <paramref name="source13" /> or <paramref name="source14" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``16(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.IObservable{``13},System.IObservable{``14},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TSource13">The type of the elements in the thirteenth source sequence.</typeparam>
      <typeparam name="TSource14">The type of the elements in the fourteenth source sequence.</typeparam>
      <typeparam name="TSource15">The type of the elements in the fifteenth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="source11">Eleventh observable source.</param>
      <param name="source12">Twelfth observable source.</param>
      <param name="source13">Thirteenth observable source.</param>
      <param name="source14">Fourteenth observable source.</param>
      <param name="source15">Fifteenth observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="source11" /> or <paramref name="source12" /> or <paramref name="source13" /> or <paramref name="source14" /> or <paramref name="source15" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``17(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.IObservable{``13},System.IObservable{``14},System.IObservable{``15},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TSource13">The type of the elements in the thirteenth source sequence.</typeparam>
      <typeparam name="TSource14">The type of the elements in the fourteenth source sequence.</typeparam>
      <typeparam name="TSource15">The type of the elements in the fifteenth source sequence.</typeparam>
      <typeparam name="TSource16">The type of the elements in the sixteenth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="source11">Eleventh observable source.</param>
      <param name="source12">Twelfth observable source.</param>
      <param name="source13">Thirteenth observable source.</param>
      <param name="source14">Fourteenth observable source.</param>
      <param name="source15">Fifteenth observable source.</param>
      <param name="source16">Sixteenth observable source.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="source11" /> or <paramref name="source12" /> or <paramref name="source13" /> or <paramref name="source14" /> or <paramref name="source15" /> or <paramref name="source16" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``2(System.Collections.Generic.IEnumerable{System.IObservable{``0}},System.Func{System.Collections.Generic.IList{``0},``1})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="sources">Observable sources.</param>
      <param name="resultSelector">Function to invoke whenever any of the sources produces an element. For efficiency, the input list is reused after the selector returns. Either aggregate or copy the values during the function call.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
      <summary>
            Merges the specified observable sequences into one observable sequence by emitting a list with the latest source elements whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences, and in the lists in the result sequence.</typeparam>
      <param name="sources">Observable sources.</param>
      <returns>An observable sequence containing lists of the latest elements of the sources.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.CombineLatest``1(System.IObservable{``0}[])">
      <summary>
            Merges the specified observable sequences into one observable sequence by emitting a list with the latest source elements whenever any of the observable sequences produces an element.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences, and in the lists in the result sequence.</typeparam>
      <param name="sources">Observable sources.</param>
      <returns>An observable sequence containing lists of the latest elements of the sources.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Concat``1(System.IObservable{``0},System.IObservable{``0})">
      <summary>
            Concatenates the second observable sequence to the first observable sequence upon successful termination of the first.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="first">First observable sequence.</param>
      <param name="second">Second observable sequence.</param>
      <returns>An observable sequence that contains the elements of the first sequence, followed by those of the second the sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Concat``1(System.IObservable{``0}[])">
      <summary>
            Concatenates all of the specified observable sequences, as long as the previous observable sequence terminated successfully.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Observable sequences to concatenate.</param>
      <returns>An observable sequence that contains the elements of each given sequence, in sequential order.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Concat``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
      <summary>
            Concatenates all observable sequences in the given enumerable sequence, as long as the previous observable sequence terminated successfully.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Observable sequences to concatenate.</param>
      <returns>An observable sequence that contains the elements of each given sequence, in sequential order.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Concat``1(System.IObservable{System.IObservable{``0}})">
      <summary>
            Concatenates all inner observable sequences, as long as the previous observable sequence terminated successfully.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Observable sequence of inner observable sequences.</param>
      <returns>An observable sequence that contains the elements of each observed inner sequence, in sequential order.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Concat``1(System.IObservable{System.Threading.Tasks.Task{``0}})">
      <summary>
            Concatenates all task results, as long as the previous task terminated successfully.
            </summary>
      <typeparam name="TSource">The type of the results produced by the tasks.</typeparam>
      <param name="sources">Observable sequence of tasks.</param>
      <returns>An observable sequence that contains the results of each task, in sequential order.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
      <remarks>If the tasks support cancellation, consider manual conversion of the tasks using <see cref="M:System.Reactive.Linq.Observable.FromAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})" />, followed by a concatenation operation using <see cref="M:System.Reactive.Linq.Observable.Concat``1(System.IObservable{System.IObservable{``0}})" />.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Merge``1(System.IObservable{System.IObservable{``0}})">
      <summary>
            Merges elements from all inner observable sequences into a single observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Observable sequence of inner observable sequences.</param>
      <returns>The observable sequence that merges the elements of the inner sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Merge``1(System.IObservable{System.Threading.Tasks.Task{``0}})">
      <summary>
            Merges results from all source tasks into a single observable sequence.
            </summary>
      <typeparam name="TSource">The type of the results produced by the source tasks.</typeparam>
      <param name="sources">Observable sequence of tasks.</param>
      <returns>The observable sequence that merges the results of the source tasks.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
      <remarks>If the tasks support cancellation, consider manual conversion of the tasks using <see cref="M:System.Reactive.Linq.Observable.FromAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})" />, followed by a merge operation using <see cref="M:System.Reactive.Linq.Observable.Merge``1(System.IObservable{System.IObservable{``0}})" />.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Merge``1(System.IObservable{System.IObservable{``0}},System.Int32)">
      <summary>
            Merges elements from all inner observable sequences into a single observable sequence, limiting the number of concurrent subscriptions to inner sequences.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Observable sequence of inner observable sequences.</param>
      <param name="maxConcurrent">Maximum number of inner observable sequences being subscribed to concurrently.</param>
      <returns>The observable sequence that merges the elements of the inner sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxConcurrent" /> is less than or equal to zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Merge``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}},System.Int32)">
      <summary>
            Merges elements from all observable sequences in the given enumerable sequence into a single observable sequence, limiting the number of concurrent subscriptions to inner sequences.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Enumerable sequence of observable sequences.</param>
      <param name="maxConcurrent">Maximum number of observable sequences being subscribed to concurrently.</param>
      <returns>The observable sequence that merges the elements of the observable sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxConcurrent" /> is less than or equal to zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Merge``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}},System.Int32,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Merges elements from all observable sequences in the given enumerable sequence into a single observable sequence, limiting the number of concurrent subscriptions to inner sequences, and using the specified scheduler for enumeration of and subscription to the sources.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Enumerable sequence of observable sequences.</param>
      <param name="maxConcurrent">Maximum number of observable sequences being subscribed to concurrently.</param>
      <param name="scheduler">Scheduler to run the enumeration of the sequence of sources on.</param>
      <returns>The observable sequence that merges the elements of the observable sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxConcurrent" /> is less than or equal to zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Merge``1(System.IObservable{``0},System.IObservable{``0})">
      <summary>
            Merges elements from two observable sequences into a single observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="first">First observable sequence.</param>
      <param name="second">Second observable sequence.</param>
      <returns>The observable sequence that merges the elements of the given sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Merge``1(System.IObservable{``0},System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Merges elements from two observable sequences into a single observable sequence, using the specified scheduler for enumeration of and subscription to the sources.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="first">First observable sequence.</param>
      <param name="second">Second observable sequence.</param>
      <param name="scheduler">Scheduler used to introduce concurrency for making subscriptions to the given sequences.</param>
      <returns>The observable sequence that merges the elements of the given sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Merge``1(System.IObservable{``0}[])">
      <summary>
            Merges elements from all of the specified observable sequences into a single observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Observable sequences.</param>
      <returns>The observable sequence that merges the elements of the observable sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Merge``1(System.Reactive.Concurrency.IScheduler,System.IObservable{``0}[])">
      <summary>
            Merges elements from all of the specified observable sequences into a single observable sequence, using the specified scheduler for enumeration of and subscription to the sources.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Observable sequences.</param>
      <param name="scheduler">Scheduler to run the enumeration of the sequence of sources on.</param>
      <returns>The observable sequence that merges the elements of the observable sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> or <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Merge``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
      <summary>
            Merges elements from all observable sequences in the given enumerable sequence into a single observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Enumerable sequence of observable sequences.</param>
      <returns>The observable sequence that merges the elements of the observable sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Merge``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Merges elements from all observable sequences in the given enumerable sequence into a single observable sequence, using the specified scheduler for enumeration of and subscription to the sources.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Enumerable sequence of observable sequences.</param>
      <param name="scheduler">Scheduler to run the enumeration of the sequence of sources on.</param>
      <returns>The observable sequence that merges the elements of the observable sequences.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.OnErrorResumeNext``1(System.IObservable{``0},System.IObservable{``0})">
      <summary>
            Concatenates the second observable sequence to the first observable sequence upon successful or exceptional termination of the first.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="first">First observable sequence whose exception (if any) is caught.</param>
      <param name="second">Second observable sequence used to produce results after the first sequence terminates.</param>
      <returns>An observable sequence that concatenates the first and second sequence, even if the first sequence terminates exceptionally.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.OnErrorResumeNext``1(System.IObservable{``0}[])">
      <summary>
            Concatenates all of the specified observable sequences, even if the previous observable sequence terminated exceptionally.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Observable sequences to concatenate.</param>
      <returns>An observable sequence that concatenates the source sequences, even if a sequence terminates exceptionally.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.OnErrorResumeNext``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
      <summary>
            Concatenates all observable sequences in the given enumerable sequence, even if the previous observable sequence terminated exceptionally.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Observable sequences to concatenate.</param>
      <returns>An observable sequence that concatenates the source sequences, even if a sequence terminates exceptionally.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SkipUntil``2(System.IObservable{``0},System.IObservable{``1})">
      <summary>
            Returns the elements from the source observable sequence only after the other observable sequence produces an element.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TOther">The type of the elements in the other sequence that indicates the end of skip behavior.</typeparam>
      <param name="source">Source sequence to propagate elements for.</param>
      <param name="other">Observable sequence that triggers propagation of elements of the source sequence.</param>
      <returns>An observable sequence containing the elements of the source sequence starting from the point the other sequence triggered propagation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Switch``1(System.IObservable{System.IObservable{``0}})">
      <summary>
            Switches between the inner observable sequences such that the resulting sequence always produces elements from the most recently received inner observable sequence.
            Each time a new inner observable sequence is received, the previous inner observable sequence is unsubscribed from.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <param name="sources">Observable sequence of inner observable sequences.</param>
      <returns>The observable sequence that at any point in time produces the elements of the most recent inner observable sequence that has been received.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Switch``1(System.IObservable{System.Threading.Tasks.Task{``0}})">
      <summary>
            Switches between the tasks such that the resulting sequence always produces results from the most recently received task.
            Each time a new task is received, the previous task's result is ignored.
            </summary>
      <typeparam name="TSource">The type of the results produced by the source tasks.</typeparam>
      <param name="sources">Observable sequence of tasks.</param>
      <returns>The observable sequence that at any point in time produces the result of the most recent task that has been received.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
      <remarks>If the tasks support cancellation, consider manual conversion of the tasks using <see cref="M:System.Reactive.Linq.Observable.FromAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})" />, followed by a switch operation using <see cref="M:System.Reactive.Linq.Observable.Switch``1(System.IObservable{System.IObservable{``0}})" />.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TakeUntil``2(System.IObservable{``0},System.IObservable{``1})">
      <summary>
            Returns the elements from the source observable sequence until the other observable sequence produces an element.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TOther">The type of the elements in the other sequence that indicates the end of take behavior.</typeparam>
      <param name="source">Source sequence to propagate elements for.</param>
      <param name="other">Observable sequence that terminates propagation of elements of the source sequence.</param>
      <returns>An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Window``2(System.IObservable{``0},System.Func{System.IObservable{``1}})">
      <summary>
            Projects each element of an observable sequence into consecutive non-overlapping windows.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the windows in the result sequence.</typeparam>
      <typeparam name="TWindowClosing">The type of the elements in the sequences indicating window closing events.</typeparam>
      <param name="source">Source sequence to produce windows over.</param>
      <param name="windowClosingSelector">A function invoked to define the boundaries of the produced windows. A new window is started when the previous one is closed.</param>
      <returns>An observable sequence of windows.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="windowClosingSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Window``3(System.IObservable{``0},System.IObservable{``1},System.Func{``1,System.IObservable{``2}})">
      <summary>
            Projects each element of an observable sequence into zero or more windows.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the windows in the result sequence.</typeparam>
      <typeparam name="TWindowOpening">The type of the elements in the sequence indicating window opening events, also passed to the closing selector to obtain a sequence of window closing events.</typeparam>
      <typeparam name="TWindowClosing">The type of the elements in the sequences indicating window closing events.</typeparam>
      <param name="source">Source sequence to produce windows over.</param>
      <param name="windowOpenings">Observable sequence whose elements denote the creation of new windows.</param>
      <param name="windowClosingSelector">A function invoked to define the closing of each produced window.</param>
      <returns>An observable sequence of windows.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="windowOpenings" /> or <paramref name="windowClosingSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Window``2(System.IObservable{``0},System.IObservable{``1})">
      <summary>
            Projects each element of an observable sequence into consecutive non-overlapping windows.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the windows in the result sequence.</typeparam>
      <typeparam name="TWindowBoundary">The type of the elements in the sequences indicating window boundary events.</typeparam>
      <param name="source">Source sequence to produce windows over.</param>
      <param name="windowBoundaries">Sequence of window boundary markers. The current window is closed and a new window is opened upon receiving a boundary marker.</param>
      <returns>An observable sequence of windows.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="windowBoundaries" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``3(System.IObservable{``0},System.IObservable{``1},System.Func{``0,``1,``2})">
      <summary>
            Merges two observable sequences into one observable sequence by combining their elements in a pairwise fashion.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="first">First observable source.</param>
      <param name="second">Second observable source.</param>
      <param name="resultSelector">Function to invoke for each consecutive pair of elements from the first and second source.</param>
      <returns>An observable sequence containing the result of pairwise combining the elements of the first and second source using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``4(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.Func{``0,``1,``2,``3})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``5(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.Func{``0,``1,``2,``3,``4})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``6(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.Func{``0,``1,``2,``3,``4,``5})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``7(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.Func{``0,``1,``2,``3,``4,``5,``6})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``8(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``9(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``10(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``11(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``12(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="source11">Eleventh observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="source11" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``13(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="source11">Eleventh observable source.</param>
      <param name="source12">Twelfth observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="source11" /> or <paramref name="source12" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``14(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TSource13">The type of the elements in the thirteenth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="source11">Eleventh observable source.</param>
      <param name="source12">Twelfth observable source.</param>
      <param name="source13">Thirteenth observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="source11" /> or <paramref name="source12" /> or <paramref name="source13" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``15(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.IObservable{``13},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TSource13">The type of the elements in the thirteenth source sequence.</typeparam>
      <typeparam name="TSource14">The type of the elements in the fourteenth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="source11">Eleventh observable source.</param>
      <param name="source12">Twelfth observable source.</param>
      <param name="source13">Thirteenth observable source.</param>
      <param name="source14">Fourteenth observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="source11" /> or <paramref name="source12" /> or <paramref name="source13" /> or <paramref name="source14" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``16(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.IObservable{``13},System.IObservable{``14},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TSource13">The type of the elements in the thirteenth source sequence.</typeparam>
      <typeparam name="TSource14">The type of the elements in the fourteenth source sequence.</typeparam>
      <typeparam name="TSource15">The type of the elements in the fifteenth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="source11">Eleventh observable source.</param>
      <param name="source12">Twelfth observable source.</param>
      <param name="source13">Thirteenth observable source.</param>
      <param name="source14">Fourteenth observable source.</param>
      <param name="source15">Fifteenth observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="source11" /> or <paramref name="source12" /> or <paramref name="source13" /> or <paramref name="source14" /> or <paramref name="source15" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``17(System.IObservable{``0},System.IObservable{``1},System.IObservable{``2},System.IObservable{``3},System.IObservable{``4},System.IObservable{``5},System.IObservable{``6},System.IObservable{``7},System.IObservable{``8},System.IObservable{``9},System.IObservable{``10},System.IObservable{``11},System.IObservable{``12},System.IObservable{``13},System.IObservable{``14},System.IObservable{``15},System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TSource13">The type of the elements in the thirteenth source sequence.</typeparam>
      <typeparam name="TSource14">The type of the elements in the fourteenth source sequence.</typeparam>
      <typeparam name="TSource15">The type of the elements in the fifteenth source sequence.</typeparam>
      <typeparam name="TSource16">The type of the elements in the sixteenth source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="source1">First observable source.</param>
      <param name="source2">Second observable source.</param>
      <param name="source3">Third observable source.</param>
      <param name="source4">Fourth observable source.</param>
      <param name="source5">Fifth observable source.</param>
      <param name="source6">Sixth observable source.</param>
      <param name="source7">Seventh observable source.</param>
      <param name="source8">Eighth observable source.</param>
      <param name="source9">Ninth observable source.</param>
      <param name="source10">Tenth observable source.</param>
      <param name="source11">Eleventh observable source.</param>
      <param name="source12">Twelfth observable source.</param>
      <param name="source13">Thirteenth observable source.</param>
      <param name="source14">Fourteenth observable source.</param>
      <param name="source15">Fifteenth observable source.</param>
      <param name="source16">Sixteenth observable source.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> or <paramref name="source3" /> or <paramref name="source4" /> or <paramref name="source5" /> or <paramref name="source6" /> or <paramref name="source7" /> or <paramref name="source8" /> or <paramref name="source9" /> or <paramref name="source10" /> or <paramref name="source11" /> or <paramref name="source12" /> or <paramref name="source13" /> or <paramref name="source14" /> or <paramref name="source15" /> or <paramref name="source16" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``2(System.Collections.Generic.IEnumerable{System.IObservable{``0}},System.Func{System.Collections.Generic.IList{``0},``1})">
      <summary>
            Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="sources">Observable sources.</param>
      <param name="resultSelector">Function to invoke for each series of elements at corresponding indexes in the sources.</param>
      <returns>An observable sequence containing the result of combining elements of the sources using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
      <summary>
            Merges the specified observable sequences into one observable sequence by emitting a list with the elements of the observable sequences at corresponding indexes.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences, and in the lists in the result sequence.</typeparam>
      <param name="sources">Observable sources.</param>
      <returns>An observable sequence containing lists of elements at corresponding indexes.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``1(System.IObservable{``0}[])">
      <summary>
            Merges the specified observable sequences into one observable sequence by emitting a list with the elements of the observable sequences at corresponding indexes.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequences, and in the lists in the result sequence.</typeparam>
      <param name="sources">Observable sources.</param>
      <returns>An observable sequence containing lists of elements at corresponding indexes.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sources" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Zip``3(System.IObservable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>
            Merges an observable sequence and an enumerable sequence into one observable sequence by using the selector function.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first observable source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second enumerable source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="first">First observable source.</param>
      <param name="second">Second enumerable source.</param>
      <param name="resultSelector">Function to invoke for each consecutive pair of elements from the first and second source.</param>
      <returns>An observable sequence containing the result of pairwise combining the elements of the first and second source using the specified result selector function.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.AsObservable``1(System.IObservable{``0})">
      <summary>
            Hides the identity of an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence whose identity to hide.</param>
      <returns>An observable sequence that hides the identity of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.Int32)">
      <summary>
            Projects each element of an observable sequence into consecutive non-overlapping buffers which are produced based on element count information.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the lists in the result sequence.</typeparam>
      <param name="source">Source sequence to produce buffers over.</param>
      <param name="count">Length of each buffer.</param>
      <returns>An observable sequence of buffers.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than or equal to zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.Int32,System.Int32)">
      <summary>
            Projects each element of an observable sequence into zero or more buffers which are produced based on element count information.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the lists in the result sequence.</typeparam>
      <param name="source">Source sequence to produce buffers over.</param>
      <param name="count">Length of each buffer.</param>
      <param name="skip">Number of elements to skip between creation of consecutive buffers.</param>
      <returns>An observable sequence of buffers.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="skip" /> is less than or equal to zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Dematerialize``1(System.IObservable{System.Reactive.Notification{``0}})">
      <summary>
            Dematerializes the explicit notification values of an observable sequence as implicit notifications.
            </summary>
      <typeparam name="TSource">The type of the elements materialized in the source sequence notification objects.</typeparam>
      <param name="source">An observable sequence containing explicit notification values which have to be turned into implicit notifications.</param>
      <returns>An observable sequence exhibiting the behavior corresponding to the source sequence's notification values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.DistinctUntilChanged``1(System.IObservable{``0})">
      <summary>
            Returns an observable sequence that contains only distinct contiguous elements.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to retain distinct contiguous elements for.</param>
      <returns>An observable sequence only containing the distinct contiguous elements from the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.DistinctUntilChanged``1(System.IObservable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Returns an observable sequence that contains only distinct contiguous elements according to the comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to retain distinct contiguous elements for.</param>
      <param name="comparer">Equality comparer for source elements.</param>
      <returns>An observable sequence only containing the distinct contiguous elements from the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.DistinctUntilChanged``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Returns an observable sequence that contains only distinct contiguous elements according to the keySelector.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the discriminator key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to retain distinct contiguous elements for, based on a computed key value.</param>
      <param name="keySelector">A function to compute the comparison key for each element.</param>
      <returns>An observable sequence only containing the distinct contiguous elements, based on a computed key value, from the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.DistinctUntilChanged``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Returns an observable sequence that contains only distinct contiguous elements according to the keySelector and the comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the discriminator key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to retain distinct contiguous elements for, based on a computed key value.</param>
      <param name="keySelector">A function to compute the comparison key for each element.</param>
      <param name="comparer">Equality comparer for computed key values.</param>
      <returns>An observable sequence only containing the distinct contiguous elements, based on a computed key value, from the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Do``1(System.IObservable{``0},System.Action{``0})">
      <summary>
            Invokes an action for each element in the observable sequence, and propagates all observer messages through the result sequence.
            This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <returns>The source sequence with the side-effecting behavior applied.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Do``1(System.IObservable{``0},System.Action{``0},System.Action)">
      <summary>
            Invokes an action for each element in the observable sequence and invokes an action upon graceful termination of the observable sequence.
            This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <param name="onCompleted">Action to invoke upon graceful termination of the observable sequence.</param>
      <returns>The source sequence with the side-effecting behavior applied.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> or <paramref name="onCompleted" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Do``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception})">
      <summary>
            Invokes an action for each element in the observable sequence and invokes an action upon exceptional termination of the observable sequence.
            This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <param name="onError">Action to invoke upon exceptional termination of the observable sequence.</param>
      <returns>The source sequence with the side-effecting behavior applied.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> or <paramref name="onError" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Do``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
      <summary>
            Invokes an action for each element in the observable sequence and invokes an action upon graceful or exceptional termination of the observable sequence.
            This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="onNext">Action to invoke for each element in the observable sequence.</param>
      <param name="onError">Action to invoke upon exceptional termination of the observable sequence.</param>
      <param name="onCompleted">Action to invoke upon graceful termination of the observable sequence.</param>
      <returns>The source sequence with the side-effecting behavior applied.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> or <paramref name="onError" /> or <paramref name="onCompleted" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Do``1(System.IObservable{``0},System.IObserver{``0})">
      <summary>
            Invokes the observer's methods for each message in the source sequence.
            This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="observer">Observer whose methods to invoke as part of the source sequence's observation.</param>
      <returns>The source sequence with the side-effecting behavior applied.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="observer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Finally``1(System.IObservable{``0},System.Action)">
      <summary>
            Invokes a specified action after the source observable sequence terminates gracefully or exceptionally.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="finallyAction">Action to invoke after the source observable sequence terminates.</param>
      <returns>Source sequence with the action-invoking termination behavior applied.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="finallyAction" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.IgnoreElements``1(System.IObservable{``0})">
      <summary>
            Ignores all elements in an observable sequence leaving only the termination messages.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <returns>An empty observable sequence that signals termination, successful or exceptional, of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Materialize``1(System.IObservable{``0})">
      <summary>
            Materializes the implicit notifications of an observable sequence as explicit notification values.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to get notification values for.</param>
      <returns>An observable sequence containing the materialized notification values from the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Repeat``1(System.IObservable{``0})">
      <summary>
            Repeats the observable sequence indefinitely.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to repeat.</param>
      <returns>The observable sequence producing the elements of the given sequence repeatedly and sequentially.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Repeat``1(System.IObservable{``0},System.Int32)">
      <summary>
            Repeats the observable sequence a specified number of times.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to repeat.</param>
      <param name="repeatCount">Number of times to repeat the sequence.</param>
      <returns>The observable sequence producing the elements of the given sequence repeatedly.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="repeatCount" /> is less than zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Retry``1(System.IObservable{``0})">
      <summary>
            Repeats the source observable sequence until it successfully terminates.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to repeat until it successfully terminates.</param>
      <returns>An observable sequence producing the elements of the given sequence repeatedly until it terminates successfully.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Retry``1(System.IObservable{``0},System.Int32)">
      <summary>
            Repeats the source observable sequence the specified number of times or until it successfully terminates.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Observable sequence to repeat until it successfully terminates.</param>
      <param name="retryCount">Number of times to repeat the sequence.</param>
      <returns>An observable sequence producing the elements of the given sequence repeatedly until it terminates successfully.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="retryCount" /> is less than zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Scan``2(System.IObservable{``0},``1,System.Func{``1,``0,``1})">
      <summary>
            Applies an accumulator function over an observable sequence and returns each intermediate result. The specified seed value is used as the initial accumulator value.
            For aggregation behavior with no intermediate results, see <see cref="M:System.Reactive.Linq.Observable.Aggregate``2(System.IObservable{``0},``1,System.Func{``1,``0,``1})" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TAccumulate">The type of the result of the aggregation.</typeparam>
      <param name="source">An observable sequence to accumulate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="accumulator">An accumulator function to be invoked on each element.</param>
      <returns>An observable sequence containing the accumulated values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="accumulator" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Scan``1(System.IObservable{``0},System.Func{``0,``0,``0})">
      <summary>
            Applies an accumulator function over an observable sequence and returns each intermediate result.
            For aggregation behavior with no intermediate results, see <see cref="M:System.Reactive.Linq.Observable.Aggregate``1(System.IObservable{``0},System.Func{``0,``0,``0})" />.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence and the result of the aggregation.</typeparam>
      <param name="source">An observable sequence to accumulate over.</param>
      <param name="accumulator">An accumulator function to be invoked on each element.</param>
      <returns>An observable sequence containing the accumulated values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="accumulator" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SkipLast``1(System.IObservable{``0},System.Int32)">
      <summary>
            Bypasses a specified number of elements at the end of an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="count">Number of elements to bypass at the end of the source sequence.</param>
      <returns>An observable sequence containing the source sequence elements except for the bypassed ones at the end.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.</exception>
      <remarks>
            This operator accumulates a queue with a length enough to store the first <paramref name="count" /> elements. As more elements are
            received, elements are taken from the front of the queue and produced on the result sequence. This causes elements to be delayed.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.StartWith``1(System.IObservable{``0},``0[])">
      <summary>
            Prepends a sequence of values to an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to prepend values to.</param>
      <param name="values">Values to prepend to the specified sequence.</param>
      <returns>The source sequence prepended with the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="values" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.StartWith``1(System.IObservable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Prepends a sequence of values to an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to prepend values to.</param>
      <param name="values">Values to prepend to the specified sequence.</param>
      <returns>The source sequence prepended with the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="values" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.StartWith``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler,``0[])">
      <summary>
            Prepends a sequence of values to an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to prepend values to.</param>
      <param name="scheduler">Scheduler to emit the prepended values on.</param>
      <param name="values">Values to prepend to the specified sequence.</param>
      <returns>The source sequence prepended with the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> or <paramref name="values" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.StartWith``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler,System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Prepends a sequence of values to an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to prepend values to.</param>
      <param name="scheduler">Scheduler to emit the prepended values on.</param>
      <param name="values">Values to prepend to the specified sequence.</param>
      <returns>The source sequence prepended with the specified values.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> or <paramref name="values" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TakeLast``1(System.IObservable{``0},System.Int32)">
      <summary>
            Returns a specified number of contiguous elements from the end of an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="count">Number of elements to take from the end of the source sequence.</param>
      <returns>An observable sequence containing the specified number of elements from the end of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.</exception>
      <remarks>
            This operator accumulates a buffer with a length enough to store elements <paramref name="count" /> elements. Upon completion of
            the source sequence, this buffer is drained on the result sequence. This causes the elements to be delayed.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TakeLast``1(System.IObservable{``0},System.Int32,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns a specified number of contiguous elements from the end of an observable sequence, using the specified scheduler to drain the queue.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="count">Number of elements to take from the end of the source sequence.</param>
      <param name="scheduler">Scheduler used to drain the queue upon completion of the source sequence.</param>
      <returns>An observable sequence containing the specified number of elements from the end of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.</exception>
      <remarks>
            This operator accumulates a buffer with a length enough to store elements <paramref name="count" /> elements. Upon completion of
            the source sequence, this buffer is drained on the result sequence. This causes the elements to be delayed.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TakeLastBuffer``1(System.IObservable{``0},System.Int32)">
      <summary>
            Returns a list with the specified number of contiguous elements from the end of an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence.</param>
      <param name="count">Number of elements to take from the end of the source sequence.</param>
      <returns>An observable sequence containing a single list with the specified number of elements from the end of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.</exception>
      <remarks>
            This operator accumulates a buffer with a length enough to store <paramref name="count" /> elements. Upon completion of the
            source sequence, this buffer is produced on the result sequence.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.Int32)">
      <summary>
            Projects each element of an observable sequence into consecutive non-overlapping windows which are produced based on element count information.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the windows in the result sequence.</typeparam>
      <param name="source">Source sequence to produce windows over.</param>
      <param name="count">Length of each window.</param>
      <returns>An observable sequence of windows.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than or equal to zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.Int32,System.Int32)">
      <summary>
            Projects each element of an observable sequence into zero or more windows which are produced based on element count information.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the windows in the result sequence.</typeparam>
      <param name="source">Source sequence to produce windows over.</param>
      <param name="count">Length of each window.</param>
      <param name="skip">Number of elements to skip between creation of consecutive windows.</param>
      <returns>An observable sequence of windows.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> or <paramref name="skip" /> is less than or equal to zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Cast``1(System.IObservable{System.Object})">
      <summary>
            Converts the elements of an observable sequence to the specified type.
            </summary>
      <typeparam name="TResult">The type to convert the elements in the source sequence to.</typeparam>
      <param name="source">The observable sequence that contains the elements to be converted.</param>
      <returns>An observable sequence that contains each element of the source sequence converted to the specified type.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.DefaultIfEmpty``1(System.IObservable{``0})">
      <summary>
            Returns the elements of the specified sequence or the type parameter's default value in a singleton sequence if the sequence is empty.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence (if any), whose default value will be taken if the sequence is empty.</typeparam>
      <param name="source">The sequence to return a default value for if it is empty.</param>
      <returns>An observable sequence that contains the default value for the TSource type if the source is empty; otherwise, the elements of the source itself.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.DefaultIfEmpty``1(System.IObservable{``0},``0)">
      <summary>
            Returns the elements of the specified sequence or the specified value in a singleton sequence if the sequence is empty.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence (if any), and the specified default value which will be taken if the sequence is empty.</typeparam>
      <param name="source">The sequence to return the specified value for if it is empty.</param>
      <param name="defaultValue">The value to return if the sequence is empty.</param>
      <returns>An observable sequence that contains the specified default value if the source is empty; otherwise, the elements of the source itself.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Distinct``1(System.IObservable{``0})">
      <summary>
            Returns an observable sequence that contains only distinct elements.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to retain distinct elements for.</param>
      <returns>An observable sequence only containing the distinct elements from the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>Usage of this operator should be considered carefully due to the maintenance of an internal lookup structure which can grow large.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Distinct``1(System.IObservable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Returns an observable sequence that contains only distinct elements according to the comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to retain distinct elements for.</param>
      <param name="comparer">Equality comparer for source elements.</param>
      <returns>An observable sequence only containing the distinct elements from the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>Usage of this operator should be considered carefully due to the maintenance of an internal lookup structure which can grow large.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Distinct``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Returns an observable sequence that contains only distinct elements according to the keySelector.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the discriminator key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to retain distinct elements for.</param>
      <param name="keySelector">A function to compute the comparison key for each element.</param>
      <returns>An observable sequence only containing the distinct elements, based on a computed key value, from the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
      <remarks>Usage of this operator should be considered carefully due to the maintenance of an internal lookup structure which can grow large.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Distinct``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Returns an observable sequence that contains only distinct elements according to the keySelector and the comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the discriminator key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence to retain distinct elements for.</param>
      <param name="keySelector">A function to compute the comparison key for each element.</param>
      <param name="comparer">Equality comparer for source elements.</param>
      <returns>An observable sequence only containing the distinct elements, based on a computed key value, from the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
      <remarks>Usage of this operator should be considered carefully due to the maintenance of an internal lookup structure which can grow large.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.GroupBy``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Groups the elements of an observable sequence according to a specified key selector function.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <returns>A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.GroupBy``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Groups the elements of an observable sequence according to a specified key selector function and comparer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="comparer">An equality comparer to compare keys with.</param>
      <returns>A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.GroupBy``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>
            Groups the elements of an observable sequence and selects the resulting elements by using a specified function.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
      <typeparam name="TElement">The type of the elements within the groups computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an observable group.</param>
      <returns>A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.GroupBy``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Groups the elements of an observable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
      <typeparam name="TElement">The type of the elements within the groups computed for each element in the source sequence.</typeparam>
      <param name="source">An observable sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an observable group.</param>
      <param name="comparer">An equality comparer to compare keys with.</param>
      <returns>A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.GroupByUntil``4(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{System.Reactive.Linq.IGroupedObservable{``1,``2},System.IObservable{``3}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Groups the elements of an observable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function.
            A duration selector function is used to control the lifetime of groups. When a group expires, it receives an OnCompleted notification. When a new element with the same
            key value as a reclaimed group occurs, the group will be reborn with a new lifetime request.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
      <typeparam name="TElement">The type of the elements within the groups computed for each element in the source sequence.</typeparam>
      <typeparam name="TDuration">The type of the elements in the duration sequences obtained for each group to denote its lifetime.</typeparam>
      <param name="source">An observable sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an observable group.</param>
      <param name="durationSelector">A function to signal the expiration of a group.</param>
      <param name="comparer">An equality comparer to compare keys with.</param>
      <returns>
            A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
            If a group's lifetime expires, a new group with the same key value can be created once an element with such a key value is encountered.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="durationSelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.GroupByUntil``4(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{System.Reactive.Linq.IGroupedObservable{``1,``2},System.IObservable{``3}})">
      <summary>
            Groups the elements of an observable sequence according to a specified key selector function and selects the resulting elements by using a specified function.
            A duration selector function is used to control the lifetime of groups. When a group expires, it receives an OnCompleted notification. When a new element with the same
            key value as a reclaimed group occurs, the group will be reborn with a new lifetime request.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
      <typeparam name="TElement">The type of the elements within the groups computed for each element in the source sequence.</typeparam>
      <typeparam name="TDuration">The type of the elements in the duration sequences obtained for each group to denote its lifetime.</typeparam>
      <param name="source">An observable sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an observable group.</param>
      <param name="durationSelector">A function to signal the expiration of a group.</param>
      <returns>
            A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
            If a group's lifetime expires, a new group with the same key value can be created once an element with such a key value is encoutered.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="durationSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.GroupByUntil``3(System.IObservable{``0},System.Func{``0,``1},System.Func{System.Reactive.Linq.IGroupedObservable{``1,``0},System.IObservable{``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Groups the elements of an observable sequence according to a specified key selector function and comparer.
            A duration selector function is used to control the lifetime of groups. When a group expires, it receives an OnCompleted notification. When a new element with the same
            key value as a reclaimed group occurs, the group will be reborn with a new lifetime request.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
      <typeparam name="TDuration">The type of the elements in the duration sequences obtained for each group to denote its lifetime.</typeparam>
      <param name="source">An observable sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="durationSelector">A function to signal the expiration of a group.</param>
      <param name="comparer">An equality comparer to compare keys with.</param>
      <returns>
            A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
            If a group's lifetime expires, a new group with the same key value can be created once an element with such a key value is encoutered.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="durationSelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.GroupByUntil``3(System.IObservable{``0},System.Func{``0,``1},System.Func{System.Reactive.Linq.IGroupedObservable{``1,``0},System.IObservable{``2}})">
      <summary>
            Groups the elements of an observable sequence according to a specified key selector function.
            A duration selector function is used to control the lifetime of groups. When a group expires, it receives an OnCompleted notification. When a new element with the same
            key value as a reclaimed group occurs, the group will be reborn with a new lifetime request.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TKey">The type of the grouping key computed for each element in the source sequence.</typeparam>
      <typeparam name="TDuration">The type of the elements in the duration sequences obtained for each group to denote its lifetime.</typeparam>
      <param name="source">An observable sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="durationSelector">A function to signal the expiration of a group.</param>
      <returns>
            A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
            If a group's lifetime expires, a new group with the same key value can be created once an element with such a key value is encoutered.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="durationSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.GroupJoin``5(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``2}},System.Func{``1,System.IObservable{``3}},System.Func{``0,System.IObservable{``1},``4})">
      <summary>
            Correlates the elements of two sequences based on overlapping durations, and groups the results.
            </summary>
      <typeparam name="TLeft">The type of the elements in the left source sequence.</typeparam>
      <typeparam name="TRight">The type of the elements in the right source sequence.</typeparam>
      <typeparam name="TLeftDuration">The type of the elements in the duration sequence denoting the computed duration of each element in the left source sequence.</typeparam>
      <typeparam name="TRightDuration">The type of the elements in the duration sequence denoting the computed duration of each element in the right source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, obtained by invoking the result selector function for source elements with overlapping duration.</typeparam>
      <param name="left">The left observable sequence to join elements for.</param>
      <param name="right">The right observable sequence to join elements for.</param>
      <param name="leftDurationSelector">A function to select the duration of each element of the left observable sequence, used to determine overlap.</param>
      <param name="rightDurationSelector">A function to select the duration of each element of the right observable sequence, used to determine overlap.</param>
      <param name="resultSelector">A function invoked to compute a result element for any element of the left sequence with overlapping elements from the right observable sequence.</param>
      <returns>An observable sequence that contains result elements computed from source elements that have an overlapping duration.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> or <paramref name="leftDurationSelector" /> or <paramref name="rightDurationSelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Join``5(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``2}},System.Func{``1,System.IObservable{``3}},System.Func{``0,``1,``4})">
      <summary>
            Correlates the elements of two sequences based on overlapping durations.
            </summary>
      <typeparam name="TLeft">The type of the elements in the left source sequence.</typeparam>
      <typeparam name="TRight">The type of the elements in the right source sequence.</typeparam>
      <typeparam name="TLeftDuration">The type of the elements in the duration sequence denoting the computed duration of each element in the left source sequence.</typeparam>
      <typeparam name="TRightDuration">The type of the elements in the duration sequence denoting the computed duration of each element in the right source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, obtained by invoking the result selector function for source elements with overlapping duration.</typeparam>
      <param name="left">The left observable sequence to join elements for.</param>
      <param name="right">The right observable sequence to join elements for.</param>
      <param name="leftDurationSelector">A function to select the duration of each element of the left observable sequence, used to determine overlap.</param>
      <param name="rightDurationSelector">A function to select the duration of each element of the right observable sequence, used to determine overlap.</param>
      <param name="resultSelector">A function invoked to compute a result element for any two overlapping elements of the left and right observable sequences.</param>
      <returns>An observable sequence that contains result elements computed from source elements that have an overlapping duration.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> or <paramref name="leftDurationSelector" /> or <paramref name="rightDurationSelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.OfType``1(System.IObservable{System.Object})">
      <summary>
            Filters the elements of an observable sequence based on the specified type.
            </summary>
      <typeparam name="TResult">The type to filter the elements in the source sequence on.</typeparam>
      <param name="source">The observable sequence that contains the elements to be filtered.</param>
      <returns>An observable sequence that contains elements from the input sequence of type TResult.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Select``2(System.IObservable{``0},System.Func{``0,``1})">
      <summary>
            Projects each element of an observable sequence into a new form.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, obtained by running the selector function for each element in the source sequence.</typeparam>
      <param name="source">A sequence of elements to invoke a transform function on.</param>
      <param name="selector">A transform function to apply to each source element.</param>
      <returns>An observable sequence whose elements are the result of invoking the transform function on each element of source.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Select``2(System.IObservable{``0},System.Func{``0,System.Int32,``1})">
      <summary>
            Projects each element of an observable sequence into a new form by incorporating the element's index.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, obtained by running the selector function for each element in the source sequence.</typeparam>
      <param name="source">A sequence of elements to invoke a transform function on.</param>
      <param name="selector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
      <returns>An observable sequence whose elements are the result of invoking the transform function on each element of source.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.IObservable{``1})">
      <summary>
            Projects each element of the source observable sequence to the other observable sequence and merges the resulting observable sequences into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TOther">The type of the elements in the other sequence and the elements in the result sequence.</typeparam>
      <param name="source">An observable sequence of elements to project.</param>
      <param name="other">An observable sequence to project each element from the source sequence onto.</param>
      <returns>An observable sequence whose elements are the result of projecting each source element onto the other sequence and merging all the resulting sequences together.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}})">
      <summary>
            Projects each element of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the projected inner sequences and the elements in the merged result sequence.</typeparam>
      <param name="source">An observable sequence of elements to project.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.Int32,System.IObservable{``1}})">
      <summary>
            Projects each element of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the projected inner sequences and the elements in the merged result sequence.</typeparam>
      <param name="source">An observable sequence of elements to project.</param>
      <param name="selector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
      <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
      <summary>
            Projects each element of an observable sequence to a task and merges all of the task results into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the result produced by the projected tasks and the elements in the merged result sequence.</typeparam>
      <param name="source">An observable sequence of elements to project.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence whose elements are the result of the tasks executed for each element of the input sequence.</returns>
      <remarks>This overload supports composition of observable sequences and tasks, without requiring manual conversion of the tasks to observable sequences using <see cref="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToObservable``1(System.Threading.Tasks.Task{``0})" />.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}})">
      <summary>
            Projects each element of an observable sequence to a task with cancellation support and merges all of the task results into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the result produced by the projected tasks and the elements in the merged result sequence.</typeparam>
      <param name="source">An observable sequence of elements to project.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence whose elements are the result of the tasks executed for each element of the input sequence.</returns>
      <remarks>This overload supports composition of observable sequences and tasks, without requiring manual conversion of the tasks to observable sequences using <see cref="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToObservable``1(System.Threading.Tasks.Task{``0})" />.</remarks>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``3(System.IObservable{``0},System.Func{``0,System.IObservable{``1}},System.Func{``0,``1,``2})">
      <summary>
            Projects each element of an observable sequence to an observable sequence, invokes the result selector for the source element and each of the corresponding inner sequence's elements, and merges the results into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TCollection">The type of the elements in the projected intermediate sequences.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, obtained by using the selector to combine source sequence elements with their corresponding intermediate sequence elements.</typeparam>
      <param name="source">An observable sequence of elements to project.</param>
      <param name="collectionSelector">A transform function to apply to each element.</param>
      <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
      <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``3(System.IObservable{``0},System.Func{``0,System.Int32,System.IObservable{``1}},System.Func{``0,System.Int32,``1,System.Int32,``2})">
      <summary>
            Projects each element of an observable sequence to an observable sequence, invokes the result selector for the source element and each of the corresponding inner sequence's elements, and merges the results into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TCollection">The type of the elements in the projected intermediate sequences.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, obtained by using the selector to combine source sequence elements with their corresponding intermediate sequence elements.</typeparam>
      <param name="source">An observable sequence of elements to project.</param>
      <param name="collectionSelector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
      <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
      <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``3(System.IObservable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,``1,``2})">
      <summary>
            Projects each element of an observable sequence to a task, invokes the result selector for the source element and the task result, and merges the results into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TTaskResult">The type of the results produced by the projected intermediate tasks.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, obtained by using the selector to combine source sequence elements with their corresponding intermediate task results.</typeparam>
      <param name="source">An observable sequence of elements to project.</param>
      <param name="taskSelector">A transform function to apply to each element.</param>
      <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
      <returns>An observable sequence whose elements are the result of obtaining a task for each element of the input sequence and then mapping the task's result and its corresponding source element to a result element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="taskSelector" /> or <paramref name="resultSelector" /> is null.</exception>
      <remarks>This overload supports using LINQ query comprehension syntax in C# and Visual Basic to compose observable sequences and tasks, without requiring manual conversion of the tasks to observable sequences using <see cref="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToObservable``1(System.Threading.Tasks.Task{``0})" />.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``3(System.IObservable{``0},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``0,``1,``2})">
      <summary>
            Projects each element of an observable sequence to a task with cancellation support, invokes the result selector for the source element and the task result, and merges the results into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TTaskResult">The type of the results produced by the projected intermediate tasks.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, obtained by using the selector to combine source sequence elements with their corresponding intermediate task results.</typeparam>
      <param name="source">An observable sequence of elements to project.</param>
      <param name="taskSelector">A transform function to apply to each element.</param>
      <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
      <returns>An observable sequence whose elements are the result of obtaining a task for each element of the input sequence and then mapping the task's result and its corresponding source element to a result element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="taskSelector" /> or <paramref name="resultSelector" /> is null.</exception>
      <remarks>This overload supports using LINQ query comprehension syntax in C# and Visual Basic to compose observable sequences and tasks, without requiring manual conversion of the tasks to observable sequences using <see cref="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToObservable``1(System.Threading.Tasks.Task{``0})" />.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}},System.Func{System.Exception,System.IObservable{``1}},System.Func{System.IObservable{``1}})">
      <summary>
            Projects each notification of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the projected inner sequences and the elements in the merged result sequence.</typeparam>
      <param name="source">An observable sequence of notifications to project.</param>
      <param name="onNext">A transform function to apply to each element.</param>
      <param name="onError">A transform function to apply when an error occurs in the source sequence.</param>
      <param name="onCompleted">A transform function to apply when the end of the source sequence is reached.</param>
      <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function corresponding to each notification in the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> or <paramref name="onError" /> or <paramref name="onCompleted" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.Int32,System.IObservable{``1}},System.Func{System.Exception,System.Int32,System.IObservable{``1}},System.Func{System.Int32,System.IObservable{``1}})">
      <summary>
            Projects each notification of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the projected inner sequences and the elements in the merged result sequence.</typeparam>
      <param name="source">An observable sequence of notifications to project.</param>
      <param name="onNext">A transform function to apply to each element; the second parameter represents the index of the source element.</param>
      <param name="onError">A transform function to apply when an error occurs in the source sequence; the second parameter represents the index of the source element.</param>
      <param name="onCompleted">A transform function to apply when the end of the source sequence is reached; the second parameter represents the number of elements observed.</param>
      <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function corresponding to each notification in the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="onNext" /> or <paramref name="onError" /> or <paramref name="onCompleted" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>
            Projects each element of an observable sequence to an enumerable sequence and concatenates the resulting enumerable sequences into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the projected inner enumerable sequences and the elements in the merged result sequence.</typeparam>
      <param name="source">An observable sequence of elements to project.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The projected sequences are enumerated synchonously within the OnNext call of the source sequence. In order to do a concurrent, non-blocking merge, change the selector to return an observable sequence obtained using the <see cref="M:System.Reactive.Linq.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0})" /> conversion.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>
            Projects each element of an observable sequence to an enumerable sequence and concatenates the resulting enumerable sequences into one observable sequence.
            The index of each source element is used in the projected form of that element. 
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the projected inner enumerable sequences and the elements in the merged result sequence.</typeparam>
      <param name="source">An observable sequence of elements to project.</param>
      <param name="selector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
      <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <remarks>The projected sequences are enumerated synchonously within the OnNext call of the source sequence. In order to do a concurrent, non-blocking merge, change the selector to return an observable sequence obtained using the <see cref="M:System.Reactive.Linq.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0})" /> conversion.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``3(System.IObservable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>
            Projects each element of an observable sequence to an enumerable sequence, invokes the result selector for the source element and each of the corresponding inner sequence's elements, and merges the results into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TCollection">The type of the elements in the projected intermediate enumerable sequences.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, obtained by using the selector to combine source sequence elements with their corresponding intermediate sequence elements.</typeparam>
      <param name="source">An observable sequence of elements to project.</param>
      <param name="collectionSelector">A transform function to apply to each element.</param>
      <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
      <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is null.</exception>
      <remarks>The projected sequences are enumerated synchonously within the OnNext call of the source sequence. In order to do a concurrent, non-blocking merge, change the selector to return an observable sequence obtained using the <see cref="M:System.Reactive.Linq.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0})" /> conversion.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SelectMany``3(System.IObservable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,System.Int32,``1,System.Int32,``2})">
      <summary>
            Projects each element of an observable sequence to an enumerable sequence, invokes the result selector for the source element and each of the corresponding inner sequence's elements, and merges the results into one observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TCollection">The type of the elements in the projected intermediate enumerable sequences.</typeparam>
      <typeparam name="TResult">The type of the elements in the result sequence, obtained by using the selector to combine source sequence elements with their corresponding intermediate sequence elements.</typeparam>
      <param name="source">An observable sequence of elements to project.</param>
      <param name="collectionSelector">A transform function to apply to each element; the second parameter of the function represents the index of the source element.</param>
      <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
      <returns>An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is null.</exception>
      <remarks>The projected sequences are enumerated synchonously within the OnNext call of the source sequence. In order to do a concurrent, non-blocking merge, change the selector to return an observable sequence obtained using the <see cref="M:System.Reactive.Linq.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0})" /> conversion.</remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Skip``1(System.IObservable{``0},System.Int32)">
      <summary>
            Bypasses a specified number of elements in an observable sequence and then returns the remaining elements.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">The sequence to take elements from.</param>
      <param name="count">The number of elements to skip before returning the remaining elements.</param>
      <returns>An observable sequence that contains the elements that occur after the specified index in the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SkipWhile``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Bypasses elements in an observable sequence as long as a specified condition is true and then returns the remaining elements.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to return elements from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <returns>An observable sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SkipWhile``1(System.IObservable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>
            Bypasses elements in an observable sequence as long as a specified condition is true and then returns the remaining elements.
            The element's index is used in the logic of the predicate function.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence to return elements from.</param>
      <param name="predicate">A function to test each element for a condition; the second parameter of the function represents the index of the source element.</param>
      <returns>An observable sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Take``1(System.IObservable{``0},System.Int32)">
      <summary>
            Returns a specified number of contiguous elements from the start of an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">The sequence to take elements from.</param>
      <param name="count">The number of elements to return.</param>
      <returns>An observable sequence that contains the specified number of elements from the start of the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Take``1(System.IObservable{``0},System.Int32,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns a specified number of contiguous elements from the start of an observable sequence, using the specified scheduler for the edge case of Take(0).
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">The sequence to take elements from.</param>
      <param name="count">The number of elements to return.</param>
      <param name="scheduler">Scheduler used to produce an OnCompleted message in case <paramref name="count">count</paramref> is set to 0.</param>
      <returns>An observable sequence that contains the specified number of elements from the start of the input sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TakeWhile``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns elements from an observable sequence as long as a specified condition is true.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence to return elements from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <returns>An observable sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TakeWhile``1(System.IObservable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>
            Returns elements from an observable sequence as long as a specified condition is true.
            The element's index is used in the logic of the predicate function.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">A sequence to return elements from.</param>
      <param name="predicate">A function to test each element for a condition; the second parameter of the function represents the index of the source element.</param>
      <returns>An observable sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Where``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Filters the elements of an observable sequence based on a predicate.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence whose elements to filter.</param>
      <param name="predicate">A function to test each source element for a condition.</param>
      <returns>An observable sequence that contains elements from the input sequence that satisfy the condition.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Where``1(System.IObservable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>
            Filters the elements of an observable sequence based on a predicate by incorporating the element's index.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">An observable sequence whose elements to filter.</param>
      <param name="predicate">A function to test each source element for a conditio; the second parameter of the function represents the index of the source element.</param>
      <returns>An observable sequence that contains elements from the input sequence that satisfy the condition.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Projects each element of an observable sequence into consecutive non-overlapping buffers which are produced based on timing information.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the lists in the result sequence.</typeparam>
      <param name="source">Source sequence to produce buffers over.</param>
      <param name="timeSpan">Length of each buffer.</param>
      <returns>An observable sequence of buffers.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeSpan" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            Specifying a TimeSpan.Zero value for <paramref name="timeSpan" /> is not recommended but supported, causing the scheduler to create buffers as fast as it can.
            Because all source sequence elements end up in one of the buffers, some buffers won't have a zero time span. This is a side-effect of the asynchrony introduced
            by the scheduler, where the action to close the current buffer and to create a new buffer may not execute immediately, despite the TimeSpan.Zero due time.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Projects each element of an observable sequence into consecutive non-overlapping buffers which are produced based on timing information, using the specified scheduler to run timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the lists in the result sequence.</typeparam>
      <param name="source">Source sequence to produce buffers over.</param>
      <param name="timeSpan">Length of each buffer.</param>
      <param name="scheduler">Scheduler to run buffering timers on.</param>
      <returns>An observable sequence of buffers.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeSpan" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            Specifying a TimeSpan.Zero value for <paramref name="timeSpan" /> is not recommended but supported, causing the scheduler to create buffers as fast as it can.
            Because all source sequence elements end up in one of the buffers, some buffers won't have a zero time span. This is a side-effect of the asynchrony introduced
            by the scheduler, where the action to close the current buffer and to create a new buffer may not execute immediately, despite the TimeSpan.Zero due time.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.TimeSpan,System.TimeSpan)">
      <summary>
            Projects each element of an observable sequence into zero or more buffers which are produced based on timing information.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the lists in the result sequence.</typeparam>
      <param name="source">Source sequence to produce buffers over.</param>
      <param name="timeSpan">Length of each buffer.</param>
      <param name="timeShift">Interval between creation of consecutive buffers.</param>
      <returns>An observable sequence of buffers.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeSpan" /> or <paramref name="timeSpan" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="timeSpan" /> is not recommended but supported, causing the scheduler to create buffers with minimum duration
            length. However, some buffers won't have a zero time span. This is a side-effect of the asynchrony introduced by the scheduler, where the action to close the
            current buffer may not execute immediately, despite the TimeSpan.Zero due time.
            </para>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="timeShift" /> is not recommended but supported, causing the scheduler to create buffers as fast as it can.
            However, this doesn't mean all buffers will start at the beginning of the source sequence. This is a side-effect of the asynchrony introduced by the scheduler,
            where the action to create a new buffer may not execute immediately, despite the TimeSpan.Zero due time.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.TimeSpan,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Projects each element of an observable sequence into zero or more buffers which are produced based on timing information, using the specified scheduler to run timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the lists in the result sequence.</typeparam>
      <param name="source">Source sequence to produce buffers over.</param>
      <param name="timeSpan">Length of each buffer.</param>
      <param name="timeShift">Interval between creation of consecutive buffers.</param>
      <param name="scheduler">Scheduler to run buffering timers on.</param>
      <returns>An observable sequence of buffers.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeSpan" /> or <paramref name="timeSpan" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="timeSpan" /> is not recommended but supported, causing the scheduler to create buffers with minimum duration
            length. However, some buffers won't have a zero time span. This is a side-effect of the asynchrony introduced by the scheduler, where the action to close the
            current buffer may not execute immediately, despite the TimeSpan.Zero due time.
            </para>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="timeShift" /> is not recommended but supported, causing the scheduler to create buffers as fast as it can.
            However, this doesn't mean all buffers will start at the beginning of the source sequence. This is a side-effect of the asynchrony introduced by the scheduler,
            where the action to create a new buffer may not execute immediately, despite the TimeSpan.Zero due time.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.TimeSpan,System.Int32)">
      <summary>
            Projects each element of an observable sequence into a buffer that's sent out when either it's full or a given amount of time has elapsed.
            A useful real-world analogy of this overload is the behavior of a ferry leaving the dock when all seats are taken, or at the scheduled time of departure, whichever event occurs first.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the lists in the result sequence.</typeparam>
      <param name="source">Source sequence to produce buffers over.</param>
      <param name="timeSpan">Maximum time length of a window.</param>
      <param name="count">Maximum element count of a window.</param>
      <returns>An observable sequence of buffers.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeSpan" /> is less than TimeSpan.Zero. -or- <paramref name="count" /> is less than or equal to zero.</exception>
      <remarks>
            Specifying a TimeSpan.Zero value for <paramref name="timeSpan" /> is not recommended but supported, causing the scheduler to create buffers as fast as it can.
            Because all source sequence elements end up in one of the buffers, some buffers won't have a zero time span. This is a side-effect of the asynchrony introduced
            by the scheduler, where the action to close the current buffer and to create a new buffer may not execute immediately, despite the TimeSpan.Zero due time.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Buffer``1(System.IObservable{``0},System.TimeSpan,System.Int32,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Projects each element of an observable sequence into a buffer that's sent out when either it's full or a given amount of time has elapsed, using the specified scheduler to run timers.
            A useful real-world analogy of this overload is the behavior of a ferry leaving the dock when all seats are taken, or at the scheduled time of departure, whichever event occurs first.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the lists in the result sequence.</typeparam>
      <param name="source">Source sequence to produce buffers over.</param>
      <param name="timeSpan">Maximum time length of a buffer.</param>
      <param name="count">Maximum element count of a buffer.</param>
      <param name="scheduler">Scheduler to run buffering timers on.</param>
      <returns>An observable sequence of buffers.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeSpan" /> is less than TimeSpan.Zero. -or- <paramref name="count" /> is less than or equal to zero.</exception>
      <remarks>
            Specifying a TimeSpan.Zero value for <paramref name="timeSpan" /> is not recommended but supported, causing the scheduler to create buffers as fast as it can.
            Because all source sequence elements end up in one of the buffers, some buffers won't have a zero time span. This is a side-effect of the asynchrony introduced
            by the scheduler, where the action to close the current buffer and to create a new buffer may not execute immediately, despite the TimeSpan.Zero due time.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Time shifts the observable sequence by the specified relative time duration.
            The relative time intervals between the values are preserved.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to delay values for.</param>
      <param name="dueTime">Relative time by which to shift the observable sequence. If this value is equal to TimeSpan.Zero, the scheduler will dispatch observer callbacks as soon as possible.</param>
      <returns>Time-shifted sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            This operator is less efficient than <see cref="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.TimeSpan)">DelaySubscription</see> because it records all notifications and time-delays those. This allows for immediate propagation of errors.
            </para>
        <para>
            Observer callbacks for the resulting sequence will be run on the default scheduler. This effect is similar to using ObserveOn.
            </para>
        <para>
            Exceptions signaled by the source sequence through an OnError callback are forwarded immediately to the result sequence. Any OnNext notifications that were in the queue at the point of the OnError callback will be dropped.
            In order to delay error propagation, consider using the <see cref="M:System.Reactive.Linq.Observable.Materialize``1(System.IObservable{``0})">Observable.Materialize</see> and <see cref="M:System.Reactive.Linq.Observable.Dematerialize``1(System.IObservable{System.Reactive.Notification{``0}})">Observable.Dematerialize</see> operators, or use <see cref="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.TimeSpan)">DelaySubscription</see>.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Time shifts the observable sequence by the specified relative time duration, using the specified scheduler to run timers.
            The relative time intervals between the values are preserved.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to delay values for.</param>
      <param name="dueTime">Relative time by which to shift the observable sequence. If this value is equal to TimeSpan.Zero, the scheduler will dispatch observer callbacks as soon as possible.</param>
      <param name="scheduler">Scheduler to run the delay timers on.</param>
      <returns>Time-shifted sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            This operator is less efficient than <see cref="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">DelaySubscription</see> because it records all notifications and time-delays those. This allows for immediate propagation of errors.
            </para>
        <para>
            Observer callbacks for the resulting sequence will be run on the specified scheduler. This effect is similar to using ObserveOn.
            </para>
        <para>
            Exceptions signaled by the source sequence through an OnError callback are forwarded immediately to the result sequence. Any OnNext notifications that were in the queue at the point of the OnError callback will be dropped.
            </para>
        <para>
            Exceptions signaled by the source sequence through an OnError callback are forwarded immediately to the result sequence. Any OnNext notifications that were in the queue at the point of the OnError callback will be dropped.
            In order to delay error propagation, consider using the <see cref="M:System.Reactive.Linq.Observable.Materialize``1(System.IObservable{``0})">Observable.Materialize</see> and <see cref="M:System.Reactive.Linq.Observable.Dematerialize``1(System.IObservable{System.Reactive.Notification{``0}})">Observable.Dematerialize</see> operators, or use <see cref="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">DelaySubscription</see>.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.DateTimeOffset)">
      <summary>
            Time shifts the observable sequence to start propagating notifications at the specified absolute time.
            The relative time intervals between the values are preserved.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to delay values for.</param>
      <param name="dueTime">Absolute time used to shift the observable sequence; the relative time shift gets computed upon subscription. If this value is less than or equal to DateTimeOffset.UtcNow, the scheduler will dispatch observer callbacks as soon as possible.</param>
      <returns>Time-shifted sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>
        <para>
            This operator is less efficient than <see cref="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.DateTimeOffset)">DelaySubscription</see> because it records all notifications and time-delays those. This allows for immediate propagation of errors.
            </para>
        <para>
            Observer callbacks for the resulting sequence will be run on the default scheduler. This effect is similar to using ObserveOn.
            </para>
        <para>
            Exceptions signaled by the source sequence through an OnError callback are forwarded immediately to the result sequence. Any OnNext notifications that were in the queue at the point of the OnError callback will be dropped.
            In order to delay error propagation, consider using the <see cref="M:System.Reactive.Linq.Observable.Materialize``1(System.IObservable{``0})">Observable.Materialize</see> and <see cref="M:System.Reactive.Linq.Observable.Dematerialize``1(System.IObservable{System.Reactive.Notification{``0}})">Observable.Dematerialize</see> operators, or use <see cref="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.DateTimeOffset)">DelaySubscription</see>.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Time shifts the observable sequence to start propagating notifications at the specified absolute time, using the specified scheduler to run timers.
            The relative time intervals between the values are preserved.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to delay values for.</param>
      <param name="dueTime">Absolute time used to shift the observable sequence; the relative time shift gets computed upon subscription. If this value is less than or equal to DateTimeOffset.UtcNow, the scheduler will dispatch observer callbacks as soon as possible.</param>
      <param name="scheduler">Scheduler to run the delay timers on.</param>
      <returns>Time-shifted sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
        <para>
            This operator is less efficient than <see cref="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">DelaySubscription</see> because it records all notifications and time-delays those. This allows for immediate propagation of errors.
            </para>
        <para>
            Observer callbacks for the resulting sequence will be run on the specified scheduler. This effect is similar to using ObserveOn.
            </para>
        <para>
            Exceptions signaled by the source sequence through an OnError callback are forwarded immediately to the result sequence. Any OnNext notifications that were in the queue at the point of the OnError callback will be dropped.
            In order to delay error propagation, consider using the <see cref="M:System.Reactive.Linq.Observable.Materialize``1(System.IObservable{``0})">Observable.Materialize</see> and <see cref="M:System.Reactive.Linq.Observable.Dematerialize``1(System.IObservable{System.Reactive.Notification{``0}})">Observable.Dematerialize</see> operators, or use <see cref="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">DelaySubscription</see>.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Delay``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}})">
      <summary>
            Time shifts the observable sequence based on a delay selector function for each element.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TDelay">The type of the elements in the delay sequences used to denote the delay duration of each element in the source sequence.</typeparam>
      <param name="source">Source sequence to delay values for.</param>
      <param name="delayDurationSelector">Selector function to retrieve a sequence indicating the delay for each given element.</param>
      <returns>Time-shifted sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="delayDurationSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Delay``2(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``1}})">
      <summary>
            Time shifts the observable sequence based on a subscription delay and a delay selector function for each element.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TDelay">The type of the elements in the delay sequences used to denote the delay duration of each element in the source sequence.</typeparam>
      <param name="source">Source sequence to delay values for.</param>
      <param name="subscriptionDelay">Sequence indicating the delay for the subscription to the source.</param>
      <param name="delayDurationSelector">Selector function to retrieve a sequence indicating the delay for each given element.</param>
      <returns>Time-shifted sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="subscriptionDelay" /> or <paramref name="delayDurationSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Time shifts the observable sequence by delaying the subscription with the specified relative time duration.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to delay subscription for.</param>
      <param name="dueTime">Relative time shift of the subscription.</param>
      <returns>Time-shifted sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            This operator is more efficient than <see cref="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.TimeSpan)">Delay</see> but postpones all side-effects of subscription and affects error propagation timing.
            </para>
        <para>
            The side-effects of subscribing to the source sequence will be run on the default scheduler. Observer callbacks will not be affected.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Time shifts the observable sequence by delaying the subscription with the specified relative time duration, using the specified scheduler to run timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to delay subscription for.</param>
      <param name="dueTime">Relative time shift of the subscription.</param>
      <param name="scheduler">Scheduler to run the subscription delay timer on.</param>
      <returns>Time-shifted sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            This operator is more efficient than <see cref="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">Delay</see> but postpones all side-effects of subscription and affects error propagation timing.
            </para>
        <para>
            The side-effects of subscribing to the source sequence will be run on the specified scheduler. Observer callbacks will not be affected.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.DateTimeOffset)">
      <summary>
            Time shifts the observable sequence by delaying the subscription to the specified absolute time.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to delay subscription for.</param>
      <param name="dueTime">Absolute time to perform the subscription at.</param>
      <returns>Time-shifted sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>
        <para>
            This operator is more efficient than <see cref="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.DateTimeOffset)">Delay</see> but postpones all side-effects of subscription and affects error propagation timing.
            </para>
        <para>
            The side-effects of subscribing to the source sequence will be run on the default scheduler. Observer callbacks will not be affected.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.DelaySubscription``1(System.IObservable{``0},System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Time shifts the observable sequence by delaying the subscription to the specified absolute time, using the specified scheduler to run timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to delay subscription for.</param>
      <param name="dueTime">Absolute time to perform the subscription at.</param>
      <param name="scheduler">Scheduler to run the subscription delay timer on.</param>
      <returns>Time-shifted sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
        <para>
            This operator is more efficient than <see cref="M:System.Reactive.Linq.Observable.Delay``1(System.IObservable{``0},System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">Delay</see> but postpones all side-effects of subscription and affects error propagation timing.
            </para>
        <para>
            The side-effects of subscribing to the source sequence will be run on the specified scheduler. Observer callbacks will not be affected.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Func{``0,System.TimeSpan})">
      <summary>
            Generates an observable sequence by running a state-driven and temporal loop producing the sequence's elements.
            </summary>
      <typeparam name="TState">The type of the state used in the generator loop.</typeparam>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="initialState">Initial state.</param>
      <param name="condition">Condition to terminate generation (upon returning false).</param>
      <param name="iterate">Iteration step function.</param>
      <param name="resultSelector">Selector function for results produced in the sequence.</param>
      <param name="timeSelector">Time selector function to control the speed of values being produced each iteration.</param>
      <returns>The generated sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> or <paramref name="iterate" /> or <paramref name="resultSelector" /> or <paramref name="timeSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Func{``0,System.TimeSpan},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Generates an observable sequence by running a state-driven and temporal loop producing the sequence's elements, using the specified scheduler to run timers and to send out observer messages.
            </summary>
      <typeparam name="TState">The type of the state used in the generator loop.</typeparam>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="initialState">Initial state.</param>
      <param name="condition">Condition to terminate generation (upon returning false).</param>
      <param name="iterate">Iteration step function.</param>
      <param name="resultSelector">Selector function for results produced in the sequence.</param>
      <param name="timeSelector">Time selector function to control the speed of values being produced each iteration.</param>
      <param name="scheduler">Scheduler on which to run the generator loop.</param>
      <returns>The generated sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> or <paramref name="iterate" /> or <paramref name="resultSelector" /> or <paramref name="timeSelector" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Func{``0,System.DateTimeOffset})">
      <summary>
            Generates an observable sequence by running a state-driven and temporal loop producing the sequence's elements.
            </summary>
      <typeparam name="TState">The type of the state used in the generator loop.</typeparam>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="initialState">Initial state.</param>
      <param name="condition">Condition to terminate generation (upon returning false).</param>
      <param name="iterate">Iteration step function.</param>
      <param name="resultSelector">Selector function for results produced in the sequence.</param>
      <param name="timeSelector">Time selector function to control the speed of values being produced each iteration.</param>
      <returns>The generated sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> or <paramref name="iterate" /> or <paramref name="resultSelector" /> or <paramref name="timeSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Func{``0,System.DateTimeOffset},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Generates an observable sequence by running a state-driven and temporal loop producing the sequence's elements, using the specified scheduler to run timers and to send out observer messages.
            </summary>
      <typeparam name="TState">The type of the state used in the generator loop.</typeparam>
      <typeparam name="TResult">The type of the elements in the produced sequence.</typeparam>
      <param name="initialState">Initial state.</param>
      <param name="condition">Condition to terminate generation (upon returning false).</param>
      <param name="iterate">Iteration step function.</param>
      <param name="resultSelector">Selector function for results produced in the sequence.</param>
      <param name="timeSelector">Time selector function to control the speed of values being produced each iteration.</param>
      <param name="scheduler">Scheduler on which to run the generator loop.</param>
      <returns>The generated sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> or <paramref name="iterate" /> or <paramref name="resultSelector" /> or <paramref name="timeSelector" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Interval(System.TimeSpan)">
      <summary>
            Returns an observable sequence that produces a value after each period.
            </summary>
      <param name="period">Period for producing the values in the resulting sequence. If this value is equal to TimeSpan.Zero, the timer will recur as fast as possible.</param>
      <returns>An observable sequence that produces a value after each period.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="period" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            Intervals are measured between the start of subsequent notifications, not between the end of the previous and the start of the next notification.
            If the observer takes longer than the interval period to handle the message, the subsequent notification will be delivered immediately after the
            current one has been handled. In case you need to control the time between the end and the start of consecutive notifications, consider using the
            <see cref="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Func{``0,System.TimeSpan})" />
            operator instead.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Interval(System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that produces a value after each period, using the specified scheduler to run timers and to send out observer messages.
            </summary>
      <param name="period">Period for producing the values in the resulting sequence. If this value is equal to TimeSpan.Zero, the timer will recur as fast as possible.</param>
      <param name="scheduler">Scheduler to run the timer on.</param>
      <returns>An observable sequence that produces a value after each period.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="period" /> is less than TimeSpan.Zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
      <remarks>
            Intervals are measured between the start of subsequent notifications, not between the end of the previous and the start of the next notification.
            If the observer takes longer than the interval period to handle the message, the subsequent notification will be delivered immediately after the
            current one has been handled. In case you need to control the time between the end and the start of consecutive notifications, consider using the
            <see cref="M:System.Reactive.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1},System.Func{``0,System.TimeSpan},System.Reactive.Concurrency.IScheduler)" />
            operator instead.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sample``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Samples the observable sequence at each interval.
            Upon each sampling tick, the latest element (if any) in the source sequence during the last sampling interval is sent to the resulting sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to sample.</param>
      <param name="interval">Interval at which to sample. If this value is equal to TimeSpan.Zero, the scheduler will continuously sample the stream.</param>
      <returns>Sampled observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="interval" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            Specifying a TimeSpan.Zero value for <paramref name="interval" /> doesn't guarantee all source sequence elements will be preserved. This is a side-effect
            of the asynchrony introduced by the scheduler, where the sampling action may not execute immediately, despite the TimeSpan.Zero due time.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sample``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Samples the observable sequence at each interval, using the specified scheduler to run sampling timers.
            Upon each sampling tick, the latest element (if any) in the source sequence during the last sampling interval is sent to the resulting sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to sample.</param>
      <param name="interval">Interval at which to sample. If this value is equal to TimeSpan.Zero, the scheduler will continuously sample the stream.</param>
      <param name="scheduler">Scheduler to run the sampling timer on.</param>
      <returns>Sampled observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="interval" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            Specifying a TimeSpan.Zero value for <paramref name="interval" /> doesn't guarantee all source sequence elements will be preserved. This is a side-effect
            of the asynchrony introduced by the scheduler, where the sampling action may not execute immediately, despite the TimeSpan.Zero due time.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Sample``2(System.IObservable{``0},System.IObservable{``1})">
      <summary>
            Samples the source observable sequence using a samper observable sequence producing sampling ticks.
            Upon each sampling tick, the latest element (if any) in the source sequence during the last sampling interval is sent to the resulting sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TSample">The type of the elements in the sampling sequence.</typeparam>
      <param name="source">Source sequence to sample.</param>
      <param name="sampler">Sampling tick sequence.</param>
      <returns>Sampled observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="sampler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Skip``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Skips elements for the specified duration from the start of the observable source sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to skip elements for.</param>
      <param name="duration">Duration for skipping elements from the start of the sequence.</param>
      <returns>An observable sequence with the elements skipped during the specified duration from the start of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="duration" /> doesn't guarantee no elements will be dropped from the start of the source sequence.
            This is a side-effect of the asynchrony introduced by the scheduler, where the action that causes callbacks from the source sequence to be forwarded
            may not execute immediately, despite the TimeSpan.Zero due time.
            </para>
        <para>
            Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the <paramref name="duration" />.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Skip``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Skips elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to skip elements for.</param>
      <param name="duration">Duration for skipping elements from the start of the sequence.</param>
      <param name="scheduler">Scheduler to run the timer on.</param>
      <returns>An observable sequence with the elements skipped during the specified duration from the start of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="duration" /> doesn't guarantee no elements will be dropped from the start of the source sequence.
            This is a side-effect of the asynchrony introduced by the scheduler, where the action that causes callbacks from the source sequence to be forwarded
            may not execute immediately, despite the TimeSpan.Zero due time.
            </para>
        <para>
            Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the <paramref name="duration" />.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SkipLast``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Skips elements for the specified duration from the end of the observable source sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to skip elements for.</param>
      <param name="duration">Duration for skipping elements from the end of the sequence.</param>
      <returns>An observable sequence with the elements skipped during the specified duration from the end of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            This operator accumulates a queue with a length enough to store elements received during the initial <paramref name="duration" /> window.
            As more elements are received, elements older than the specified <paramref name="duration" /> are taken from the queue and produced on the
            result sequence. This causes elements to be delayed with <paramref name="duration" />.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SkipLast``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Skips elements for the specified duration from the end of the observable source sequence, using the specified scheduler to run timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to skip elements for.</param>
      <param name="duration">Duration for skipping elements from the end of the sequence.</param>
      <param name="scheduler">Scheduler to run the timer on.</param>
      <returns>An observable sequence with the elements skipped during the specified duration from the end of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            This operator accumulates a queue with a length enough to store elements received during the initial <paramref name="duration" /> window.
            As more elements are received, elements older than the specified <paramref name="duration" /> are taken from the queue and produced on the
            result sequence. This causes elements to be delayed with <paramref name="duration" />.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SkipUntil``1(System.IObservable{``0},System.DateTimeOffset)">
      <summary>
            Skips elements from the observable source sequence until the specified start time.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to skip elements for.</param>
      <param name="startTime">Time to start taking elements from the source sequence. If this value is less than or equal to DateTimeOffset.UtcNow, no elements will be skipped.</param>
      <returns>An observable sequence with the elements skipped until the specified start time.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <remarks>
            Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the <paramref name="startTime" />.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.SkipUntil``1(System.IObservable{``0},System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Skips elements from the observable source sequence until the specified start time, using the specified scheduler to run timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to skip elements for.</param>
      <param name="startTime">Time to start taking elements from the source sequence. If this value is less than or equal to DateTimeOffset.UtcNow, no elements will be skipped.</param>
      <param name="scheduler">Scheduler to run the timer on.</param>
      <returns>An observable sequence with the elements skipped until the specified start time.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
            Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the <paramref name="startTime" />.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Take``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Takes elements for the specified duration from the start of the observable source sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to take elements from.</param>
      <param name="duration">Duration for taking elements from the start of the sequence.</param>
      <returns>An observable sequence with the elements taken during the specified duration from the start of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            Specifying a TimeSpan.Zero value for <paramref name="duration" /> doesn't guarantee an empty sequence will be returned. This is a side-effect
            of the asynchrony introduced by the scheduler, where the action that stops forwarding callbacks from the source sequence may not execute
            immediately, despite the TimeSpan.Zero due time.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Take``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Takes elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to take elements from.</param>
      <param name="duration">Duration for taking elements from the start of the sequence.</param>
      <param name="scheduler">Scheduler to run the timer on.</param>
      <returns>An observable sequence with the elements taken during the specified duration from the start of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            Specifying a TimeSpan.Zero value for <paramref name="duration" /> doesn't guarantee an empty sequence will be returned. This is a side-effect
            of the asynchrony introduced by the scheduler, where the action that stops forwarding callbacks from the source sequence may not execute
            immediately, despite the TimeSpan.Zero due time.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TakeLast``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Returns elements within the specified duration from the end of the observable source sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to take elements from.</param>
      <param name="duration">Duration for taking elements from the end of the sequence.</param>
      <returns>An observable sequence with the elements taken during the specified duration from the end of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            This operator accumulates a buffer with a length enough to store elements for any <paramref name="duration" /> window during the lifetime of
            the source sequence. Upon completion of the source sequence, this buffer is drained on the result sequence. This causes the result elements
            to be delayed with <paramref name="duration" />.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TakeLast``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns elements within the specified duration from the end of the observable source sequence, using the specified scheduler to run timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to take elements from.</param>
      <param name="duration">Duration for taking elements from the end of the sequence.</param>
      <param name="scheduler">Scheduler to run the timer on.</param>
      <returns>An observable sequence with the elements taken during the specified duration from the end of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            This operator accumulates a buffer with a length enough to store elements for any <paramref name="duration" /> window during the lifetime of
            the source sequence. Upon completion of the source sequence, this buffer is drained on the result sequence. This causes the result elements
            to be delayed with <paramref name="duration" />.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TakeLast``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns elements within the specified duration from the end of the observable source sequence, using the specified schedulers to run timers and to drain the collected elements.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to take elements from.</param>
      <param name="duration">Duration for taking elements from the end of the sequence.</param>
      <param name="timerScheduler">Scheduler to run the timer on.</param>
      <param name="loopScheduler">Scheduler to drain the collected elements.</param>
      <returns>An observable sequence with the elements taken during the specified duration from the end of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="timerScheduler" /> or <paramref name="loopScheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            This operator accumulates a buffer with a length enough to store elements for any <paramref name="duration" /> window during the lifetime of
            the source sequence. Upon completion of the source sequence, this buffer is drained on the result sequence. This causes the result elements
            to be delayed with <paramref name="duration" />.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TakeLastBuffer``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Returns a list with the elements within the specified duration from the end of the observable source sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to take elements from.</param>
      <param name="duration">Duration for taking elements from the end of the sequence.</param>
      <returns>An observable sequence containing a single list with the elements taken during the specified duration from the end of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            This operator accumulates a buffer with a length enough to store elements for any <paramref name="duration" /> window during the lifetime of
            the source sequence. Upon completion of the source sequence, this buffer is produced on the result sequence.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TakeLastBuffer``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns a list with the elements within the specified duration from the end of the observable source sequence, using the specified scheduler to run timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to take elements from.</param>
      <param name="duration">Duration for taking elements from the end of the sequence.</param>
      <param name="scheduler">Scheduler to run the timer on.</param>
      <returns>An observable sequence containing a single list with the elements taken during the specified duration from the end of the source sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            This operator accumulates a buffer with a length enough to store elements for any <paramref name="duration" /> window during the lifetime of
            the source sequence. Upon completion of the source sequence, this buffer is produced on the result sequence.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TakeUntil``1(System.IObservable{``0},System.DateTimeOffset)">
      <summary>
            Takes elements for the specified duration until the specified end time.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to take elements from.</param>
      <param name="endTime">Time to stop taking elements from the source sequence. If this value is less than or equal to DateTimeOffset.UtcNow, the result stream will complete immediately.</param>
      <returns>An observable sequence with the elements taken until the specified end time.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TakeUntil``1(System.IObservable{``0},System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Takes elements for the specified duration until the specified end time, using the specified scheduler to run timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to take elements from.</param>
      <param name="endTime">Time to stop taking elements from the source sequence. If this value is less than or equal to DateTimeOffset.UtcNow, the result stream will complete immediately.</param>
      <param name="scheduler">Scheduler to run the timer on.</param>
      <returns>An observable sequence with the elements taken until the specified end time.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Throttle``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Ignores elements from an observable sequence which are followed by another element within a specified relative time duration.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to throttle.</param>
      <param name="dueTime">Throttling duration for each element.</param>
      <returns>The throttled sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            This operator throttles the source sequence by holding on to each element for the duration specified in <paramref name="dueTime" />. If another
            element is produced within this time window, the element is dropped and a new timer is started for the current element, repeating this whole
            process. For streams that never have gaps larger than or equal to <paramref name="dueTime" /> between elements, the resulting stream won't
            produce any elements. In order to reduce the volume of a stream whilst guaranteeing the periodic production of elements, consider using the
            Observable.Sample set of operators.
            </para>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="dueTime" /> is not recommended but supported, causing throttling timers to be scheduled
            that are due immediately. However, this doesn't guarantee all elements will be retained in the result sequence. This is a side-effect of the
            asynchrony introduced by the scheduler, where the action to forward the current element may not execute immediately, despite the TimeSpan.Zero
            due time. In such cases, the next element may arrive before the scheduler gets a chance to run the throttling action.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Throttle``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Ignores elements from an observable sequence which are followed by another element within a specified relative time duration, using the specified scheduler to run throttling timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to throttle.</param>
      <param name="dueTime">Throttling duration for each element.</param>
      <param name="scheduler">Scheduler to run the throttle timers on.</param>
      <returns>The throttled sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            This operator throttles the source sequence by holding on to each element for the duration specified in <paramref name="dueTime" />. If another
            element is produced within this time window, the element is dropped and a new timer is started for the current element, repeating this whole
            process. For streams that never have gaps larger than or equal to <paramref name="dueTime" /> between elements, the resulting stream won't
            produce any elements. In order to reduce the volume of a stream whilst guaranteeing the periodic production of elements, consider using the
            Observable.Sample set of operators.
            </para>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="dueTime" /> is not recommended but supported, causing throttling timers to be scheduled
            that are due immediately. However, this doesn't guarantee all elements will be retained in the result sequence. This is a side-effect of the
            asynchrony introduced by the scheduler, where the action to forward the current element may not execute immediately, despite the TimeSpan.Zero
            due time. In such cases, the next element may arrive before the scheduler gets a chance to run the throttling action.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Throttle``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}})">
      <summary>
            Ignores elements from an observable sequence which are followed by another value within a computed throttle duration.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TThrottle">The type of the elements in the throttle sequences selected for each element in the source sequence.</typeparam>
      <param name="source">Source sequence to throttle.</param>
      <param name="throttleDurationSelector">Selector function to retrieve a sequence indicating the throttle duration for each given element.</param>
      <returns>The throttled sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="throttleDurationSelector" /> is null.</exception>
      <remarks>
            This operator throttles the source sequence by holding on to each element for the duration denoted by <paramref name="throttleDurationSelector" />.
            If another element is produced within this time window, the element is dropped and a new timer is started for the current element, repeating this
            whole process. For streams where the duration computed by applying the <paramref name="throttleDurationSelector" /> to each element overlaps with
            the occurrence of the successor element, the resulting stream won't produce any elements. In order to reduce the volume of a stream whilst
            guaranteeing the periodic production of elements, consider using the Observable.Sample set of operators.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TimeInterval``1(System.IObservable{``0})">
      <summary>
            Records the time interval between consecutive elements in an observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to record time intervals for.</param>
      <returns>An observable sequence with time interval information on elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.TimeInterval``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Records the time interval between consecutive elements in an observable sequence, using the specified scheduler to compute time intervals.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to record time intervals for.</param>
      <param name="scheduler">Scheduler used to compute time intervals.</param>
      <returns>An observable sequence with time interval information on elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Applies a timeout policy for each element in the observable sequence.
            If the next element isn't received within the specified timeout duration starting from its predecessor, a TimeoutException is propagated to the observer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to perform a timeout for.</param>
      <param name="dueTime">Maximum duration between values before a timeout occurs.</param>
      <returns>The source sequence with a TimeoutException in case of a timeout.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> is less than TimeSpan.Zero.</exception>
      <exception cref="T:System.TimeoutException">(Asynchronous) If no element is produced within <paramref name="dueTime" /> from the previous element.</exception>
      <remarks>
        <para>
            In case you only want to timeout on the first element, consider using the <see cref="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})" />
            operator applied to the source sequence and a delayed <see cref="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)" /> sequence. Alternatively, the general-purpose overload
            of Timeout, <see cref="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``1}})" /> can be used.
            </para>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="dueTime" /> is not recommended but supported, causing timeout timers to be scheduled that are due
            immediately. However, this doesn't guarantee a timeout will occur, even for the first element. This is a side-effect of the asynchrony introduced by the
            scheduler, where the action to propagate a timeout may not execute immediately, despite the TimeSpan.Zero due time. In such cases, the next element may
            arrive before the scheduler gets a chance to run the timeout action.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Applies a timeout policy for each element in the observable sequence, using the specified scheduler to run timeout timers.
            If the next element isn't received within the specified timeout duration starting from its predecessor, a TimeoutException is propagated to the observer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to perform a timeout for.</param>
      <param name="dueTime">Maximum duration between values before a timeout occurs.</param>
      <param name="scheduler">Scheduler to run the timeout timers on.</param>
      <returns>The source sequence with a TimeoutException in case of a timeout.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> is less than TimeSpan.Zero.</exception>
      <exception cref="T:System.TimeoutException">(Asynchronous) If no element is produced within <paramref name="dueTime" /> from the previous element.</exception>
      <remarks>
        <para>
            In case you only want to timeout on the first element, consider using the <see cref="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})" />
            operator applied to the source sequence and a delayed <see cref="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)" /> sequence. Alternatively, the general-purpose overload
            of Timeout, <see cref="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``1}})" /> can be used.
            </para>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="dueTime" /> is not recommended but supported, causing timeout timers to be scheduled that are due
            immediately. However, this doesn't guarantee a timeout will occur, even for the first element. This is a side-effect of the asynchrony introduced by the
            scheduler, where the action to propagate a timeout may not execute immediately, despite the TimeSpan.Zero due time. In such cases, the next element may
            arrive before the scheduler gets a chance to run the timeout action.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan,System.IObservable{``0})">
      <summary>
            Applies a timeout policy for each element in the observable sequence.
            If the next element isn't received within the specified timeout duration starting from its predecessor, the other observable sequence is used to produce future messages from that point on.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence and the other sequence used upon a timeout.</typeparam>
      <param name="source">Source sequence to perform a timeout for.</param>
      <param name="dueTime">Maximum duration between values before a timeout occurs.</param>
      <param name="other">Sequence to return in case of a timeout.</param>
      <returns>The source sequence switching to the other sequence in case of a timeout.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="other" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            In case you only want to timeout on the first element, consider using the <see cref="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})" />
            operator applied to the source sequence and a delayed <see cref="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)" /> sequence. Alternatively, the general-purpose overload
            of Timeout, <see cref="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``1}})" /> can be used.
            </para>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="dueTime" /> is not recommended but supported, causing timeout timers to be scheduled that are due
            immediately. However, this doesn't guarantee a timeout will occur, even for the first element. This is a side-effect of the asynchrony introduced by the
            scheduler, where the action to propagate a timeout may not execute immediately, despite the TimeSpan.Zero due time. In such cases, the next element may
            arrive before the scheduler gets a chance to run the timeout action.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan,System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Applies a timeout policy for each element in the observable sequence, using the specified scheduler to run timeout timers.
            If the next element isn't received within the specified timeout duration starting from its predecessor, the other observable sequence is used to produce future messages from that point on.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence and the other sequence used upon a timeout.</typeparam>
      <param name="source">Source sequence to perform a timeout for.</param>
      <param name="dueTime">Maximum duration between values before a timeout occurs.</param>
      <param name="other">Sequence to return in case of a timeout.</param>
      <param name="scheduler">Scheduler to run the timeout timers on.</param>
      <returns>The source sequence switching to the other sequence in case of a timeout.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="other" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            In case you only want to timeout on the first element, consider using the <see cref="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})" />
            operator applied to the source sequence and a delayed <see cref="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)" /> sequence. Alternatively, the general-purpose overload
            of Timeout, <see cref="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``1}})" /> can be used.
            </para>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="dueTime" /> is not recommended but supported, causing timeout timers to be scheduled that are due
            immediately. However, this doesn't guarantee a timeout will occur, even for the first element. This is a side-effect of the asynchrony introduced by the
            scheduler, where the action to propagate a timeout may not execute immediately, despite the TimeSpan.Zero due time. In such cases, the next element may
            arrive before the scheduler gets a chance to run the timeout action.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset)">
      <summary>
            Applies a timeout policy to the observable sequence based on an absolute time.
            If the sequence doesn't terminate before the specified absolute due time, a TimeoutException is propagated to the observer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to perform a timeout for.</param>
      <param name="dueTime">Time when a timeout occurs. If this value is less than or equal to DateTimeOffset.UtcNow, the timeout occurs immediately.</param>
      <returns>The source sequence with a TimeoutException in case of a timeout.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.TimeoutException">(Asynchronous) If the sequence hasn't terminated before <paramref name="dueTime" />.</exception>
      <remarks>
            In case you only want to timeout on the first element, consider using the <see cref="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})" />
            operator applied to the source sequence and a delayed <see cref="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)" /> sequence. Alternatively, the general-purpose overload
            of Timeout, <see cref="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``1}})" /> can be used.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Applies a timeout policy to the observable sequence based on an absolute time, using the specified scheduler to run timeout timers.
            If the sequence doesn't terminate before the specified absolute due time, a TimeoutException is propagated to the observer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to perform a timeout for.</param>
      <param name="dueTime">Time when a timeout occurs. If this value is less than or equal to DateTimeOffset.UtcNow, the timeout occurs immediately.</param>
      <param name="scheduler">Scheduler to run the timeout timers on.</param>
      <returns>The source sequence with a TimeoutException in case of a timeout.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.TimeoutException">(Asynchronous) If the sequence hasn't terminated before <paramref name="dueTime" />.</exception>
      <remarks>
            In case you only want to timeout on the first element, consider using the <see cref="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})" />
            operator applied to the source sequence and a delayed <see cref="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)" /> sequence. Alternatively, the general-purpose overload
            of Timeout, <see cref="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``1}})" /> can be used.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset,System.IObservable{``0})">
      <summary>
            Applies a timeout policy to the observable sequence based on an absolute time.
            If the sequence doesn't terminate before the specified absolute due time, the other observable sequence is used to produce future messages from that point on.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence and the other sequence used upon a timeout.</typeparam>
      <param name="source">Source sequence to perform a timeout for.</param>
      <param name="dueTime">Time when a timeout occurs. If this value is less than or equal to DateTimeOffset.UtcNow, the timeout occurs immediately.</param>
      <param name="other">Sequence to return in case of a timeout.</param>
      <returns>The source sequence switching to the other sequence in case of a timeout.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="other" /> is null.</exception>
      <remarks>
            In case you only want to timeout on the first element, consider using the <see cref="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})" />
            operator applied to the source sequence and a delayed <see cref="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)" /> sequence. Alternatively, the general-purpose overload
            of Timeout, <see cref="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``1}})" /> can be used.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset,System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Applies a timeout policy to the observable sequence based on an absolute time, using the specified scheduler to run timeout timers.
            If the sequence doesn't terminate before the specified absolute due time, the other observable sequence is used to produce future messages from that point on.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence and the other sequence used upon a timeout.</typeparam>
      <param name="source">Source sequence to perform a timeout for.</param>
      <param name="dueTime">Time when a timeout occurs. If this value is less than or equal to DateTimeOffset.UtcNow, the timeout occurs immediately.</param>
      <param name="other">Sequence to return in case of a timeout.</param>
      <param name="scheduler">Scheduler to run the timeout timers on.</param>
      <returns>The source sequence switching to the other sequence in case of a timeout.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="other" /> or <paramref name="scheduler" /> is null.</exception>
      <remarks>
            In case you only want to timeout on the first element, consider using the <see cref="M:System.Reactive.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})" />
            operator applied to the source sequence and a delayed <see cref="M:System.Reactive.Linq.Observable.Throw``1(System.Exception)" /> sequence. Alternatively, the general-purpose overload
            of Timeout, <see cref="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``1}})" /> can be used.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}})">
      <summary>
            Applies a timeout policy to the observable sequence based on a timeout duration computed for each element.
            If the next element isn't received within the computed duration starting from its predecessor, a TimeoutException is propagated to the observer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TTimeout">The type of the elements in the timeout sequences used to indicate the timeout duration for each element in the source sequence.</typeparam>
      <param name="source">Source sequence to perform a timeout for.</param>
      <param name="timeoutDurationSelector">Selector to retrieve an observable sequence that represents the timeout between the current element and the next element.</param>
      <returns>The source sequence with a TimeoutException in case of a timeout.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="timeoutDurationSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}},System.IObservable{``0})">
      <summary>
            Applies a timeout policy to the observable sequence based on a timeout duration computed for each element.
            If the next element isn't received within the computed duration starting from its predecessor, the other observable sequence is used to produce future messages from that point on.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence and the other sequence used upon a timeout.</typeparam>
      <typeparam name="TTimeout">The type of the elements in the timeout sequences used to indicate the timeout duration for each element in the source sequence.</typeparam>
      <param name="source">Source sequence to perform a timeout for.</param>
      <param name="timeoutDurationSelector">Selector to retrieve an observable sequence that represents the timeout between the current element and the next element.</param>
      <param name="other">Sequence to return in case of a timeout.</param>
      <returns>The source sequence switching to the other sequence in case of a timeout.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="timeoutDurationSelector" /> or <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``1}})">
      <summary>
            Applies a timeout policy to the observable sequence based on an initial timeout duration for the first element, and a timeout duration computed for each subsequent element.
            If the next element isn't received within the computed duration starting from its predecessor, a TimeoutException is propagated to the observer.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TTimeout">The type of the elements in the timeout sequences used to indicate the timeout duration for each element in the source sequence.</typeparam>
      <param name="source">Source sequence to perform a timeout for.</param>
      <param name="firstTimeout">Observable sequence that represents the timeout for the first element.</param>
      <param name="timeoutDurationSelector">Selector to retrieve an observable sequence that represents the timeout between the current element and the next element.</param>
      <returns>The source sequence with a TimeoutException in case of a timeout.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="firstTimeout" /> or <paramref name="timeoutDurationSelector" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timeout``2(System.IObservable{``0},System.IObservable{``1},System.Func{``0,System.IObservable{``1}},System.IObservable{``0})">
      <summary>
            Applies a timeout policy to the observable sequence based on an initial timeout duration for the first element, and a timeout duration computed for each subsequent element.
            If the next element isn't received within the computed duration starting from its predecessor, the other observable sequence is used to produce future messages from that point on.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence and the other sequence used upon a timeout.</typeparam>
      <typeparam name="TTimeout">The type of the elements in the timeout sequences used to indicate the timeout duration for each element in the source sequence.</typeparam>
      <param name="source">Source sequence to perform a timeout for.</param>
      <param name="firstTimeout">Observable sequence that represents the timeout for the first element.</param>
      <param name="timeoutDurationSelector">Selector to retrieve an observable sequence that represents the timeout between the current element and the next element.</param>
      <param name="other">Sequence to return in case of a timeout.</param>
      <returns>The source sequence switching to the other sequence in case of a timeout.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="firstTimeout" /> or <paramref name="timeoutDurationSelector" /> or <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timer(System.TimeSpan)">
      <summary>
            Returns an observable sequence that produces a single value after the specified relative due time has elapsed.
            </summary>
      <param name="dueTime">Relative time at which to produce the value. If this value is less than or equal to TimeSpan.Zero, the timer will fire as soon as possible.</param>
      <returns>An observable sequence that produces a value after the due time has elapsed.</returns>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timer(System.DateTimeOffset)">
      <summary>
            Returns an observable sequence that produces a single value at the specified absolute due time.
            </summary>
      <param name="dueTime">Absolute time at which to produce the value. If this value is less than or equal to DateTimeOffset.UtcNow, the timer will fire as soon as possible.</param>
      <returns>An observable sequence that produces a value at due time.</returns>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timer(System.TimeSpan,System.TimeSpan)">
      <summary>
            Returns an observable sequence that periodically produces a value after the specified initial relative due time has elapsed.
            </summary>
      <param name="dueTime">Relative time at which to produce the first value. If this value is less than or equal to TimeSpan.Zero, the timer will fire as soon as possible.</param>
      <param name="period">Period to produce subsequent values. If this value is equal to TimeSpan.Zero, the timer will recur as fast as possible.</param>
      <returns>An observable sequence that produces a value after due time has elapsed and then after each period.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="period" /> is less than TimeSpan.Zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timer(System.DateTimeOffset,System.TimeSpan)">
      <summary>
            Returns an observable sequence that periodically produces a value starting at the specified initial absolute due time.
            </summary>
      <param name="dueTime">Absolute time at which to produce the first value. If this value is less than or equal to DateTimeOffset.UtcNow, the timer will fire as soon as possible.</param>
      <param name="period">Period to produce subsequent values. If this value is equal to TimeSpan.Zero, the timer will recur as fast as possible.</param>
      <returns>An observable sequence that produces a value at due time and then after each period.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="period" /> is less than TimeSpan.Zero.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timer(System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that produces a single value after the specified relative due time has elapsed, using the specified scheduler to run the timer.
            </summary>
      <param name="dueTime">Relative time at which to produce the value. If this value is less than or equal to TimeSpan.Zero, the timer will fire as soon as possible.</param>
      <param name="scheduler">Scheduler to run the timer on.</param>
      <returns>An observable sequence that produces a value after the due time has elapsed.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timer(System.DateTimeOffset,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that produces a single value at the specified absolute due time, using the specified scheduler to run the timer.
            </summary>
      <param name="dueTime">Absolute time at which to produce the value. If this value is less than or equal to DateTimeOffset.UtcNow, the timer will fire as soon as possible.</param>
      <param name="scheduler">Scheduler to run the timer on.</param>
      <returns>An observable sequence that produces a value at due time.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timer(System.TimeSpan,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that periodically produces a value after the specified initial relative due time has elapsed, using the specified scheduler to run timers.
            </summary>
      <param name="dueTime">Relative time at which to produce the first value. If this value is less than or equal to TimeSpan.Zero, the timer will fire as soon as possible.</param>
      <param name="period">Period to produce subsequent values. If this value is equal to TimeSpan.Zero, the timer will recur as fast as possible.</param>
      <param name="scheduler">Scheduler to run timers on.</param>
      <returns>An observable sequence that produces a value after due time has elapsed and then each period.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="period" /> is less than TimeSpan.Zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timer(System.DateTimeOffset,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Returns an observable sequence that periodically produces a value starting at the specified initial absolute due time, using the specified scheduler to run timers.
            </summary>
      <param name="dueTime">Absolute time at which to produce the first value. If this value is less than or equal to DateTimeOffset.UtcNow, the timer will fire as soon as possible.</param>
      <param name="period">Period to produce subsequent values. If this value is equal to TimeSpan.Zero, the timer will recur as fast as possible.</param>
      <param name="scheduler">Scheduler to run timers on.</param>
      <returns>An observable sequence that produces a value at due time and then after each period.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="period" /> is less than TimeSpan.Zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timestamp``1(System.IObservable{``0})">
      <summary>
            Timestamps each element in an observable sequence using the local system clock.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to timestamp elements for.</param>
      <returns>An observable sequence with timestamp information on elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Timestamp``1(System.IObservable{``0},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Timestamp each element in an observable sequence using the clock of the specified scheduler.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <param name="source">Source sequence to timestamp elements for.</param>
      <param name="scheduler">Scheduler used to compute timestamps.</param>
      <returns>An observable sequence with timestamp information on elements.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.TimeSpan)">
      <summary>
            Projects each element of an observable sequence into consecutive non-overlapping windows which are produced based on timing information.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the windows in the result sequence.</typeparam>
      <param name="source">Source sequence to produce windows over.</param>
      <param name="timeSpan">Length of each window.</param>
      <returns>The sequence of windows.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeSpan" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            Specifying a TimeSpan.Zero value for <paramref name="timeSpan" /> is not recommended but supported, causing the scheduler to create windows as fast as it can.
            Because all source sequence elements end up in one of the windows, some windows won't have a zero time span. This is a side-effect of the asynchrony introduced
            by the scheduler, where the action to close the current window and to create a new window may not execute immediately, despite the TimeSpan.Zero due time.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Projects each element of an observable sequence into consecutive non-overlapping windows which are produced based on timing information, using the specified scheduler to run timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the windows in the result sequence.</typeparam>
      <param name="source">Source sequence to produce windows over.</param>
      <param name="timeSpan">Length of each window.</param>
      <param name="scheduler">Scheduler to run windowing timers on.</param>
      <returns>An observable sequence of windows.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeSpan" /> is less than TimeSpan.Zero.</exception>
      <remarks>
            Specifying a TimeSpan.Zero value for <paramref name="timeSpan" /> is not recommended but supported, causing the scheduler to create windows as fast as it can.
            Because all source sequence elements end up in one of the windows, some windows won't have a zero time span. This is a side-effect of the asynchrony introduced
            by the scheduler, where the action to close the current window and to create a new window may not execute immediately, despite the TimeSpan.Zero due time.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.TimeSpan,System.TimeSpan)">
      <summary>
            Projects each element of an observable sequence into zero or more windows which are produced based on timing information.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the windows in the result sequence.</typeparam>
      <param name="source">Source sequence to produce windows over.</param>
      <param name="timeSpan">Length of each window.</param>
      <param name="timeShift">Interval between creation of consecutive windows.</param>
      <returns>An observable sequence of windows.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeSpan" /> or <paramref name="timeSpan" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="timeSpan" /> is not recommended but supported, causing the scheduler to create windows with minimum duration
            length. However, some windows won't have a zero time span. This is a side-effect of the asynchrony introduced by the scheduler, where the action to close the
            current window may not execute immediately, despite the TimeSpan.Zero due time.
            </para>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="timeShift" /> is not recommended but supported, causing the scheduler to create windows as fast as it can.
            However, this doesn't mean all windows will start at the beginning of the source sequence. This is a side-effect of the asynchrony introduced by the scheduler,
            where the action to create a new window may not execute immediately, despite the TimeSpan.Zero due time.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.TimeSpan,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Projects each element of an observable sequence into zero or more windows which are produced based on timing information, using the specified scheduler to run timers.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the windows in the result sequence.</typeparam>
      <param name="source">Source sequence to produce windows over.</param>
      <param name="timeSpan">Length of each window.</param>
      <param name="timeShift">Interval between creation of consecutive windows.</param>
      <param name="scheduler">Scheduler to run windowing timers on.</param>
      <returns>An observable sequence of windows.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeSpan" /> or <paramref name="timeSpan" /> is less than TimeSpan.Zero.</exception>
      <remarks>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="timeSpan" /> is not recommended but supported, causing the scheduler to create windows with minimum duration
            length. However, some windows won't have a zero time span. This is a side-effect of the asynchrony introduced by the scheduler, where the action to close the
            current window may not execute immediately, despite the TimeSpan.Zero due time.
            </para>
        <para>
            Specifying a TimeSpan.Zero value for <paramref name="timeShift" /> is not recommended but supported, causing the scheduler to create windows as fast as it can.
            However, this doesn't mean all windows will start at the beginning of the source sequence. This is a side-effect of the asynchrony introduced by the scheduler,
            where the action to create a new window may not execute immediately, despite the TimeSpan.Zero due time.
            </para>
      </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.TimeSpan,System.Int32)">
      <summary>
            Projects each element of an observable sequence into a window that is completed when either it's full or a given amount of time has elapsed.
            A useful real-world analogy of this overload is the behavior of a ferry leaving the dock when all seats are taken, or at the scheduled time of departure, whichever event occurs first.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the windows in the result sequence.</typeparam>
      <param name="source">Source sequence to produce windows over.</param>
      <param name="timeSpan">Maximum time length of a window.</param>
      <param name="count">Maximum element count of a window.</param>
      <returns>An observable sequence of windows.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeSpan" /> is less than TimeSpan.Zero. -or- <paramref name="count" /> is less than or equal to zero.</exception>
      <remarks>
            Specifying a TimeSpan.Zero value for <paramref name="timeSpan" /> is not recommended but supported, causing the scheduler to create windows as fast as it can.
            Because all source sequence elements end up in one of the windows, some windows won't have a zero time span. This is a side-effect of the asynchrony introduced
            by the scheduler, where the action to close the current window and to create a new window may not execute immediately, despite the TimeSpan.Zero due time.
            </remarks>
    </member>
    <member name="M:System.Reactive.Linq.Observable.Window``1(System.IObservable{``0},System.TimeSpan,System.Int32,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Projects each element of an observable sequence into a window that is completed when either it's full or a given amount of time has elapsed, using the specified scheduler to run timers.
            A useful real-world analogy of this overload is the behavior of a ferry leaving the dock when all seats are taken, or at the scheduled time of departure, whichever event occurs first.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence, and in the windows in the result sequence.</typeparam>
      <param name="source">Source sequence to produce windows over.</param>
      <param name="timeSpan">Maximum time length of a window.</param>
      <param name="count">Maximum element count of a window.</param>
      <param name="scheduler">Scheduler to run windowing timers on.</param>
      <returns>An observable sequence of windows.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeSpan" /> is less than TimeSpan.Zero. -or- <paramref name="count" /> is less than or equal to zero.</exception>
      <remarks>
            Specifying a TimeSpan.Zero value for <paramref name="timeSpan" /> is not recommended but supported, causing the scheduler to create windows as fast as it can.
            Because all source sequence elements end up in one of the windows, some windows won't have a zero time span. This is a side-effect of the asynchrony introduced
            by the scheduler, where the action to close the current window and to create a new window may not execute immediately, despite the TimeSpan.Zero due time.
            </remarks>
    </member>
    <member name="T:System.Reactive.Linq.IQueryLanguage">
      <summary>
            Internal interface describing the LINQ to Events query language.
            </summary>
    </member>
    <member name="T:System.Reactive.EventPatternSourceBase`2">
      <summary>
            Base class for classes that expose an observable sequence as a well-known event pattern (sender, event arguments).
            Contains functionality to maintain a map of event handler delegates to observable sequence subscriptions. Subclasses
            should only add an event with custom add and remove methods calling into the base class's operations.
            </summary>
      <typeparam name="TSender">The type of the sender that raises the event.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
    </member>
    <member name="M:System.Reactive.EventPatternSourceBase`2.#ctor(System.IObservable{System.Reactive.EventPattern{`0,`1}},System.Action{System.Action{`0,`1},System.Reactive.EventPattern{`0,`1}})">
      <summary>
            Creates a new event pattern source.
            </summary>
      <param name="source">Source sequence to expose as an event.</param>
      <param name="invokeHandler">Delegate used to invoke the event for each element of the sequence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="invokeHandler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.EventPatternSourceBase`2.Add(System.Delegate,System.Action{`0,`1})">
      <summary>
            Adds the specified event handler, causing a subscription to the underlying source.
            </summary>
      <param name="handler">Event handler to add. The same delegate should be passed to the Remove operation in order to remove the event handler.</param>
      <param name="invoke">Invocation delegate to raise the event in the derived class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> or <paramref name="invoke" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.EventPatternSourceBase`2.Remove(System.Delegate)">
      <summary>
            Removes the specified event handler, causing a disposal of the corresponding subscription to the underlying source that was created during the Add operation.
            </summary>
      <param name="handler">Event handler to remove. This should be the same delegate as one that was passed to the Add operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.EventPattern`2">
      <summary>
            Represents a .NET event invocation consisting of the strongly typed object that raised the event and the data that was generated by the event.
            </summary>
      <typeparam name="TSender">The type of the sender that raised the event.</typeparam>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
    </member>
    <member name="M:System.Reactive.EventPattern`2.#ctor(`0,`1)">
      <summary>
            Creates a new data representation instance of a .NET event invocation with the given sender and event data.
            </summary>
      <param name="sender">The sender object that raised the event.</param>
      <param name="e">The event data that was generated by the event.</param>
    </member>
    <member name="M:System.Reactive.EventPattern`2.Equals(System.Reactive.EventPattern{`0,`1})">
      <summary>
            Determines whether the current EventPattern&lt;TSender, TEventArgs&gt; object represents the same event as a specified EventPattern&lt;TSender, TEventArgs&gt; object.
            </summary>
      <param name="other">An object to compare to the current EventPattern&lt;TSender, TEventArgs&gt; object.</param>
      <returns>true if both EventPattern&lt;TSender, TEventArgs&gt; objects represent the same event; otherwise, false.</returns>
    </member>
    <member name="M:System.Reactive.EventPattern`2.Equals(System.Object)">
      <summary>
            Determines whether the specified System.Object is equal to the current EventPattern&lt;TSender, TEventArgs&gt;.
            </summary>
      <param name="obj">The System.Object to compare with the current EventPattern&lt;TSender, TEventArgs&gt;.</param>
      <returns>true if the specified System.Object is equal to the current EventPattern&lt;TSender, TEventArgs&gt;; otherwise, false.</returns>
    </member>
    <member name="M:System.Reactive.EventPattern`2.GetHashCode">
      <summary>
            Returns the hash code for the current EventPattern&lt;TSender, TEventArgs&gt; instance.
            </summary>
      <returns>A hash code for the current EventPattern&lt;TSender, TEventArgs&gt; instance.</returns>
    </member>
    <member name="M:System.Reactive.EventPattern`2.op_Equality(System.Reactive.EventPattern{`0,`1},System.Reactive.EventPattern{`0,`1})">
      <summary>
            Determines whether two specified EventPattern&lt;TSender, TEventArgs&gt; objects represent the same event.
            </summary>
      <param name="first">The first EventPattern&lt;TSender, TEventArgs&gt; to compare, or null.</param>
      <param name="second">The second EventPattern&lt;TSender, TEventArgs&gt; to compare, or null.</param>
      <returns>true if both EventPattern&lt;TSender, TEventArgs&gt; objects represent the same event; otherwise, false.</returns>
    </member>
    <member name="M:System.Reactive.EventPattern`2.op_Inequality(System.Reactive.EventPattern{`0,`1},System.Reactive.EventPattern{`0,`1})">
      <summary>
            Determines whether two specified EventPattern&lt;TSender, TEventArgs&gt; objects represent a different event.
            </summary>
      <param name="first">The first EventPattern&lt;TSender, TEventArgs&gt; to compare, or null.</param>
      <param name="second">The second EventPattern&lt;TSender, TEventArgs&gt; to compare, or null.</param>
      <returns>true if both EventPattern&lt;TSender, TEventArgs&gt; objects don't represent the same event; otherwise, false.</returns>
    </member>
    <member name="P:System.Reactive.EventPattern`2.Sender">
      <summary>
            Gets the sender object that raised the event.
            </summary>
    </member>
    <member name="P:System.Reactive.EventPattern`2.EventArgs">
      <summary>
            Gets the event data that was generated by the event.
            </summary>
    </member>
    <member name="T:System.Reactive.EventPattern`1">
      <summary>
            Represents a .NET event invocation consisting of the weakly typed object that raised the event and the data that was generated by the event.
            </summary>
      <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
    </member>
    <member name="M:System.Reactive.EventPattern`1.#ctor(System.Object,`0)">
      <summary>
            Creates a new data representation instance of a .NET event invocation with the given sender and event data.
            </summary>
      <param name="sender">The sender object that raised the event.</param>
      <param name="e">The event data that was generated by the event.</param>
    </member>
    <member name="T:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2">
      <summary>
            Base class for virtual time schedulers.
            </summary>
      <typeparam name="TAbsolute">Absolute time representation type.</typeparam>
      <typeparam name="TRelative">Relative time representation type.</typeparam>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.#ctor">
      <summary>
            Creates a new virtual time scheduler with the default value of TAbsolute as the initial clock value.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.#ctor(`0,System.Collections.Generic.IComparer{`0})">
      <summary>
            Creates a new virtual time scheduler with the specified initial clock value and absolute time comparer.
            </summary>
      <param name="initialClock">Initial value for the clock.</param>
      <param name="comparer">Comparer to determine causality of events based on absolute time.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Add(`0,`1)">
      <summary>
            Adds a relative time value to an absolute time value.
            </summary>
      <param name="absolute">Absolute time value.</param>
      <param name="relative">Relative time value to add.</param>
      <returns>The resulting absolute time sum value.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.ToDateTimeOffset(`0)">
      <summary>
            Converts the absolute time value to a DateTimeOffset value.
            </summary>
      <param name="absolute">Absolute time value to convert.</param>
      <returns>The corresponding DateTimeOffset value.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.ToRelative(System.TimeSpan)">
      <summary>
            Converts the TimeSpan value to a relative time value.
            </summary>
      <param name="timeSpan">TimeSpan value to convert.</param>
      <returns>The corresponding relative time value.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.ScheduleAbsolute``1(``0,`0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed at dueTime.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="dueTime">Absolute time at which to execute the action.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.ScheduleRelative``1(``0,`1,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed at dueTime.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="dueTime">Relative time after which to execute the action.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Schedule``1(``0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Schedule``1(``0,System.TimeSpan,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed after dueTime.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="dueTime">Relative time after which to execute the action.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Schedule``1(``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed at dueTime.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="dueTime">Absolute time at which to execute the action.</param>
      <param name="action">Action to be executed.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Start">
      <summary>
            Starts the virtual time scheduler.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Stop">
      <summary>
            Stops the virtual time scheduler.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.AdvanceTo(`0)">
      <summary>
            Advances the scheduler's clock to the specified time, running all work till that point.
            </summary>
      <param name="time">Absolute time to advance the scheduler's clock to.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is in the past.</exception>
      <exception cref="T:System.InvalidOperationException">The scheduler is already running. VirtualTimeScheduler doesn't support running nested work dispatch loops. To simulate time slippage while running work on the scheduler, use <see cref="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Sleep(`1)" />.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.AdvanceBy(`1)">
      <summary>
            Advances the scheduler's clock by the specified relative time, running all work scheduled for that timespan.
            </summary>
      <param name="time">Relative time to advance the scheduler's clock by.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is negative.</exception>
      <exception cref="T:System.InvalidOperationException">The scheduler is already running. VirtualTimeScheduler doesn't support running nested work dispatch loops. To simulate time slippage while running work on the scheduler, use <see cref="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Sleep(`1)" />.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Sleep(`1)">
      <summary>
            Advances the scheduler's clock by the specified relative time.
            </summary>
      <param name="time">Relative time to advance the scheduler's clock by.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> is negative.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.GetNext">
      <summary>
            Gets the next scheduled item to be executed.
            </summary>
      <returns>The next scheduled item.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.GetService(System.Type)">
      <summary>
            Discovers scheduler services by interface type. The base class implementation supports
            only the IStopwatchProvider service. To influence service discovery - such as adding
            support for other scheduler services - derived types can override this method.
            </summary>
      <param name="serviceType">Scheduler service interface type to discover.</param>
      <returns>Object implementing the requested service, if available; null otherwise.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.StartStopwatch">
      <summary>
            Starts a new stopwatch object.
            </summary>
      <returns>New stopwatch object; started at the time of the request.</returns>
    </member>
    <member name="P:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.IsEnabled">
      <summary>
            Gets whether the scheduler is enabled to run work.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Comparer">
      <summary>
            Gets the comparer used to compare absolute time values.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Clock">
      <summary>
            Gets the scheduler's absolute time clock value.
            </summary>
    </member>
    <member name="P:System.Reactive.Concurrency.VirtualTimeSchedulerBase`2.Now">
      <summary>
            Gets the scheduler's notion of current time.
            </summary>
    </member>
    <member name="T:System.Reactive.Concurrency.HistoricalSchedulerBase">
      <summary>
            Base class for historical schedulers, which are virtual time schedulers that use DateTimeOffset for absolute time and TimeSpan for relative time.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.HistoricalSchedulerBase.#ctor">
      <summary>
            Creates a new historical scheduler with the minimum value of DateTimeOffset as the initial clock value.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.HistoricalSchedulerBase.#ctor(System.DateTimeOffset)">
      <summary>
            Creates a new historical scheduler with the specified initial clock value.
            </summary>
      <param name="initialClock">Initial clock value.</param>
    </member>
    <member name="M:System.Reactive.Concurrency.HistoricalSchedulerBase.#ctor(System.DateTimeOffset,System.Collections.Generic.IComparer{System.DateTimeOffset})">
      <summary>
            Creates a new historical scheduler with the specified initial clock value and absolute time comparer.
            </summary>
      <param name="initialClock">Initial value for the clock.</param>
      <param name="comparer">Comparer to determine causality of events based on absolute time.</param>
    </member>
    <member name="M:System.Reactive.Concurrency.HistoricalSchedulerBase.Add(System.DateTimeOffset,System.TimeSpan)">
      <summary>
            Adds a relative time value to an absolute time value.
            </summary>
      <param name="absolute">Absolute time value.</param>
      <param name="relative">Relative time value to add.</param>
      <returns>The resulting absolute time sum value.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.HistoricalSchedulerBase.ToDateTimeOffset(System.DateTimeOffset)">
      <summary>
            Converts the absolute time value to a DateTimeOffset value.
            </summary>
      <param name="absolute">Absolute time value to convert.</param>
      <returns>The corresponding DateTimeOffset value.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.HistoricalSchedulerBase.ToRelative(System.TimeSpan)">
      <summary>
            Converts the TimeSpan value to a relative time value.
            </summary>
      <param name="timeSpan">TimeSpan value to convert.</param>
      <returns>The corresponding relative time value.</returns>
    </member>
    <member name="T:System.Reactive.Concurrency.HistoricalScheduler">
      <summary>
            Provides a virtual time scheduler that uses DateTimeOffset for absolute time and TimeSpan for relative time.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.HistoricalScheduler.#ctor">
      <summary>
            Creates a new historical scheduler with the minimum value of DateTimeOffset as the initial clock value.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.HistoricalScheduler.#ctor(System.DateTimeOffset)">
      <summary>
            Creates a new historical scheduler with the specified initial clock value.
            </summary>
      <param name="initialClock">Initial value for the clock.</param>
    </member>
    <member name="M:System.Reactive.Concurrency.HistoricalScheduler.#ctor(System.DateTimeOffset,System.Collections.Generic.IComparer{System.DateTimeOffset})">
      <summary>
            Creates a new historical scheduler with the specified initial clock value.
            </summary>
      <param name="initialClock">Initial value for the clock.</param>
      <param name="comparer">Comparer to determine causality of events based on absolute time.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.HistoricalScheduler.GetNext">
      <summary>
            Gets the next scheduled item to be executed.
            </summary>
      <returns>The next scheduled item.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.HistoricalScheduler.ScheduleAbsolute``1(``0,System.DateTimeOffset,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed at dueTime.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <param name="dueTime">Absolute time at which to execute the action.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Concurrency.VirtualTimeScheduler`2">
      <summary>
            Base class for virtual time schedulers using a priority queue for scheduled items.
            </summary>
      <typeparam name="TAbsolute">Absolute time representation type.</typeparam>
      <typeparam name="TRelative">Relative time representation type.</typeparam>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeScheduler`2.#ctor">
      <summary>
            Creates a new virtual time scheduler with the default value of TAbsolute as the initial clock value.
            </summary>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeScheduler`2.#ctor(`0,System.Collections.Generic.IComparer{`0})">
      <summary>
            Creates a new virtual time scheduler.
            </summary>
      <param name="initialClock">Initial value for the clock.</param>
      <param name="comparer">Comparer to determine causality of events based on absolute time.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeScheduler`2.GetNext">
      <summary>
            Gets the next scheduled item to be executed.
            </summary>
      <returns>The next scheduled item.</returns>
    </member>
    <member name="M:System.Reactive.Concurrency.VirtualTimeScheduler`2.ScheduleAbsolute``1(``0,`0,System.Func{System.Reactive.Concurrency.IScheduler,``0,System.IDisposable})">
      <summary>
            Schedules an action to be executed at dueTime.
            </summary>
      <typeparam name="TState">The type of the state passed to the scheduled action.</typeparam>
      <param name="state">State passed to the action to be executed.</param>
      <param name="action">Action to be executed.</param>
      <param name="dueTime">Absolute time at which to execute the action.</param>
      <returns>The disposable object used to cancel the scheduled action (best effort).</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Subjects.ConnectableObservable`2">
      <summary>
            Represents an observable wrapper that can be connected and disconnected from its underlying observable sequence.
            </summary>
      <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
      <typeparam name="TResult">The type of the elements in the resulting sequence, after transformation through the subject.</typeparam>
    </member>
    <member name="M:System.Reactive.Subjects.ConnectableObservable`2.#ctor(System.IObservable{`0},System.Reactive.Subjects.ISubject{`0,`1})">
      <summary>
            Creates an observable that can be connected and disconnected from its source.
            </summary>
      <param name="source">Underlying observable source sequence that can be connected and disconnected from the wrapper.</param>
      <param name="subject">Subject exposed by the connectable observable, receiving data from the underlying source sequence upon connection.</param>
    </member>
    <member name="M:System.Reactive.Subjects.ConnectableObservable`2.Connect">
      <summary>
            Connects the observable wrapper to its source. All subscribed observers will receive values from the underlying observable sequence as long as the connection is established.
            </summary>
      <returns>Disposable object used to disconnect the observable wrapper from its source, causing subscribed observer to stop receiving values from the underlying observable sequence.</returns>
    </member>
    <member name="M:System.Reactive.Subjects.ConnectableObservable`2.Subscribe(System.IObserver{`1})">
      <summary>
            Subscribes an observer to the observable sequence. No values from the underlying observable source will be received unless a connection was established through the Connect method.
            </summary>
      <param name="observer">Observer that will receive values from the underlying observable source when the current ConnectableObservable instance is connected through a call to Connect.</param>
      <returns>Disposable used to unsubscribe from the observable sequence.</returns>
    </member>
    <member name="T:System.Reactive.Subjects.Subject">
      <summary>
            Provides a set of static methods for creating subjects.
            </summary>
    </member>
    <member name="M:System.Reactive.Subjects.Subject.Create``2(System.IObserver{``0},System.IObservable{``1})">
      <summary>
            Creates a subject from the specified observer and observable.
            </summary>
      <typeparam name="TSource">The type of the elements received by the observer.</typeparam>
      <typeparam name="TResult">The type of the elements produced by the observable sequence.</typeparam>
      <param name="observer">The observer used to send messages to the subject.</param>
      <param name="observable">The observable used to subscribe to messages sent from the subject.</param>
      <returns>Subject implemented using the given observer and observable.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> or <paramref name="observable" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.Subject.Synchronize``2(System.Reactive.Subjects.ISubject{``0,``1})">
      <summary>
            Synchronizes the messages sent to the subject.
            </summary>
      <typeparam name="TSource">The type of the elements received by the subject.</typeparam>
      <typeparam name="TResult">The type of the elements produced by the subject.</typeparam>
      <param name="subject">The subject to synchronize.</param>
      <returns>Subject whose messages are synchronized.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subject" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.Subject.Synchronize``2(System.Reactive.Subjects.ISubject{``0,``1},System.Reactive.Concurrency.IScheduler)">
      <summary>
            Synchronizes the messages sent to the subject and notifies observers on the specified scheduler.
            </summary>
      <typeparam name="TSource">The type of the elements received by the subject.</typeparam>
      <typeparam name="TResult">The type of the elements produced by the subject.</typeparam>
      <param name="subject">The subject to synchronize.</param>
      <param name="scheduler">Scheduler to notify observers on.</param>
      <returns>Subject whose messages are synchronized and whose observers are notified on the given scheduler.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subject" /> or <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Subjects.AsyncSubject`1">
      <summary>
            Represents the result of an asynchronous operation.
            The last value before the OnCompleted notification, or the error received through OnError, is sent to all subscribed observers.
            </summary>
      <typeparam name="T">The type of the elements processed by the subject.</typeparam>
    </member>
    <member name="M:System.Reactive.Subjects.AsyncSubject`1.#ctor">
      <summary>
            Creates a subject that can only receive one value and that value is cached for all future observations.
            </summary>
    </member>
    <member name="M:System.Reactive.Subjects.AsyncSubject`1.OnCompleted">
      <summary>
            Notifies all subscribed observers about the end of the sequence, also causing the last received value to be sent out (if any).
            </summary>
    </member>
    <member name="M:System.Reactive.Subjects.AsyncSubject`1.OnError(System.Exception)">
      <summary>
            Notifies all subscribed observers about the exception.
            </summary>
      <param name="error">The exception to send to all observers.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="error" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.AsyncSubject`1.OnNext(`0)">
      <summary>
            Sends a value to the subject. The last value received before successful termination will be sent to all subscribed and future observers.
            </summary>
      <param name="value">The value to store in the subject.</param>
    </member>
    <member name="M:System.Reactive.Subjects.AsyncSubject`1.Subscribe(System.IObserver{`0})">
      <summary>
            Subscribes an observer to the subject.
            </summary>
      <param name="observer">Observer to subscribe to the subject.</param>
      <returns>Disposable object that can be used to unsubscribe the observer from the subject.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.AsyncSubject`1.Dispose">
      <summary>
            Unsubscribe all observers and release resources.
            </summary>
    </member>
    <member name="M:System.Reactive.Subjects.AsyncSubject`1.GetResult">
      <summary>
            Gets the last element of the subject, potentially blocking until the subject completes successfully or exceptionally.
            </summary>
      <returns>The last element of the subject. Throws an InvalidOperationException if no element was received.</returns>
      <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
    </member>
    <member name="P:System.Reactive.Subjects.AsyncSubject`1.HasObservers">
      <summary>
            Indicates whether the subject has observers subscribed to it.
            </summary>
    </member>
    <member name="P:System.Reactive.Subjects.AsyncSubject`1.IsCompleted">
      <summary>
            Gets whether the AsyncSubject has completed.
            </summary>
    </member>
    <member name="T:System.Reactive.Subjects.BehaviorSubject`1">
      <summary>
            Represents a value that changes over time.
            Observers can subscribe to the subject to receive the last (or initial) value and all subsequent notifications.
            </summary>
      <typeparam name="T">The type of the elements processed by the subject.</typeparam>
    </member>
    <member name="M:System.Reactive.Subjects.BehaviorSubject`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Subjects.BehaviorSubject`1" /> class which creates a subject that caches its last value and starts with the specified value.
            </summary>
      <param name="value">Initial value sent to observers when no other value has been received by the subject yet.</param>
    </member>
    <member name="M:System.Reactive.Subjects.BehaviorSubject`1.OnCompleted">
      <summary>
            Notifies all subscribed observers about the end of the sequence.
            </summary>
    </member>
    <member name="M:System.Reactive.Subjects.BehaviorSubject`1.OnError(System.Exception)">
      <summary>
            Notifies all subscribed observers about the exception.
            </summary>
      <param name="error">The exception to send to all observers.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="error" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.BehaviorSubject`1.OnNext(`0)">
      <summary>
            Notifies all subscribed observers about the arrival of the specified element in the sequence.
            </summary>
      <param name="value">The value to send to all observers.</param>
    </member>
    <member name="M:System.Reactive.Subjects.BehaviorSubject`1.Subscribe(System.IObserver{`0})">
      <summary>
            Subscribes an observer to the subject.
            </summary>
      <param name="observer">Observer to subscribe to the subject.</param>
      <returns>Disposable object that can be used to unsubscribe the observer from the subject.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.BehaviorSubject`1.Dispose">
      <summary>
            Unsubscribe all observers and release resources.
            </summary>
    </member>
    <member name="P:System.Reactive.Subjects.BehaviorSubject`1.HasObservers">
      <summary>
            Indicates whether the subject has observers subscribed to it.
            </summary>
    </member>
    <member name="T:System.Reactive.Subjects.Subject`1">
      <summary>
            Represents an object that is both an observable sequence as well as an observer.
            Each notification is broadcasted to all subscribed observers.
            </summary>
      <typeparam name="T">The type of the elements processed by the subject.</typeparam>
    </member>
    <member name="M:System.Reactive.Subjects.Subject`1.#ctor">
      <summary>
            Creates a subject.
            </summary>
    </member>
    <member name="M:System.Reactive.Subjects.Subject`1.OnCompleted">
      <summary>
            Notifies all subscribed observers about the end of the sequence.
            </summary>
    </member>
    <member name="M:System.Reactive.Subjects.Subject`1.OnError(System.Exception)">
      <summary>
            Notifies all subscribed observers about the specified exception.
            </summary>
      <param name="error">The exception to send to all currently subscribed observers.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="error" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.Subject`1.OnNext(`0)">
      <summary>
            Notifies all subscribed observers about the arrival of the specified element in the sequence.
            </summary>
      <param name="value">The value to send to all currently subscribed observers.</param>
    </member>
    <member name="M:System.Reactive.Subjects.Subject`1.Subscribe(System.IObserver{`0})">
      <summary>
            Subscribes an observer to the subject.
            </summary>
      <param name="observer">Observer to subscribe to the subject.</param>
      <returns>Disposable object that can be used to unsubscribe the observer from the subject.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.Subject`1.Dispose">
      <summary>
            Releases all resources used by the current instance of the <see cref="T:System.Reactive.Subjects.Subject`1" /> class and unsubscribes all observers.
            </summary>
    </member>
    <member name="P:System.Reactive.Subjects.Subject`1.HasObservers">
      <summary>
            Indicates whether the subject has observers subscribed to it.
            </summary>
    </member>
    <member name="T:System.Reactive.Joins.Pattern">
      <summary>
            Abstract base class for join patterns.
            </summary>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`1">
      <summary>
            Represents a join pattern over one observable sequence.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`1.Then``1(System.Func{`0,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`2">
      <summary>
            Represents a join pattern over two observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`2.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all three observable sequences have an available element.
            </summary>
      <typeparam name="TSource3">The type of the elements in the third observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the two previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`2.Then``1(System.Func{`0,`1,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`3">
      <summary>
            Represents a join pattern over three observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`3.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all four observable sequences have an available element.
            </summary>
      <typeparam name="TSource4">The type of the elements in the fourth observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the three previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`3.Then``1(System.Func{`0,`1,`2,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`4">
      <summary>
            Represents a join pattern over four observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`4.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all five observable sequences have an available element.
            </summary>
      <typeparam name="TSource5">The type of the elements in the fifth observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the four previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`4.Then``1(System.Func{`0,`1,`2,`3,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`5">
      <summary>
            Represents a join pattern over five observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`5.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all six observable sequences have an available element.
            </summary>
      <typeparam name="TSource6">The type of the elements in the sixth observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the five previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`5.Then``1(System.Func{`0,`1,`2,`3,`4,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`6">
      <summary>
            Represents a join pattern over six observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`6.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all seven observable sequences have an available element.
            </summary>
      <typeparam name="TSource7">The type of the elements in the seventh observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the six previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`6.Then``1(System.Func{`0,`1,`2,`3,`4,`5,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`7">
      <summary>
            Represents a join pattern over seven observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`7.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all eight observable sequences have an available element.
            </summary>
      <typeparam name="TSource8">The type of the elements in the eighth observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the seven previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`7.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`8">
      <summary>
            Represents a join pattern over eight observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`8.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all nine observable sequences have an available element.
            </summary>
      <typeparam name="TSource9">The type of the elements in the ninth observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the eight previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`8.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`9">
      <summary>
            Represents a join pattern over nine observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`9.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all ten observable sequences have an available element.
            </summary>
      <typeparam name="TSource10">The type of the elements in the tenth observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the nine previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`9.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`10">
      <summary>
            Represents a join pattern over ten observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`10.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all eleven observable sequences have an available element.
            </summary>
      <typeparam name="TSource11">The type of the elements in the eleventh observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the ten previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`10.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`11">
      <summary>
            Represents a join pattern over eleven observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`11.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all twelve observable sequences have an available element.
            </summary>
      <typeparam name="TSource12">The type of the elements in the twelfth observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the eleven previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`11.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`12">
      <summary>
            Represents a join pattern over twelve observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`12.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all thirteen observable sequences have an available element.
            </summary>
      <typeparam name="TSource13">The type of the elements in the thirteenth observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the twelve previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`12.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`13">
      <summary>
            Represents a join pattern over thirteen observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TSource13">The type of the elements in the thirteenth source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`13.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all fourteen observable sequences have an available element.
            </summary>
      <typeparam name="TSource14">The type of the elements in the fourteenth observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the thirteen previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`13.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`14">
      <summary>
            Represents a join pattern over fourteen observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TSource13">The type of the elements in the thirteenth source sequence.</typeparam>
      <typeparam name="TSource14">The type of the elements in the fourteenth source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`14.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all fifteen observable sequences have an available element.
            </summary>
      <typeparam name="TSource15">The type of the elements in the fifteenth observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the fourteen previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`14.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`15">
      <summary>
            Represents a join pattern over fifteen observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TSource13">The type of the elements in the thirteenth source sequence.</typeparam>
      <typeparam name="TSource14">The type of the elements in the fourteenth source sequence.</typeparam>
      <typeparam name="TSource15">The type of the elements in the fifteenth source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`15.And``1(System.IObservable{``0})">
      <summary>
            Creates a pattern that matches when all sixteen observable sequences have an available element.
            </summary>
      <typeparam name="TSource16">The type of the elements in the sixteenth observable sequence.</typeparam>
      <param name="other">Observable sequence to match with the fifteen previous sequences.</param>
      <returns>Pattern object that matches when all observable sequences have an available element.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`15.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Pattern`16">
      <summary>
            Represents a join pattern over sixteen observable sequences.
            </summary>
      <typeparam name="TSource1">The type of the elements in the first source sequence.</typeparam>
      <typeparam name="TSource2">The type of the elements in the second source sequence.</typeparam>
      <typeparam name="TSource3">The type of the elements in the third source sequence.</typeparam>
      <typeparam name="TSource4">The type of the elements in the fourth source sequence.</typeparam>
      <typeparam name="TSource5">The type of the elements in the fifth source sequence.</typeparam>
      <typeparam name="TSource6">The type of the elements in the sixth source sequence.</typeparam>
      <typeparam name="TSource7">The type of the elements in the seventh source sequence.</typeparam>
      <typeparam name="TSource8">The type of the elements in the eighth source sequence.</typeparam>
      <typeparam name="TSource9">The type of the elements in the ninth source sequence.</typeparam>
      <typeparam name="TSource10">The type of the elements in the tenth source sequence.</typeparam>
      <typeparam name="TSource11">The type of the elements in the eleventh source sequence.</typeparam>
      <typeparam name="TSource12">The type of the elements in the twelfth source sequence.</typeparam>
      <typeparam name="TSource13">The type of the elements in the thirteenth source sequence.</typeparam>
      <typeparam name="TSource14">The type of the elements in the fourteenth source sequence.</typeparam>
      <typeparam name="TSource15">The type of the elements in the fifteenth source sequence.</typeparam>
      <typeparam name="TSource16">The type of the elements in the sixteenth source sequence.</typeparam>
    </member>
    <member name="M:System.Reactive.Joins.Pattern`16.Then``1(System.Func{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,``0})">
      <summary>
            Matches when all observable sequences have an available element and projects the elements by invoking the selector function.
            </summary>
      <typeparam name="TResult">The type of the elements in the result sequence, returned by the selector function.</typeparam>
      <param name="selector">Selector that will be invoked for elements in the source sequences.</param>
      <returns>Plan that produces the projected results, to be fed (with other plans) to the When operator.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selector" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.Joins.Plan`1">
      <summary>
            Represents an execution plan for join patterns.
            </summary>
      <typeparam name="TResult">The type of the results produced by the plan.</typeparam>
    </member>
    <member name="T:System.Reactive.Subjects.ReplaySubject`1">
      <summary>
            Represents an object that is both an observable sequence as well as an observer.
            Each notification is broadcasted to all subscribed and future observers, subject to buffer trimming policies.
            </summary>
      <typeparam name="T">The type of the elements processed by the subject.</typeparam>
    </member>
    <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.Int32,System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Subjects.ReplaySubject`1" /> class with the specified buffer size, window and scheduler.
            </summary>
      <param name="bufferSize">Maximum element count of the replay buffer.</param>
      <param name="window">Maximum time length of the replay buffer.</param>
      <param name="scheduler">Scheduler the observers are invoked on.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is less than zero. -or- <paramref name="window" /> is less than TimeSpan.Zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.Int32,System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Subjects.ReplaySubject`1" /> class with the specified buffer size and window.
            </summary>
      <param name="bufferSize">Maximum element count of the replay buffer.</param>
      <param name="window">Maximum time length of the replay buffer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is less than zero. -or- <paramref name="window" /> is less than TimeSpan.Zero.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Subjects.ReplaySubject`1" /> class.
            </summary>
    </member>
    <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.Reactive.Concurrency.IScheduler)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Subjects.ReplaySubject`1" /> class with the specified scheduler.
            </summary>
      <param name="scheduler">Scheduler the observers are invoked on.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.Int32,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Subjects.ReplaySubject`1" /> class with the specified buffer size and scheduler.
            </summary>
      <param name="bufferSize">Maximum element count of the replay buffer.</param>
      <param name="scheduler">Scheduler the observers are invoked on.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is less than zero.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Subjects.ReplaySubject`1" /> class with the specified buffer size.
            </summary>
      <param name="bufferSize">Maximum element count of the replay buffer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> is less than zero.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.TimeSpan,System.Reactive.Concurrency.IScheduler)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Subjects.ReplaySubject`1" /> class with the specified window and scheduler.
            </summary>
      <param name="window">Maximum time length of the replay buffer.</param>
      <param name="scheduler">Scheduler the observers are invoked on.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="window" /> is less than TimeSpan.Zero.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.ReplaySubject`1.#ctor(System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Reactive.Subjects.ReplaySubject`1" /> class with the specified window.
            </summary>
      <param name="window">Maximum time length of the replay buffer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="window" /> is less than TimeSpan.Zero.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.ReplaySubject`1.OnNext(`0)">
      <summary>
            Notifies all subscribed and future observers about the arrival of the specified element in the sequence.
            </summary>
      <param name="value">The value to send to all observers.</param>
    </member>
    <member name="M:System.Reactive.Subjects.ReplaySubject`1.OnError(System.Exception)">
      <summary>
            Notifies all subscribed and future observers about the specified exception.
            </summary>
      <param name="error">The exception to send to all observers.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="error" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.ReplaySubject`1.OnCompleted">
      <summary>
            Notifies all subscribed and future observers about the end of the sequence.
            </summary>
    </member>
    <member name="M:System.Reactive.Subjects.ReplaySubject`1.Subscribe(System.IObserver{`0})">
      <summary>
            Subscribes an observer to the subject.
            </summary>
      <param name="observer">Observer to subscribe to the subject.</param>
      <returns>Disposable object that can be used to unsubscribe the observer from the subject.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observer" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Subjects.ReplaySubject`1.Dispose">
      <summary>
            Releases all resources used by the current instance of the <see cref="T:System.Reactive.Subjects.ReplaySubject`1" /> class and unsubscribe all observers.
            </summary>
    </member>
    <member name="P:System.Reactive.Subjects.ReplaySubject`1.HasObservers">
      <summary>
            Indicates whether the subject has observers subscribed to it.
            </summary>
    </member>
    <member name="T:System.Reactive.Threading.Tasks.NamespaceDoc">
      <summary>
            The <b>System.Reactive.Threading.Tasks</b> namespace contains helpers for the conversion between tasks and observable sequences.
            </summary>
    </member>
    <member name="T:System.Reactive.Threading.Tasks.TaskObservableExtensions">
      <summary>
            Provides a set of static methods for converting tasks to observable sequences.
            </summary>
    </member>
    <member name="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToObservable(System.Threading.Tasks.Task)">
      <summary>
            Returns an observable sequence that signals when the task completes.
            </summary>
      <param name="task">Task to convert to an observable sequence.</param>
      <returns>An observable sequence that produces a unit value when the task completes, or propagates the exception produced by the task.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> is null.</exception>
      <remarks>If the specified task object supports cancellation, consider using <see cref="M:System.Reactive.Linq.Observable.FromAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})" /> instead.</remarks>
    </member>
    <member name="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToObservable``1(System.Threading.Tasks.Task{``0})">
      <summary>
            Returns an observable sequence that propagates the result of the task.
            </summary>
      <typeparam name="TResult">The type of the result produced by the task.</typeparam>
      <param name="task">Task to convert to an observable sequence.</param>
      <returns>An observable sequence that produces the task's result, or propagates the exception produced by the task.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> is null.</exception>
      <remarks>If the specified task object supports cancellation, consider using <see cref="M:System.Reactive.Linq.Observable.FromAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})" /> instead.</remarks>
    </member>
    <member name="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToTask``1(System.IObservable{``0})">
      <summary>
            Returns a task that will receive the last value or the exception produced by the observable sequence.
            </summary>
      <typeparam name="TResult">The type of the elements in the source sequence.</typeparam>
      <param name="observable">Observable sequence to convert to a task.</param>
      <returns>A task that will receive the last element or the exception produced by the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observable" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToTask``1(System.IObservable{``0},System.Object)">
      <summary>
            Returns a task that will receive the last value or the exception produced by the observable sequence.
            </summary>
      <typeparam name="TResult">The type of the elements in the source sequence.</typeparam>
      <param name="observable">Observable sequence to convert to a task.</param>
      <param name="state">The state to use as the underlying task's AsyncState.</param>
      <returns>A task that will receive the last element or the exception produced by the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observable" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToTask``1(System.IObservable{``0},System.Threading.CancellationToken)">
      <summary>
            Returns a task that will receive the last value or the exception produced by the observable sequence.
            </summary>
      <typeparam name="TResult">The type of the elements in the source sequence.</typeparam>
      <param name="observable">Observable sequence to convert to a task.</param>
      <param name="cancellationToken">Cancellation token that can be used to cancel the task, causing unsubscription from the observable sequence.</param>
      <returns>A task that will receive the last element or the exception produced by the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observable" /> is null.</exception>
    </member>
    <member name="M:System.Reactive.Threading.Tasks.TaskObservableExtensions.ToTask``1(System.IObservable{``0},System.Threading.CancellationToken,System.Object)">
      <summary>
            Returns a task that will receive the last value or the exception produced by the observable sequence.
            </summary>
      <typeparam name="TResult">The type of the elements in the source sequence.</typeparam>
      <param name="observable">Observable sequence to convert to a task.</param>
      <param name="cancellationToken">Cancellation token that can be used to cancel the task, causing unsubscription from the observable sequence.</param>
      <param name="state">The state to use as the underlying task's AsyncState.</param>
      <returns>A task that will receive the last element or the exception produced by the observable sequence.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="observable" /> is null.</exception>
    </member>
    <member name="T:System.Reactive.TimeInterval`1">
      <summary>
            Represents a value associated with time interval information.
            The time interval can represent the time it took to produce the value, the interval relative to a previous value, the value's delivery time relative to a base, etc.
            </summary>
      <typeparam name="T">The type of the value being annotated with time interval information.</typeparam>
    </member>
    <member name="M:System.Reactive.TimeInterval`1.#ctor(`0,System.TimeSpan)">
      <summary>
            Constructs a time interval value.
            </summary>
      <param name="value">The value to be annotated with a time interval.</param>
      <param name="interval">Time interval associated with the value.</param>
    </member>
    <member name="M:System.Reactive.TimeInterval`1.Equals(System.Reactive.TimeInterval{`0})">
      <summary>
            Determines whether the current TimeInterval&lt;T&gt; value has the same Value and Interval as a specified TimeInterval&lt;T&gt; value.
            </summary>
      <param name="other">An object to compare to the current TimeInterval&lt;T&gt; value.</param>
      <returns>true if both TimeInterval&lt;T&gt; values have the same Value and Interval; otherwise, false.</returns>
    </member>
    <member name="M:System.Reactive.TimeInterval`1.op_Equality(System.Reactive.TimeInterval{`0},System.Reactive.TimeInterval{`0})">
      <summary>
            Determines whether the two specified TimeInterval&lt;T&gt; values have the same Value and Interval.
            </summary>
      <param name="first">The first TimeInterval&lt;T&gt; value to compare.</param>
      <param name="second">The second TimeInterval&lt;T&gt; value to compare.</param>
      <returns>true if the first TimeInterval&lt;T&gt; value has the same Value and Interval as the second TimeInterval&lt;T&gt; value; otherwise, false.</returns>
    </member>
    <member name="M:System.Reactive.TimeInterval`1.op_Inequality(System.Reactive.TimeInterval{`0},System.Reactive.TimeInterval{`0})">
      <summary>
            Determines whether the two specified TimeInterval&lt;T&gt; values don't have the same Value and Interval.
            </summary>
      <param name="first">The first TimeInterval&lt;T&gt; value to compare.</param>
      <param name="second">The second TimeInterval&lt;T&gt; value to compare.</param>
      <returns>true if the first TimeInterval&lt;T&gt; value has a different Value or Interval as the second TimeInterval&lt;T&gt; value; otherwise, false.</returns>
    </member>
    <member name="M:System.Reactive.TimeInterval`1.Equals(System.Object)">
      <summary>
            Determines whether the specified System.Object is equal to the current TimeInterval&lt;T&gt;.
            </summary>
      <param name="obj">The System.Object to compare with the current TimeInterval&lt;T&gt;.</param>
      <returns>true if the specified System.Object is equal to the current TimeInterval&lt;T&gt;; otherwise, false.</returns>
    </member>
    <member name="M:System.Reactive.TimeInterval`1.GetHashCode">
      <summary>
            Returns the hash code for the current TimeInterval&lt;T&gt; value.
            </summary>
      <returns>A hash code for the current TimeInterval&lt;T&gt; value.</returns>
    </member>
    <member name="M:System.Reactive.TimeInterval`1.ToString">
      <summary>
            Returns a string representation of the current TimeInterval&lt;T&gt; value.
            </summary>
      <returns>String representation of the current TimeInterval&lt;T&gt; value.</returns>
    </member>
    <member name="P:System.Reactive.TimeInterval`1.Value">
      <summary>
            Gets the value.
            </summary>
    </member>
    <member name="P:System.Reactive.TimeInterval`1.Interval">
      <summary>
            Gets the interval.
            </summary>
    </member>
    <member name="T:System.Reactive.Timestamped`1">
      <summary>
            Represents value with a timestamp on it.
            The timestamp typically represents the time the value was received, using an IScheduler's clock to obtain the current time.
            </summary>
      <typeparam name="T">The type of the value being timestamped.</typeparam>
    </member>
    <member name="M:System.Reactive.Timestamped`1.#ctor(`0,System.DateTimeOffset)">
      <summary>
            Constructs a timestamped value.
            </summary>
      <param name="value">The value to be annotated with a timestamp.</param>
      <param name="timestamp">Timestamp associated with the value.</param>
    </member>
    <member name="M:System.Reactive.Timestamped`1.Equals(System.Reactive.Timestamped{`0})">
      <summary>
            Determines whether the current Timestamped&lt;T&gt; value has the same Value and Timestamp as a specified Timestamped&lt;T&gt; value.
            </summary>
      <param name="other">An object to compare to the current Timestamped&lt;T&gt; value.</param>
      <returns>true if both Timestamped&lt;T&gt; values have the same Value and Timestamp; otherwise, false.</returns>
    </member>
    <member name="M:System.Reactive.Timestamped`1.op_Equality(System.Reactive.Timestamped{`0},System.Reactive.Timestamped{`0})">
      <summary>
            Determines whether the two specified Timestamped&lt;T&gt; values have the same Value and Timestamp.
            </summary>
      <param name="first">The first Timestamped&lt;T&gt; value to compare.</param>
      <param name="second">The second Timestamped&lt;T&gt; value to compare.</param>
      <returns>true if the first Timestamped&lt;T&gt; value has the same Value and Timestamp as the second Timestamped&lt;T&gt; value; otherwise, false.</returns>
    </member>
    <member name="M:System.Reactive.Timestamped`1.op_Inequality(System.Reactive.Timestamped{`0},System.Reactive.Timestamped{`0})">
      <summary>
            Determines whether the two specified Timestamped&lt;T&gt; values don't have the same Value and Timestamp.
            </summary>
      <param name="first">The first Timestamped&lt;T&gt; value to compare.</param>
      <param name="second">The second Timestamped&lt;T&gt; value to compare.</param>
      <returns>true if the first Timestamped&lt;T&gt; value has a different Value or Timestamp as the second Timestamped&lt;T&gt; value; otherwise, false.</returns>
    </member>
    <member name="M:System.Reactive.Timestamped`1.Equals(System.Object)">
      <summary>
            Determines whether the specified System.Object is equal to the current Timestamped&lt;T&gt;.
            </summary>
      <param name="obj">The System.Object to compare with the current Timestamped&lt;T&gt;.</param>
      <returns>true if the specified System.Object is equal to the current Timestamped&lt;T&gt;; otherwise, false.</returns>
    </member>
    <member name="M:System.Reactive.Timestamped`1.GetHashCode">
      <summary>
            Returns the hash code for the current Timestamped&lt;T&gt; value.
            </summary>
      <returns>A hash code for the current Timestamped&lt;T&gt; value.</returns>
    </member>
    <member name="M:System.Reactive.Timestamped`1.ToString">
      <summary>
            Returns a string representation of the current Timestamped&lt;T&gt; value.
            </summary>
      <returns>String representation of the current Timestamped&lt;T&gt; value.</returns>
    </member>
    <member name="P:System.Reactive.Timestamped`1.Value">
      <summary>
            Gets the value.
            </summary>
    </member>
    <member name="P:System.Reactive.Timestamped`1.Timestamp">
      <summary>
            Gets the timestamp.
            </summary>
    </member>
    <member name="T:System.Reactive.Timestamped">
      <summary>
            A helper class with a factory method for creating Timestamped&lt;T&gt; instances.
            </summary>
    </member>
    <member name="M:System.Reactive.Timestamped.Create``1(``0,System.DateTimeOffset)">
      <summary>
            Creates an instance of a Timestamped&lt;T&gt;.  This is syntactic sugar that uses type inference
            to avoid specifying a type in a constructor call, which is very useful when using anonymous types.
            </summary>
      <param name="value">The value to be annotated with a timestamp.</param>
      <param name="timestamp">Timestamp associated with the value.</param>
      <returns>Creates a new timestamped value.</returns>
    </member>
    <member name="T:System.Reactive.Strings_Linq">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.COULD_NOT_FIND_INSTANCE_EVENT">
      <summary>
              Looks up a localized string similar to Could not find event '{0}' on object of type '{1}'..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.COULD_NOT_FIND_STATIC_EVENT">
      <summary>
              Looks up a localized string similar to Could not find event '{0}' on type '{1}'..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.EVENT_ADD_METHOD_SHOULD_TAKE_ONE_PARAMETER">
      <summary>
              Looks up a localized string similar to Add method should take 1 parameter..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.EVENT_ARGS_NOT_ASSIGNABLE">
      <summary>
              Looks up a localized string similar to The second parameter of the event delegate must be assignable to '{0}'..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.EVENT_MISSING_ADD_METHOD">
      <summary>
              Looks up a localized string similar to Event is missing the add method..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.EVENT_MISSING_REMOVE_METHOD">
      <summary>
              Looks up a localized string similar to Event is missing the remove method..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.EVENT_MUST_RETURN_VOID">
      <summary>
              Looks up a localized string similar to The event delegate must have a void return type..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.EVENT_PATTERN_REQUIRES_TWO_PARAMETERS">
      <summary>
              Looks up a localized string similar to The event delegate must have exactly two parameters..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.EVENT_REMOVE_METHOD_SHOULD_TAKE_ONE_PARAMETER">
      <summary>
              Looks up a localized string similar to Remove method should take 1 parameter..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.EVENT_SENDER_NOT_ASSIGNABLE">
      <summary>
              Looks up a localized string similar to The first parameter of the event delegate must be assignable to '{0}'..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.EVENT_WINRT_REMOVE_METHOD_SHOULD_TAKE_ERT">
      <summary>
              Looks up a localized string similar to Remove method of a WinRT event should take an EventRegistrationToken..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.MORE_THAN_ONE_ELEMENT">
      <summary>
              Looks up a localized string similar to Sequence contains more than one element..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.MORE_THAN_ONE_MATCHING_ELEMENT">
      <summary>
              Looks up a localized string similar to Sequence contains more than one matching element..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.NO_ELEMENTS">
      <summary>
              Looks up a localized string similar to Sequence contains no elements..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.NO_MATCHING_ELEMENTS">
      <summary>
              Looks up a localized string similar to Sequence contains no matching element..
            </summary>
    </member>
    <member name="P:System.Reactive.Strings_Linq.CANT_ADVANCE_WHILE_RUNNING">
      <summary>
              Looks up a localized string similar to {0} cannot be called when the scheduler is already running. Try using Sleep instead..
            </summary>
    </member>
  </members>
</doc>